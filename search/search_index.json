{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DITA Open Toolkit 4.1","text":"<p>DITA Open Toolkit, or DITA-OT for short, is a set of Java-based, open-source tools that provide processing for content authored in the Darwin Information Typing Architecture.</p> <p>Note: While the DITA standard is owned and developed by OASIS, the DITA Open Toolkit project is governed separately. DITA-OT is an independent, open-source implementation of the DITA standard.</p>"},{"location":"#dita-ot-documentation","title":"DITA-OT documentation","text":"<p>The DITA Open Toolkit documentation provides information about installing, running, configuring and extending the toolkit.</p> <ul> <li>See the DITA Open Toolkit 4.1 Release Notes for information on the changes in the current release.</li> <li>Installing DITA Open Toolkit shows how to install the toolkit and run a build to verify the installation.</li> <li>Building output explains the methods that can be used to transform DITA content to other formats, including the <code>dita</code> command, Ant, and the Java API, along with information on publishing DITA content from a containerized environment.</li> <li>Authoring formats provides information on supported input formats, including standard DITA XML, Markdown and the Lightweight DITA formats (XDITA, MDITA and HDITA).</li> <li>Output formats describes the core transformations that convert DITA to other formats.</li> <li>DITA Open Toolkit parameters explains how to adjust the behavior of DITA Open Toolkit via <code>dita</code> command arguments and options, DITA-OT parameter settings, and configuration properties.</li> <li>Customizing HTML output shows how to modify the look and feel of your HTML output by changing parameter settings to include custom CSS, headers and footers, or table-of-contents navigation in topics.</li> <li>Customizing PDF output explains how to adjust various aspects of PDF output by changing parameter settings or using a theme file.</li> <li>Adding and removing plug-ins explains how to install, remove and discover new plug-ins.</li> <li>Creating custom plug-ins provides information on extending DITA-OT with plug-ins of your own.</li> <li>Error messages and troubleshooting contains information about resolving problems that you might encounter.</li> <li>Reference topics provide additional information about the DITA Open Toolkit Architecture, DITA specification support, a Glossary and other DITA and DITA-OT resources.</li> </ul> <p>Related information </p> <p>Overview of the DITA Open Toolkit</p>"},{"location":"SUMMARY/","title":"Summary","text":"<ul> <li>DITA Open Toolkit 4.1</li> <li>Release Notes<ul> <li>Release history</li> </ul> </li> <li>Installing DITA-OT<ul> <li>Prerequisite software</li> <li>Checking the version</li> <li>Building output</li> <li>Installing via Homebrew</li> </ul> </li> <li>Building output<ul> <li>Using the dita command<ul> <li>Using a properties file</li> <li>Migrating Ant builds</li> <li>Using a project file<ul> <li>XML project files</li> <li>JSON project files</li> <li>YAML project files</li> </ul> </li> </ul> </li> <li>Using Docker images<ul> <li>Custom images</li> </ul> </li> <li>Using GitHub Actions</li> <li>Using Ant<ul> <li>Ant</li> <li>Building output using Ant</li> <li>Creating an Ant build script</li> </ul> </li> <li>Using the Java API</li> </ul> </li> <li>Authoring formats<ul> <li>Standard DITA XML</li> <li>Markdown input</li> <li>Lightweight DITA</li> </ul> </li> <li>Output formats<ul> <li>PDF</li> <li>HTML5</li> <li>Eclipse help</li> <li>HTML Help</li> <li>Markdown</li> <li>Normalized DITA</li> <li>XHTML</li> </ul> </li> <li>Parameters<ul> <li>DITA command arguments</li> <li>DITA-OT parameters<ul> <li>Common</li> <li>PDF</li> <li>HTML-based output</li> <li>HTML5</li> <li>XHTML</li> <li>HTML Help</li> <li>Eclipse Help</li> <li>Other</li> </ul> </li> <li>Configuration properties<ul> <li>local.properties</li> <li>plugin.properties</li> <li>configuration.properties</li> <li>Internal Ant properties</li> </ul> </li> </ul> </li> <li>Customizing HTML<ul> <li>Setting HTML parameters<ul> <li>Adding navigation</li> <li>Adding custom CSS</li> <li>Headers and footers</li> <li>Handling content outside the map directory</li> </ul> </li> <li>Using a properties file</li> </ul> </li> <li>Customizing PDF<ul> <li>Customization approaches</li> <li>Generating revision bars</li> <li>PDF themes<ul> <li>Sample theme file</li> <li>Page settings</li> <li>Header and footer</li> <li>Styles</li> <li>Variables</li> <li>Extending themes</li> <li>Syntactic sugar</li> </ul> </li> </ul> </li> <li>Adding plug-ins<ul> <li>Installing plug-ins</li> <li>Removing plug-ins</li> <li>Plug-in registry</li> <li>Rebuilding documentation</li> </ul> </li> <li>Creating plug-ins<ul> <li>Plug-in benefits</li> <li>Plug-in descriptor file</li> <li>Coding conventions</li> <li>Plug-in dependencies<ul> <li>Referencing files from other plug-ins</li> </ul> </li> <li>Plug-in use cases<ul> <li>Setting parameters</li> <li>Adding a new Ant target</li> <li>Adding a pre-processing step</li> <li>Adding a new output format</li> <li>Processing topics with XSLT</li> <li>Adding new parameters</li> <li>Overriding XSLT steps</li> <li>Adding a Java library</li> <li>Adding new messages</li> <li>New extension points</li> <li>Extending an XML catalog file</li> <li>Rewriting file names</li> <li>Saxon customizations<ul> <li>Saxon extensions</li> <li>Custom collation URI resolvers</li> </ul> </li> </ul> </li> <li>Custom HTML plug-ins<ul> <li>Bundling custom CSS</li> <li>Embedding web fonts</li> <li>Inserting JavaScript</li> </ul> </li> <li>Custom PDF plug-ins<ul> <li>Types of PDF plug-ins</li> <li>PDF plug-in structure<ul> <li>Custom artwork</li> <li>Index configuration</li> <li>Variable overrides</li> <li>Custom attributes</li> <li>Internationalization</li> <li>Custom stylesheets</li> </ul> </li> <li>Simple PDF plug-in</li> <li>PDF plug-in resources</li> </ul> </li> <li>Globalizing DITA content<ul> <li>Globalization support</li> <li>Supported languages</li> <li>Customizing generated text<ul> <li>Adding new strings</li> <li>Overriding strings</li> <li>Adding new languages</li> </ul> </li> </ul> </li> <li>Migrating customizations<ul> <li>To 4.1</li> <li>To 4.0</li> <li>To 3.7</li> <li>To 3.6</li> <li>To 3.5</li> <li>To 3.4</li> <li>To 3.3</li> <li>To 3.2</li> <li>To 3.1</li> <li>To 3.0</li> <li>To 2.5</li> <li>To 2.4</li> <li>To 2.3</li> <li>To 2.2</li> <li>To 2.1</li> <li>To 2.0</li> <li>To 1.8</li> <li>To 1.7<ul> <li>Flagging updates</li> </ul> </li> <li>To 1.6</li> <li>To 1.5.4</li> </ul> </li> </ul> </li> <li>Troubleshooting<ul> <li>Logging</li> <li>Enabling debug mode</li> <li>DITA-OT error messages</li> <li>Other error messages</li> <li>Command line help</li> <li>Increasing Java memory</li> <li>Speeding up builds</li> </ul> </li> <li>Reference<ul> <li>DITA-OT architecture<ul> <li>Processing structure</li> <li>Map-first preprocessing</li> <li>Processing modules</li> <li>Processing order</li> <li>Store API</li> <li>Pre-processing modules<ul> <li>Generate lists (gen-list)</li> <li>Debug and filter (debug-filter)</li> <li>Resolve map references (mapref)</li> <li>Branch filtering (branch-filter)</li> <li>Resolve key references (keyref)</li> <li>Copy topics (copy-to)</li> <li>Conref push (conrefpush)</li> <li>Resolve content references (conref)</li> <li>Filter conditional content (profile)</li> <li>Resolve topic fragments and code references (topic-fragment)</li> <li>Chunk topics (chunk)</li> <li>Move metadata (move-meta-entries) and pull content into maps (mappull)</li> <li>Map-based linking (maplink)</li> <li>Pull content into topics (topicpull)</li> <li>Flagging (flag-module)</li> <li>Map cleanup (clean-map)</li> <li>Copy related files (copy-files)</li> </ul> </li> <li>HTML-based processing modules<ul> <li>Common HTML-based processing</li> <li>XHTML processing</li> <li>HTML5 processing</li> <li>Eclipse help processing</li> <li>HTML Help processing</li> </ul> </li> <li>PDF processing modules<ul> <li>History of the PDF transformation</li> </ul> </li> </ul> </li> <li>DITA specification support<ul> <li>DITA 1.2 support</li> <li>DITA 1.3 support</li> <li>DITA 2.0 preview</li> <li>Implementation-dependent features</li> <li>Codeblock extensions</li> <li>DITA features in docs</li> </ul> </li> <li>Extension points<ul> <li>All extension points</li> <li>General extension points</li> <li>Pre-processing extension points</li> <li>XSLT-import extension points</li> <li>XSLT-parameter extension points</li> <li>Version and support information</li> <li>Plug-in extension points<ul> <li>Common processing</li> <li>PDF</li> <li>HTML-based output</li> <li>HTML5</li> <li>HTML Help</li> <li>Eclipse Help</li> <li>Markdown</li> </ul> </li> </ul> </li> <li>Markdown formats<ul> <li>Markdown DITA syntax<ul> <li>Common syntax</li> </ul> </li> <li>MDITA syntax<ul> <li>Common syntax</li> </ul> </li> <li>Format comparison</li> <li>Markdown schemas</li> <li>Custom schemas</li> </ul> </li> <li>License<ul> <li>Third-party software</li> </ul> </li> <li>Glossary<ul> <li>argument</li> <li>DITA Open Toolkit</li> <li>extension point</li> <li>option</li> <li>output format</li> <li>parameter</li> <li>plug-in</li> <li>processor</li> <li>property</li> <li>template</li> <li>transformation type</li> <li>variable</li> <li>XSL template</li> </ul> </li> </ul> </li> <li>Resources<ul> <li>DITA-OT Day Videos<ul> <li>2022 Rotterdam</li> <li>2019 Brussels</li> <li>2018 Rotterdam</li> <li>2017 Berlin</li> <li>2016 Munich</li> <li>2015 Munich</li> <li>2014 Munich</li> </ul> </li> <li>Books</li> </ul> </li> </ul>"},{"location":"extension-points/all-extension-points/","title":"All DITA-OT extension points","text":"<p>The pre-defined extension points can be used to add new functionality to DITA-OT. If your toolkit installation includes custom plug-ins that define additional extension points, you can add to this list by rebuilding the DITA-OT documentation.</p> <ul> <li> <p>dita.conductor.target</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds an Ant import to the main Ant build file.</p> <p>Attention: This extension point is deprecated; use <code>ant.import</code> instead.</p> </li> <li> <p>dita.conductor.target.relative</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds an Ant import to the main Ant build file.</p> <p>Tip: As of DITA-OT 3.0, the <code>ant.import</code> extension point can be used instead.</p> </li> <li> <p>dita.conductor.plugin</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Ant conductor plug-in information</p> </li> <li> <p>ant.import</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds an Ant import to the main Ant build file.</p> </li> <li> <p>depend.preprocess.chunk.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>chunk</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.clean-temp.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>clean-temp</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.coderef.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>coderef</code> step in the pre-processing stage.</p> </li> <li> <p>org.dita.pdf2.catalog.relative</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Adds the content of a catalog file to the main catalog file for the PDF plug-in.</p> </li> <li> <p>dita.xsl.conref</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Content reference XSLT import</p> </li> <li> <p>dita.preprocess.conref.param</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Content reference XSLT parameters</p> </li> <li> <p>depend.preprocess.conref.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>conref</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.conrefpush.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>conrefpush</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-html.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>copy-html</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-files.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>copy-files</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-flag.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>copy-flag</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-image.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>copy-image</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-subsidiary.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>copy-subsidiary</code> step in the pre-processing stage.</p> </li> <li> <p>dita.parser</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Custom DITA parser</p> </li> <li> <p>depend.preprocess.debug-filter.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>debug-filter</code> step in the pre-processing stage.</p> </li> <li> <p>dita.preprocess.debug-filter.param</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Debug filter module parameters</p> </li> <li> <p>dita.preprocess.map-reader.param</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Debug filter module parameters</p> </li> <li> <p>dita.preprocess.topic-reader.param</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Debug filter module parameters</p> </li> <li> <p>dita.xsl.messages</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds new diagnostic messages to DITA-OT.</p> </li> <li> <p>dita.conductor.eclipse.toc.param</p> <p>Defined in plug-in <code>org.dita.eclipsehelp</code>.</p> <p>Pass parameters to the XSLT step that generates the Eclipse Help table of contents (TOC).</p> </li> <li> <p>dita.xsl.eclipse.toc</p> <p>Defined in plug-in <code>org.dita.eclipsehelp</code>.</p> <p>Overrides the default XSLT step that generates the Eclipse Help table of contents (TOC).</p> </li> <li> <p>dita.map.eclipse.index.pre</p> <p>Defined in plug-in <code>org.dita.eclipsehelp</code>.</p> <p>Runs an Ant target before the Eclipse index extraction process.</p> </li> <li> <p>dita.xsl.eclipse.plugin</p> <p>Defined in plug-in <code>org.dita.eclipsehelp</code>.</p> <p>Overrides the default XSLT step that generates the <code>plugin.xml</code> file for Eclipse Help.</p> </li> <li> <p>dita.basedir-resource-directory</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Flag to use basedir as resource directory</p> </li> <li> <p>dita.conductor.pdf2.formatter.check</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Formatter check</p> </li> <li> <p>depend.org.dita.pdf2.format.post</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Formatting post-target</p> </li> <li> <p>depend.org.dita.pdf2.format.pre</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Formatting pre-target</p> </li> <li> <p>depend.org.dita.pdf2.format</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Formatting target</p> </li> <li> <p>depend.preprocess.gen-list.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>gen-list</code> step in the pre-processing stage.</p> </li> <li> <p>dita.xsl.strings</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Generated text</p> </li> <li> <p>dita.xsl.htmlhelp.map2hhc</p> <p>Defined in plug-in <code>org.dita.htmlhelp</code>.</p> <p>Overrides the default XSLT step that generates the HTML Help contents (<code>.hhc</code>) file.</p> </li> <li> <p>dita.xsl.htmlhelp.map2hhp</p> <p>Defined in plug-in <code>org.dita.htmlhelp</code>.</p> <p>Overrides the default XSLT step that generates the HTML Help project (<code>.hhp</code>) file.</p> </li> <li> <p>dita.conductor.html.param</p> <p>Defined in plug-in <code>org.dita.xhtml</code>.</p> <p>Pass parameters to the HTML and HTML Help transformations.</p> </li> <li> <p>dita.html.extensions</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>HTML file extension</p> </li> <li> <p>dita.xsl.html.cover</p> <p>Defined in plug-in <code>org.dita.xhtml</code>.</p> <p>Overrides the default HTML cover page generation process.</p> </li> <li> <p>dita.xsl.htmltoc</p> <p>Defined in plug-in <code>org.dita.xhtml</code>.</p> <p>Overrides the default XSLT step that generates the HTML table of contents (TOC).</p> </li> <li> <p>dita.xsl.xhtml</p> <p>Defined in plug-in <code>org.dita.xhtml</code>.</p> <p>Overrides the default HTML or XHTML transformation, including HTML Help and Eclipse Help. The referenced file is integrated directly into the XSLT step that generates XHTML.</p> </li> <li> <p>dita.conductor.xhtml.toc.param</p> <p>Defined in plug-in <code>org.dita.xhtml</code>.</p> <p>Pass parameters to the XSLT step that generates the XHTML table of contents (TOC).</p> </li> <li> <p>dita.conductor.html5.toc.param</p> <p>Defined in plug-in <code>org.dita.html5</code>.</p> <p>Pass parameters to the XSLT step that generates the HTML5 table of contents (TOC).</p> </li> <li> <p>dita.xsl.html5.cover</p> <p>Defined in plug-in <code>org.dita.html5</code>.</p> <p>Overrides the default HTML5 cover page generation process.</p> </li> <li> <p>dita.xsl.html5.toc</p> <p>Defined in plug-in <code>org.dita.html5</code>.</p> <p>Overrides the default XSLT step that generates the HTML5 table of contents (TOC).</p> </li> <li> <p>dita.xsl.html5</p> <p>Defined in plug-in <code>org.dita.html5</code>.</p> <p>Overrides the default HTML5 transformation. The referenced file is integrated directly into the XSLT step that generates HTML5.</p> </li> <li> <p>dita.conductor.html5.param</p> <p>Defined in plug-in <code>org.dita.html5</code>.</p> <p>Pass parameters to the HTML5 transformation.</p> </li> <li> <p>dita.image.extensions</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Image file extension</p> </li> <li> <p>depend.org.dita.pdf2.index</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Indexing target</p> </li> <li> <p>depend.org.dita.pdf2.init.pre</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Initialization pre-target</p> </li> <li> <p>dita.conductor.lib.import</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds a Java library to the DITA-OT classpath.</p> </li> <li> <p>depend.preprocess.keyref.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>keyref</code> step in the pre-processing stage.</p> </li> <li> <p>dita.xsl.maplink</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Map link XSLT import</p> </li> <li> <p>depend.preprocess.maplink.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>maplink</code> step in the pre-processing stage.</p> </li> <li> <p>dita.preprocess.mappull.param</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Map pull XSLT parameters</p> </li> <li> <p>dita.xsl.mappull</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Map pull XSLT import</p> </li> <li> <p>depend.preprocess.mappull.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>mappull</code> step in the pre-processing stage.</p> </li> <li> <p>dita.xsl.mapref</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Map reference XSLT import</p> </li> <li> <p>dita.preprocess.mapref.param</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Map reference XSLT parameters</p> </li> <li> <p>depend.preprocess.mapref.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>mapref</code> step in the pre-processing stage.</p> </li> <li> <p>dita.xsl.markdown</p> <p>Defined in plug-in <code>org.lwdita</code>.</p> <p>Markdown overrides XSLT import</p> </li> <li> <p>depend.preprocess.move-meta-entries.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>move-meta-entries</code> step in the pre-processing stage.</p> </li> <li> <p>dita.xsl.xslfo.i18n-postprocess</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>PDF I18N postprocess import</p> </li> <li> <p>dita.xsl.xslfo</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Overrides the default PDF transformation. The referenced XSL file is integrated directly into the XSLT step that generates the XSL-FO.</p> </li> <li> <p>dita.conductor.pdf2.param</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>Pass parameters to the PDF transformation.</p> </li> <li> <p>org.dita.pdf2.xsl.topicmerge</p> <p>Defined in plug-in <code>org.dita.pdf2</code>.</p> <p>PDF2 topic merge XSLT import</p> </li> <li> <p>dita.catalog.plugin-info</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Plug-in XML catalog information</p> </li> <li> <p>package.support.email</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Specifies the e-mail address of the person who provides support for the DITA-OT plug-in.</p> </li> <li> <p>package.support.name</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Specifies the person who provides support for the DITA-OT plug-in.</p> </li> <li> <p>package.version</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Specifies the version of the DITA-OT plug-in.</p> </li> <li> <p>depend.preprocess.post</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target after the pre-processing stage.</p> </li> <li> <p>depend.preprocess.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the pre-processing stage.</p> </li> <li> <p>dita.transtype.print</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Defines a transformation as a print type.</p> </li> <li> <p>dita.resource.extensions</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Resource file extension</p> </li> <li> <p>dita.xsl.topicpull</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Topic pull XSLT import</p> </li> <li> <p>dita.preprocess.topicpull.param</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Topic pull XSLT parameters</p> </li> <li> <p>depend.preprocess.topicpull.pre</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Runs an Ant target before the <code>topicpull</code> step in the pre-processing stage.</p> </li> <li> <p>dita.conductor.transtype.check</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds a new value to the list of valid transformation types.</p> <p>Tip: This extension point is still supported for backwards compatibility, but since DITA-OT 2.1, any new customizations should instead use the <code>&lt;transtype&gt;</code> element in the Plug-in descriptor file to define a new transformation.</p> </li> <li> <p>dita.conductor.xhtml.param</p> <p>Defined in plug-in <code>org.dita.xhtml</code>.</p> <p>Pass parameters to the XHTML and Eclipse Help transformations.</p> </li> <li> <p>dita.specialization.catalog</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds the content of a catalog file to the main DITA-OT catalog file.</p> <p>Attention: This extension point is deprecated; use <code>dita.specialization.catalog.relative</code> instead.</p> </li> <li> <p>dita.specialization.catalog.relative</p> <p>Defined in plug-in <code>org.dita.base</code>.</p> <p>Adds the content of a catalog file to the main DITA-OT catalog file.</p> </li> </ul>"},{"location":"extension-points/extension-points-by-plugin/","title":"Extension points by plug-in","text":"<p>The default plug-ins that ship with DITA Open Toolkit include a series of extension points that can be used to modify various aspects of toolkit processing.</p> <p>If your toolkit installation includes custom plug-ins that define additional extension points, you can add topics by rebuilding the DITA-OT documentation.</p> <p>Related information </p> <p>Rebuilding the DITA-OT documentation</p>"},{"location":"extension-points/extension-points-in-org.dita.base/","title":"Extension points in <code>org.dita.base</code>","text":"<p>The <code>org.dita.base</code> plug-in provides common extension points that are available to extend processing in all transformations that DITA Open Toolkit supports. </p> <ul> <li> <p>ant.import</p> <p>Adds an Ant import to the main Ant build file.</p> </li> <li> <p>depend.preprocess.chunk.pre</p> <p>Runs an Ant target before the <code>chunk</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.clean-temp.pre</p> <p>Runs an Ant target before the <code>clean-temp</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.coderef.pre</p> <p>Runs an Ant target before the <code>coderef</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.conref.pre</p> <p>Runs an Ant target before the <code>conref</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.conrefpush.pre</p> <p>Runs an Ant target before the <code>conrefpush</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-files.pre</p> <p>Runs an Ant target before the <code>copy-files</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-flag.pre</p> <p>Runs an Ant target before the <code>copy-flag</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-html.pre</p> <p>Runs an Ant target before the <code>copy-html</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-image.pre</p> <p>Runs an Ant target before the <code>copy-image</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-subsidiary.pre</p> <p>Runs an Ant target before the <code>copy-subsidiary</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.debug-filter.pre</p> <p>Runs an Ant target before the <code>debug-filter</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.gen-list.pre</p> <p>Runs an Ant target before the <code>gen-list</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.keyref.pre</p> <p>Runs an Ant target before the <code>keyref</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.maplink.pre</p> <p>Runs an Ant target before the <code>maplink</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.mappull.pre</p> <p>Runs an Ant target before the <code>mappull</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.mapref.pre</p> <p>Runs an Ant target before the <code>mapref</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.move-meta-entries.pre</p> <p>Runs an Ant target before the <code>move-meta-entries</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.post</p> <p>Runs an Ant target after the pre-processing stage.</p> </li> <li> <p>depend.preprocess.pre</p> <p>Runs an Ant target before the pre-processing stage.</p> </li> <li> <p>depend.preprocess.topicpull.pre</p> <p>Runs an Ant target before the <code>topicpull</code> step in the pre-processing stage.</p> </li> <li> <p>dita.basedir-resource-directory</p> <p>Flag to use basedir as resource directory</p> </li> <li> <p>dita.catalog.plugin-info</p> <p>Plug-in XML catalog information</p> </li> <li> <p>dita.conductor.lib.import</p> <p>Adds a Java library to the DITA-OT classpath.</p> </li> <li> <p>dita.conductor.plugin</p> <p>Ant conductor plug-in information</p> </li> <li> <p>dita.conductor.target</p> <p>Adds an Ant import to the main Ant build file.</p> <p>Attention: This extension point is deprecated; use <code>ant.import</code> instead.</p> </li> <li> <p>dita.conductor.target.relative</p> <p>Adds an Ant import to the main Ant build file.</p> <p>Tip: As of DITA-OT 3.0, the <code>ant.import</code> extension point can be used instead.</p> </li> <li> <p>dita.conductor.transtype.check</p> <p>Adds a new value to the list of valid transformation types.</p> <p>Tip: This extension point is still supported for backwards compatibility, but since DITA-OT 2.1, any new customizations should instead use the <code>&lt;transtype&gt;</code> element in the Plug-in descriptor file to define a new transformation.</p> </li> <li> <p>dita.html.extensions</p> <p>HTML file extension</p> </li> <li> <p>dita.image.extensions</p> <p>Image file extension</p> </li> <li> <p>dita.parser</p> <p>Custom DITA parser</p> </li> <li> <p>dita.preprocess.conref.param</p> <p>Content reference XSLT parameters</p> </li> <li> <p>dita.preprocess.debug-filter.param</p> <p>Debug filter module parameters</p> </li> <li> <p>dita.preprocess.map-reader.param</p> <p>Debug filter module parameters</p> </li> <li> <p>dita.preprocess.mappull.param</p> <p>Map pull XSLT parameters</p> </li> <li> <p>dita.preprocess.mapref.param</p> <p>Map reference XSLT parameters</p> </li> <li> <p>dita.preprocess.topic-reader.param</p> <p>Debug filter module parameters</p> </li> <li> <p>dita.preprocess.topicpull.param</p> <p>Topic pull XSLT parameters</p> </li> <li> <p>dita.resource.extensions</p> <p>Resource file extension</p> </li> <li> <p>dita.specialization.catalog</p> <p>Adds the content of a catalog file to the main DITA-OT catalog file.</p> <p>Attention: This extension point is deprecated; use <code>dita.specialization.catalog.relative</code> instead.</p> </li> <li> <p>dita.specialization.catalog.relative</p> <p>Adds the content of a catalog file to the main DITA-OT catalog file.</p> </li> <li> <p>dita.transtype.print</p> <p>Defines a transformation as a print type.</p> </li> <li> <p>dita.xsl.conref</p> <p>Content reference XSLT import</p> </li> <li> <p>dita.xsl.maplink</p> <p>Map link XSLT import</p> </li> <li> <p>dita.xsl.mappull</p> <p>Map pull XSLT import</p> </li> <li> <p>dita.xsl.mapref</p> <p>Map reference XSLT import</p> </li> <li> <p>dita.xsl.messages</p> <p>Adds new diagnostic messages to DITA-OT.</p> </li> <li> <p>dita.xsl.strings</p> <p>Generated text</p> </li> <li> <p>dita.xsl.topicpull</p> <p>Topic pull XSLT import</p> </li> <li> <p>package.support.email</p> <p>Specifies the e-mail address of the person who provides support for the DITA-OT plug-in.</p> </li> <li> <p>package.support.name</p> <p>Specifies the person who provides support for the DITA-OT plug-in.</p> </li> <li> <p>package.version</p> <p>Specifies the version of the DITA-OT plug-in.</p> </li> </ul> <p>Related information </p> <p>Pre-processing extension points</p> <p>Version and support information</p> <p>General extension points</p>"},{"location":"extension-points/extension-points-in-org.dita.eclipsehelp/","title":"Extension points in <code>org.dita.eclipsehelp</code>","text":"<p>Certain extension points are specific to the Eclipse Help transformation. </p> <ul> <li> <p>dita.conductor.eclipse.toc.param</p> <p>Pass parameters to the XSLT step that generates the Eclipse Help table of contents (TOC).</p> </li> <li> <p>dita.map.eclipse.index.pre</p> <p>Runs an Ant target before the Eclipse index extraction process.</p> </li> <li> <p>dita.xsl.eclipse.plugin</p> <p>Overrides the default XSLT step that generates the <code>plugin.xml</code> file for Eclipse Help.</p> </li> <li> <p>dita.xsl.eclipse.toc</p> <p>Overrides the default XSLT step that generates the Eclipse Help table of contents (TOC).</p> </li> </ul>"},{"location":"extension-points/extension-points-in-org.dita.html5/","title":"Extension points in <code>org.dita.html5</code>","text":"<p>In addition to the extension points provided by common processing and those shared by with other HTML-based transformations, the <code>org.dita.html5</code> plug-in provides extension points that are specific to the HTML5 transformation. </p> <ul> <li> <p>dita.conductor.html5.param</p> <p>Pass parameters to the HTML5 transformation.</p> </li> <li> <p>dita.conductor.html5.toc.param</p> <p>Pass parameters to the XSLT step that generates the HTML5 table of contents (TOC).</p> </li> <li> <p>dita.xsl.html5</p> <p>Overrides the default HTML5 transformation. The referenced file is integrated directly into the XSLT step that generates HTML5.</p> </li> <li> <p>dita.xsl.html5.cover</p> <p>Overrides the default HTML5 cover page generation process.</p> </li> <li> <p>dita.xsl.html5.toc</p> <p>Overrides the default XSLT step that generates the HTML5 table of contents (TOC).</p> </li> </ul>"},{"location":"extension-points/extension-points-in-org.dita.htmlhelp/","title":"Extension points in <code>org.dita.htmlhelp</code>","text":"<p>Certain extension points are specific to the HTML Help transformation. </p> <ul> <li> <p>dita.xsl.htmlhelp.map2hhc</p> <p>Overrides the default XSLT step that generates the HTML Help contents (<code>.hhc</code>) file.</p> </li> <li> <p>dita.xsl.htmlhelp.map2hhp</p> <p>Overrides the default XSLT step that generates the HTML Help project (<code>.hhp</code>) file.</p> </li> </ul>"},{"location":"extension-points/extension-points-in-org.dita.pdf2/","title":"Extension points in <code>org.dita.pdf2</code>","text":"<p>Certain extension points are specific to the PDF transformation (formerly known as \u201cPDF2\u201d). </p> <ul> <li> <p>depend.org.dita.pdf2.format</p> <p>Formatting target</p> </li> <li> <p>depend.org.dita.pdf2.format.post</p> <p>Formatting post-target</p> </li> <li> <p>depend.org.dita.pdf2.format.pre</p> <p>Formatting pre-target</p> </li> <li> <p>depend.org.dita.pdf2.index</p> <p>Indexing target</p> </li> <li> <p>depend.org.dita.pdf2.init.pre</p> <p>Initialization pre-target</p> </li> <li> <p>dita.conductor.pdf2.formatter.check</p> <p>Formatter check</p> </li> <li> <p>dita.conductor.pdf2.param</p> <p>Pass parameters to the PDF transformation.</p> </li> <li> <p>dita.xsl.xslfo</p> <p>Overrides the default PDF transformation. The referenced XSL file is integrated directly into the XSLT step that generates the XSL-FO.</p> </li> <li> <p>dita.xsl.xslfo.i18n-postprocess</p> <p>PDF I18N postprocess import</p> </li> <li> <p>org.dita.pdf2.catalog.relative</p> <p>Adds the content of a catalog file to the main catalog file for the PDF plug-in.</p> </li> <li> <p>org.dita.pdf2.xsl.topicmerge</p> <p>PDF2 topic merge XSLT import</p> </li> </ul>"},{"location":"extension-points/extension-points-in-org.dita.xhtml/","title":"Extension points in <code>org.dita.xhtml</code>","text":"<p>The <code>org.dita.xhtml</code> plug-in provides shared extension points that can be used to modify processing in HTML-based transformation types such as Eclipse help, HTML Help, and XHTML. </p> <ul> <li> <p>dita.conductor.html.param</p> <p>Pass parameters to the HTML and HTML Help transformations.</p> </li> <li> <p>dita.conductor.xhtml.param</p> <p>Pass parameters to the XHTML and Eclipse Help transformations.</p> </li> <li> <p>dita.conductor.xhtml.toc.param</p> <p>Pass parameters to the XSLT step that generates the XHTML table of contents (TOC).</p> </li> <li> <p>dita.xsl.html.cover</p> <p>Overrides the default HTML cover page generation process.</p> </li> <li> <p>dita.xsl.htmltoc</p> <p>Overrides the default XSLT step that generates the HTML table of contents (TOC).</p> </li> <li> <p>dita.xsl.xhtml</p> <p>Overrides the default HTML or XHTML transformation, including HTML Help and Eclipse Help. The referenced file is integrated directly into the XSLT step that generates XHTML.</p> </li> </ul>"},{"location":"extension-points/extension-points-in-org.lwdita/","title":"Extension points in <code>org.lwdita</code>","text":"<p>The <code>org.lwdita</code> plug-in provides extension points to modify Markdown processing.</p> <ul> <li> <p>dita.xsl.markdown</p> <p>Markdown overrides XSLT import</p> </li> </ul>"},{"location":"extension-points/plugin-extension-points-general/","title":"General extension points","text":"<p>These extension points enable you to extend DITA-OT. You can add Ant targets or imports; add a Java library to the classpath parameter; add a new transformation type; extend a catalog file; add new diagnostic messages, and more.</p> <ul> <li> <p>ant.import</p> <p>Adds an Ant import to the main Ant build file.</p> </li> <li> <p>dita.conductor.lib.import</p> <p>Adds a Java library to the DITA-OT classpath.</p> </li> <li> <p>dita.conductor.target</p> <p>Adds an Ant import to the main Ant build file.</p> <p>Attention: This extension point is deprecated; use <code>ant.import</code> instead.</p> </li> <li> <p>dita.conductor.target.relative</p> <p>Adds an Ant import to the main Ant build file.</p> <p>Tip: As of DITA-OT 3.0, the <code>ant.import</code> extension point can be used instead.</p> </li> <li> <p>dita.conductor.transtype.check</p> <p>Adds a new value to the list of valid transformation types.</p> <p>Tip: This extension point is still supported for backwards compatibility, but since DITA-OT 2.1, any new customizations should instead use the <code>&lt;transtype&gt;</code> element in the Plug-in descriptor file to define a new transformation.</p> </li> <li> <p>dita.specialization.catalog</p> <p>Adds the content of a catalog file to the main DITA-OT catalog file.</p> <p>Attention: This extension point is deprecated; use <code>dita.specialization.catalog.relative</code> instead.</p> </li> <li> <p>dita.specialization.catalog.relative</p> <p>Adds the content of a catalog file to the main DITA-OT catalog file.</p> </li> <li> <p>dita.transtype.print</p> <p>Defines a transformation as a print type.</p> </li> <li> <p>dita.xsl.messages</p> <p>Adds new diagnostic messages to DITA-OT.</p> </li> <li> <p>org.dita.pdf2.catalog.relative</p> <p>Adds the content of a catalog file to the main catalog file for the PDF plug-in.</p> </li> </ul> <p>Related information </p> <p>Extension points in org.dita.base</p>"},{"location":"extension-points/plugin-extension-points-pre-processing/","title":"Pre-processing extension points","text":"<p>You can use these extension points to run an Ant target before or after the pre-processing stage. If necessary, you can also run an Ant target before a specific pre-processing step \u2014 but this approach is not recommended.</p> <p>Tip: For maximum compatibility with future versions of DITA-OT, most plug-ins should use the extension points that run before or after pre-processing.</p> <ul> <li> <p>depend.preprocess.pre</p> <p>Runs an Ant target before the pre-processing stage.</p> </li> <li> <p>depend.preprocess.post</p> <p>Runs an Ant target after the pre-processing stage.</p> </li> </ul>"},{"location":"extension-points/plugin-extension-points-pre-processing/#legacy-pre-processing-extensions","title":"Legacy pre-processing extensions","text":"<p>The following extension points are available in the original <code>preprocess</code> pipeline that was used by default for all transformations prior to DITA-OT 3.0. These extensions are not available in the newer map-first preprocessing pipeline (<code>preprocess2</code>), which is used in the PDF and HTML Help transformations as of DITA-OT 3.0.</p> <p>CAUTION:</p> <p>The internal order of preprocessing steps is subject to change between versions of DITA-OT. New versions may remove, reorder, combine, or add steps to the process, so the extension points within the preprocessing stage should only be used if absolutely necessary.</p> <ul> <li> <p>depend.preprocess.chunk.pre</p> <p>Runs an Ant target before the <code>chunk</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.coderef.pre</p> <p>Runs an Ant target before the <code>coderef</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.conref.pre</p> <p>Runs an Ant target before the <code>conref</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.conrefpush.pre</p> <p>Runs an Ant target before the <code>conrefpush</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.clean-temp.pre</p> <p>Runs an Ant target before the <code>clean-temp</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-files.pre</p> <p>Runs an Ant target before the <code>copy-files</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-flag.pre</p> <p>Runs an Ant target before the <code>copy-flag</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-html.pre</p> <p>Runs an Ant target before the <code>copy-html</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-image.pre</p> <p>Runs an Ant target before the <code>copy-image</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.copy-subsidiary.pre</p> <p>Runs an Ant target before the <code>copy-subsidiary</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.debug-filter.pre</p> <p>Runs an Ant target before the <code>debug-filter</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.gen-list.pre</p> <p>Runs an Ant target before the <code>gen-list</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.keyref.pre</p> <p>Runs an Ant target before the <code>keyref</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.maplink.pre</p> <p>Runs an Ant target before the <code>maplink</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.mappull.pre</p> <p>Runs an Ant target before the <code>mappull</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.mapref.pre</p> <p>Runs an Ant target before the <code>mapref</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.move-meta-entries.pre</p> <p>Runs an Ant target before the <code>move-meta-entries</code> step in the pre-processing stage.</p> </li> <li> <p>depend.preprocess.topicpull.pre</p> <p>Runs an Ant target before the <code>topicpull</code> step in the pre-processing stage.</p> </li> </ul> <p>Related information </p> <p>Extension points in org.dita.base</p>"},{"location":"extension-points/plugin-extension-points-support/","title":"Version and support information","text":"<p>You can use these extension points to define version and support information for a plug-in. Currently, DITA-OT does not do anything with this information, but it might do so in the future.</p> <ul> <li> <p>package.support.name</p> <p>Specifies the person who provides support for the DITA-OT plug-in.</p> </li> <li> <p>package.support.email</p> <p>Specifies the e-mail address of the person who provides support for the DITA-OT plug-in.</p> </li> <li> <p>package.version</p> <p>Specifies the version of the DITA-OT plug-in.</p> <p>The value uses the following syntax:</p> <p><code>*major*.*minor*.*micro*.*qualifier*</code></p> <p>where:</p> <ul> <li>major is a number and is required.</li> <li>minor is a number and is optional.</li> <li>micro is a number and is optional.</li> <li>qualifier is optional and can be composed of numerals, uppercase or lower case letters, underscores, and hyphens. By default, the package.version value is set to <code>0.0.0</code>.</li> </ul> </li> </ul>"},{"location":"extension-points/plugin-extension-points-support/#example","title":"Example","text":"<pre><code>&lt;plugin id=\"com.example.WithSupportInfo\"&gt;\n  &lt;feature extension=\"package.support.name\" value=\"Joe the Author\"/&gt;\n  &lt;feature extension=\"package.support.email\" value=\"joe@example.com\"/&gt;\n  &lt;feature extension=\"package.version\" value=\"1.2.3\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Related information </p> <p>Extension points in org.dita.base</p>"},{"location":"extension-points/plugin-extension-points-xslt-import/","title":"XSLT-import extension points","text":"<p>You can use these extension points to override XSLT processing steps in pre-processing and certain transformation types. The value of the <code>@file</code> attribute in the <code>&lt;feature&gt;</code> element specifies a relative path to an XSL file in the current plug-in. The plug-in installer adds a XSL import statement to the default DITA-OT code, so that the XSL override becomes part of the normal build.</p>"},{"location":"extension-points/plugin-extension-points-xslt-import/#pre-processing","title":"Pre-processing","text":"<p>You can use the following extension points to add XSLT processing to modules in the pre-processing pipeline:</p> <ul> <li> <p>dita.xsl.conref</p> <p>Overrides the pre-processing step that resolves conref.</p> </li> <li> <p>dita.xsl.maplink</p> <p>Overrides the <code>maplink</code> step in the pre-processing pipeline. This is the step that generates map-based links.</p> </li> <li> <p>dita.xsl.mappull</p> <p>Overrides the <code>mappull</code> step in the pre-processing pipeline. This is the step that updates navigation titles in maps and causes attributes to cascade.</p> </li> <li> <p>dita.xsl.mapref</p> <p>Overrides the <code>mapref</code> step in the pre-processing pipeline. This is the step that resolves references to other maps.</p> </li> <li> <p>dita.xsl.topicpull</p> <p>Overrides the <code>topicpull</code> step in the pre-processing pipeline. This is the step that pulls text into <code>&lt;xref&gt;</code> elements, as well as performing other tasks.</p> </li> </ul>"},{"location":"extension-points/plugin-extension-points-xslt-import/#transformations","title":"Transformations","text":"<p>You can use the following extension points to add XSLT processing to modules in DITA-OT transformations:</p> <ul> <li> <p>dita.map.eclipse.index.pre</p> <p>Runs an Ant target before the Eclipse index extraction process.</p> </li> <li> <p>dita.xsl.eclipse.plugin</p> <p>Overrides the default XSLT step that generates the <code>plugin.xml</code> file for Eclipse Help.</p> </li> <li> <p>dita.xsl.eclipse.toc</p> <p>Overrides the default XSLT step that generates the Eclipse Help table of contents (TOC).</p> </li> <li> <p>dita.xsl.html.cover</p> <p>Overrides the default HTML cover page generation process.</p> </li> <li> <p>dita.xsl.htmltoc</p> <p>Overrides the default XSLT step that generates the HTML table of contents (TOC).</p> </li> <li> <p>dita.xsl.html5</p> <p>Overrides the default HTML5 transformation. The referenced file is integrated directly into the XSLT step that generates HTML5.</p> </li> <li> <p>dita.xsl.html5.cover</p> <p>Overrides the default HTML5 cover page generation process.</p> </li> <li> <p>dita.xsl.html5.toc</p> <p>Overrides the default XSLT step that generates the HTML5 table of contents (TOC).</p> </li> <li> <p>dita.xsl.htmlhelp.map2hhc</p> <p>Overrides the default XSLT step that generates the HTML Help contents (<code>.hhc</code>) file.</p> </li> <li> <p>dita.xsl.htmlhelp.map2hhp</p> <p>Overrides the default XSLT step that generates the HTML Help project (<code>.hhp</code>) file.</p> </li> <li> <p>dita.xsl.xhtml</p> <p>Overrides the default HTML or XHTML transformation, including HTML Help and Eclipse Help. The referenced file is integrated directly into the XSLT step that generates XHTML.</p> </li> <li> <p>dita.xsl.xslfo</p> <p>Overrides the default PDF transformation. The referenced XSL file is integrated directly into the XSLT step that generates the XSL-FO.</p> </li> </ul>"},{"location":"extension-points/plugin-extension-points-xslt-import/#example","title":"Example","text":"<p>The following two files represent a complete (albeit simple) plug-in that adds a company banner to the XHTML output. The <code>plugin.xml</code> file declares an XSLT file that extends the XHTML processing; the <code>xsl/header.xsl</code> file overrides the default header processing to provide a company banner.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;plugin id=\"com.example.brandheader\"&gt;\n  &lt;feature extension=\"dita.xsl.xhtml\" file=\"xsl/header.xsl\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n  &lt;xsl:template name=\"gen-user-header\"&gt;\n    &lt;div&gt;\n      &lt;img src=\"http://www.example.com/company_banner.jpg\" \n           alt=\"Example Company Banner\"/&gt;\n    &lt;/div&gt;\n  &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre>"},{"location":"extension-points/plugin-extension-points-xslt-parameters/","title":"XSLT-parameter extension points","text":"<p>You can use these extension points to pass parameters into existing XSLT steps in both the pre-processing pipeline and DITA-OT transformation. The parameters generally will be available as global <code>&lt;xsl:param&gt;</code> values with XSLT overrides.</p>"},{"location":"extension-points/plugin-extension-points-xslt-parameters/#pre-processing","title":"Pre-processing","text":"<p>You can use the following extension points to pass parameters to modules in the pre-processing pipeline:</p> <ul> <li> <p>dita.preprocess.conref.param</p> <p>Pass parameters to the <code>conref</code> module in the pre-processing pipeline</p> </li> <li> <p>dita.preprocess.mappull.param</p> <p>Pass parameters to the <code>mappull</code> module in the pre-processing pipeline</p> </li> <li> <p>dita.preprocess.mapref.param</p> <p>Pass parameters to the <code>mapref</code> module in the pre-processing pipeline</p> </li> <li> <p>dita.preprocess.topicpull.param</p> <p>Pass parameters to the <code>topicpull</code> module in the pre-processing pipeline</p> </li> </ul>"},{"location":"extension-points/plugin-extension-points-xslt-parameters/#transformations","title":"Transformations","text":"<p>You can use the following extension points to pass parameters to modules in DITA-OT transformations:</p> <ul> <li> <p>dita.conductor.eclipse.toc.param</p> <p>Pass parameters to the XSLT step that generates the Eclipse Help table of contents (TOC).</p> </li> <li> <p>dita.conductor.html.param</p> <p>Pass parameters to the HTML and HTML Help transformations.</p> </li> <li> <p>dita.conductor.html5.param</p> <p>Pass parameters to the HTML5 transformation.</p> </li> <li> <p>dita.conductor.html5.toc.param</p> <p>Pass parameters to the XSLT step that generates the HTML5 table of contents (TOC).</p> </li> <li> <p>dita.conductor.pdf2.param</p> <p>Pass parameters to the PDF transformation.</p> </li> <li> <p>dita.conductor.xhtml.param</p> <p>Pass parameters to the XHTML and Eclipse Help transformations.</p> </li> <li> <p>dita.conductor.xhtml.toc.param</p> <p>Pass parameters to the XSLT step that generates the XHTML table of contents (TOC).</p> </li> </ul>"},{"location":"extension-points/plugin-extension-points-xslt-parameters/#example","title":"Example","text":"<p>The following two files represent a complete (albeit simple) plug-in that passes the parameters defined in the <code>insertParameters.xml</code> file to the XHTML transformation process.</p> <pre><code>&lt;plugin id=\"com.example.newparam\"&gt;\n  &lt;feature extension=\"dita.conductor.xhtml.param\"\n           file=\"insertParameters.xml\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code>&lt;dummy xmlns:if=\"ant:if\" xmlns:unless=\"ant:unless\"&gt;\n  *&amp;lt;!-- Any Ant code allowed in xslt task is possible. Example: --&amp;gt;*\n  &lt;param name=\"paramNameinXSLT\" expression=\"${antProperty}\"\n         if:set=\"antProperty\"/&gt;\n&lt;/dummy&gt;\n</code></pre>"},{"location":"extension-points/plugin-extension-points/","title":"Extension point reference","text":"<p>DITA Open Toolkit provides a series of extension points that can be used to integrate changes into the core code. Extension points are defined in the <code>plugin.xml</code> file for each plug-in. When plug-ins are installed, DITA-OT makes each extension visible to the rest of the toolkit.</p> <p>Depending on which extension points you use, your custom code will either run whenever output is generated, before or after certain processing stages, or only with certain transformation types.</p>"},{"location":"extension-points/plugin-extension-points/#extension-points-govern-when-code-runs","title":"Extension points govern when code runs","text":"<ul> <li>To run a custom Ant target after the pre-processing stage regardless of transformation type, use depend.preprocess.post</li> <li>To run an Ant target before the <code>copy-html</code> step when generating HTML output, use depend.preprocess.copy-html.pre</li> </ul>"},{"location":"extension-points/plugin-extension-points/#checking-the-transformation-type","title":"Checking the transformation type","text":"<p>If you want to isolate your custom code so it only runs when output is generated for a particular transformation type, you can define a condition that checks the transtype before running the custom code.</p> <pre><code>&lt;!-- Add a condition that checks the transtype --&gt;\n&lt;condition property=\"isYourTranstype\"&gt;\n  &lt;matches pattern=\"your.transtype\" string=\"${transtype}\"/&gt;\n&lt;/condition&gt;\n</code></pre> <p>You can then check this condition before running your custom code:</p> <pre><code>&lt;!-- Check the condition before running your target --&gt;\n&lt;target name=\"your-target\" if=\"${isYourTranstype}\"&gt;\n  \u22ee\n&lt;/target&gt;\n</code></pre> <p>Related information </p> <p>Extending the DITA Open Toolkit: How crazy can you get?</p>"},{"location":"parameters/","title":"DITA Open Toolkit parameters","text":"<p>You can adjust DITA Open Toolkit behavior via <code>dita</code> command arguments and options, DITA-OT parameter settings, and configuration properties.</p> <p>Related information </p> <p>Parameters annotations for DITA-OT plugins</p>"},{"location":"parameters/configuration-properties-file/","title":"The <code>configuration.properties</code> file","text":"<p>The <code>configuration.properties</code> file controls certain common properties, as well as some properties that control PDF processing.</p> <p>The contents of the <code>config/configuration.properties</code> file are added to the DITA-OT configuration in the <code>dost-configuration.jar</code> file when the plug-in integration process runs. The following properties are typically set in this file:</p> <ul> <li> <p>default.cascade</p> <p>Specifies the processing default value for the DITA 1.3 <code>@cascade</code> attribute, which determines how map-level metadata attributes are applied to the children of elements where the attributes are specified. DITA-OT uses the merge value by default for backwards compatibility with DITA 1.2 and earlier.</p> <p>Warning: This property can only be set in <code>configuration.properties</code> and should not be modified.</p> </li> <li> <p>temp-file-name-scheme</p> <p>This setting specifies the name of the Java class that defines how the source URL of a topic is mapped to the URL of the temporary file name. The current default method uses a 1:1 mapping, though future implementations may use alternative approaches such as hashes or full absolute paths as file names.</p> <p>Warning: This property can only be set in <code>configuration.properties</code> and should not be modified.</p> </li> <li> <p>filter-attributes</p> <p>Specifies additional attributes to be used for filtering, in addition to those defined in the DITA specification. The value is a comma-separated list of attribute QNames in Clark notation.</p> <p>For example, to permit filtering by <code>@importance</code> and <code>@status</code> attributes, set:</p> <p><code>language-properties filter-attributes = importance, status</code></p> </li> <li> <p>flag-attributes</p> <p>Specifies additional attributes to be used for flagging, in addition to those defined in the DITA specification. The value is a comma-separated list of attribute QNames in Clark notation.</p> <p>For example, to enable flagging based on a custom <code>@cms:review</code> attribute, set:</p> <p><code>language-properties flag-attributes = {http://www.cms.com/}review</code></p> <p>With this setting, a DITAVAL file could be used to flag content marked as <code>new</code> with a purple background:</p> <p><code>language-xml &lt;val xmlns:cms=\"http://www.cms.com/\"&gt;   &lt;prop action=\"flag\" att=\"cms:review\" val=\"new\" backcolor=\"purple\"/&gt; &lt;/val&gt;</code></p> </li> <li> <p>cli.color</p> <p>Specifies whether the <code>dita</code> command prints colored output on the command line console. When set to true, error messages in <code>dita</code> command output will appear in red on terminals that support ANSI escape codes, such as on Linux or macOS. Set to false to disable the color. (Colored output is not supported on Windows consoles such as <code>cmd.exe</code> or PowerShell).</p> </li> <li> <p>default.coderef-charset</p> <p>Specifies the default character set for code references.</p> </li> <li> <p>plugindirs</p> <p>A semicolon-separated list of directory paths that DITA-OT searches for plug-ins to install; any relative paths are resolved against the DITA-OT base directory. Any immediate subdirectory that contains a <code>plugin.xml</code> file is installed.</p> <p>Tip: You can use this property to test custom plug-ins that are stored in other locations. For example, to install all of the sample plug-ins that are included in the DITA-OT documentation, append <code>;docsrc/samples/plugins</code> to the property value and run <code>dita</code> --install. You can maintain custom plug-ins in version-controlled repositories outside of the DITA-OT installation directory, and add the repository locations to the list of plug-in directories here to test your code.</p> </li> <li> <p>plugin.ignores</p> <p>A semicolon-separated list of directory names to be ignored during plug-in installation; any relative paths are resolved against the DITA-OT base directory.</p> </li> <li> <p>plugin.order</p> <p>Defines the order in which plug-ins are processed. In XML catalog files, the order of imports is significant. If multiple plug-ins define the same thing (differently), the first catalog entry \u201cwins\u201d. DITA-OT uses this property to define the order in which catalog entries are written. This mechanism is currently used to ensure that DITA 1.3 grammar files take precedence over their DITA 1.2 equivalents.</p> </li> <li> <p>registry</p> <p>Defines the list (and order) of plug-in repositories that are searched for available plug-ins during the installation process. In addition to the main plug-in registry at dita-ot.org/plugins, you can create a registry of your own to store the custom plug-ins for your company or organization. To add a new entry, append the URL for your custom registry directory to the <code>registry</code> key value, separating each entry with a space. For more information, see Adding plug-ins via the registry.</p> </li> <li> <p>org.dita.pdf2.i18n.enabled</p> <p>Enables internationalization (I18N) font processing to provide per-character font selection for FO renderers that do not support the <code>font-selection-strategy</code> property (such as Apache FOP).</p> <p>When this feature is enabled, DITA-OT uses a font mapping process that takes the content language into consideration. The mapping process uses configuration files for each language to define characters that should be rendered with certain logical fonts, and font mappings that associate each logical font to physical font files.</p> <p>The following values are allowed:</p> <ul> <li>true (default) \u2014 Enables font mapping</li> <li>false \u2014 Disables font mapping Tip: If you don\u2019t use custom character mappings, turning off font mapping makes it easier to define custom fonts simply by changing font names in the XSL attributes files of your custom PDF plug-in. For details, see Font configuration in PDF2.</li> </ul> </li> <li> <p>default.coderef-charset</p> <p>As of DITA-OT 3.3, the default character set for code references can be changed by specifying one of the character set values supported by the Java Charset class.</p> </li> </ul> <p>Related information </p> <p>Installing plug-ins</p> <p>DITA 1.3 specification: Cascading of metadata attributes in a DITA map</p> <p>Example: How the @cascade attribute functions</p> <p>Font configuration in PDF2</p>"},{"location":"parameters/configuration-properties/","title":"Configuration properties","text":"<p>DITA-OT uses <code>.properties</code> files and internal properties that store configuration settings for the toolkit and its plug-ins. Configuration properties are available to both Ant and Java processes, but unlike argument properties, they cannot be set at run time.</p> <p>When DITA-OT starts the Ant process, it looks for property values in the following order and locations:</p> <ol> <li>Any property passed to Ant from the command line with -Dproperty or --property=value</li> <li>A custom property file passed with --propertyfile</li> <li>A <code>local.properties</code> file in the root directory of the DITA-OT installation</li> <li>The <code>lib/org.dita.dost.platform/plugin.properties</code> file</li> <li>The <code>configuration.properties</code> file</li> </ol> <p>If a given property is set in multiple places, the first value \u201cwins\u201d and subsequent entries for the same property are ignored.</p> <p>You can use this mechanism to override DITA-OT default settings for your environment by passing parameters to the <code>dita</code> command with --property=value, or using entries in <code>.properties</code> files.</p>"},{"location":"parameters/dita-command-arguments/","title":"Arguments and options for the <code>dita</code> command","text":"<p>The <code>dita</code> command takes mandatory arguments to process DITA content. Subcommands can be used to manage plug-ins, or print information about the current configuration. A series of options are available to modify the command behavior or specify additional configuration parameters.</p>"},{"location":"parameters/dita-command-arguments/#usage","title":"Usage","text":"<p>To convert content from one format to another, specify the file to transform and the desired output format. If necessary, you can set additional configuration parameters with options.</p> <p><code>**dita**</code> <code>**--input**</code> <code>=</code> file <code>**--format**</code> <code>=</code> name [ options ]</p> <p><code>**dita**</code> <code>**--project**</code> <code>=</code> file [ options ]</p> <p>Note: Most <code>dita</code> command options support several syntax alternatives. All options can be specified with a GNU-style option keyword preceded by two hyphens. In many cases, Unix-style single-letter options (preceded by a single hyphen) are also available for brevity and backwards compatibility.</p> <p>The <code>dita</code> command also supports a series of subcommands that can be used to manage plug-ins, or print information about the current configuration or version.</p> <p><code>**dita**</code> <code>**deliverables**</code> file</p> <p><code>**dita**</code> <code>**install**</code> [ { ID | URL | file } ]</p> <p><code>**dita**</code> <code>**plugins**</code></p> <p><code>**dita**</code> <code>**transtypes**</code></p> <p><code>**dita**</code> <code>**uninstall**</code> ID</p> <p><code>**dita**</code> <code>**version**</code></p> <p>Attention: Prior to DITA-OT 3.5, subcommands were specified with the double-hyphen option syntax, which is still supported for backwards compatibility. (For example, <code>dita</code> --install will still work.)</p>"},{"location":"parameters/dita-command-arguments/#arguments","title":"Arguments","text":"<p>Each transformation requires you to specify at least the file to transform and the desired output format.</p> <ul> <li> <p>--input=file -i file</p> <p>Specifies the main file for your documentation project.</p> <p>This argument corresponds to the common parameter args.input.</p> <p>Typically this is a DITA map, however it also can be a DITA topic if you want to transform a single DITA file. The path can be absolute, relative to args.input.dir, or relative to the current directory if args.input.dir is not defined.</p> </li> <li> <p>--format=name -f name</p> <p>Specifies the output format (transformation type).</p> <p>This argument corresponds to the common parameter transtype.</p> <p>To list the formats that are currently available in your environment, use <code>dita transtypes</code>.</p> <p>You can create plug-ins to add new output formats; by default, the following values are available:</p> <ul> <li>dita</li> <li>eclipsehelp</li> <li>html5</li> <li>htmlhelp</li> <li>markdown, markdown_gitbook, and markdown_github</li> <li>pdf</li> <li>xhtml Tip: See DITA-OT transformations (output formats) for sample command line syntax and more information on each transformation.</li> </ul> </li> </ul>"},{"location":"parameters/dita-command-arguments/#subcommands","title":"Subcommands","text":"<ul> <li> <p>deliverables file</p> <p>Show a list of the available deliverables in the specified project file.</p> </li> <li> <p>install { ID | URL | file } --install={ ID | URL | file }</p> <p>Install a single plug-in ID from the registry at dita-ot.org/plugins (or a local registry), from a remote URL, or a local ZIP file.</p> </li> <li> <p>install --install</p> <p>If no ID, URL, or file argument is provided, the installation process reloads the current set of plug-ins from the <code>plugins</code> directory (or any custom locations defined via the pluginsdir property in the <code>configuration.properties</code> file in the <code>config</code> directory). This approach can be used to add or remove multiple plug-ins at once, or any individual plug-ins you have already copied to (or removed from) the plug-in directories. Any plug-ins added or removed in the process will be listed by their plug-in ID.</p> </li> <li> <p>uninstall ID --uninstall=ID</p> <p>Remove the plug-in with the specified ID.</p> <p>For a list of the currently installed plug-in IDs, use <code>dita plugins</code>.</p> <p>Attention: The <code>uninstall</code> subcommand also removes the corresponding plug-in directory from the <code>plugins</code> folder.</p> </li> <li> <p>plugins --plugins</p> <p>Show a list of the currently installed plug-ins.</p> </li> <li> <p>transtypes --transtypes</p> <p>Show a list of the available output formats (transformation types).</p> <p>The entries in this list may be passed as values to the --format argument.</p> </li> <li> <p>version --version</p> <p>Print version information and exit.</p> </li> </ul>"},{"location":"parameters/dita-command-arguments/#options","title":"Options","text":"<ul> <li> <p>--debug -d</p> <p>Debug logging prints considerably more additional information. The debug log includes all information from the verbose log, plus details on Java classes, additional Ant properties and overrides, preprocessing filters, parameters, and stages, and the complete build sequence. Debug logging requires additional resources and can slow down the build process, so it should only be enabled when further details are required to diagnose problems.</p> </li> <li> <p>--output=dir -o dir</p> <p>Specifies the path of the output directory; the path can be absolute or relative to the current directory.</p> <p>This option corresponds to the common parameter output.dir.</p> <p>By default, the output is written to the <code>out</code> subdirectory of the current directory.</p> </li> <li> <p>--filter=files</p> <p>Specifies filter file(s) used to include, exclude, or flag content. Relative paths are resolved against the current directory and internally converted to absolute paths.</p> <p>Note:</p> <p>To specify multiple filter files, use the system path separator character to delimit individual file paths (semicolon \u2018<code>;</code>\u2019 on Windows, and colon \u2018<code>:</code>\u2019 on macOS and Linux) and wrap the value in quotes:</p> <p><code>--filter=\"filter1.ditaval;filter2.ditaval;filter3.ditaval\"</code></p> <p>As of DITA-OT 3.6, the --filter option can also be passed multiple times:</p> <p><code>--filter=filter1.ditaval --filter=filter2.ditaval --filter=filter3.ditaval</code></p> <p>DITAVAL files are evaluated in the order specified, so conditions specified in the first file take precedence over matching conditions specified in later files, just as conditions at the start of a DITAVAL document take precedence over matching conditions later in the same document.</p> </li> <li> <p>--force</p> <p>Force-install an existing plug-in.</p> <p>Passed as an additional option to the installation subcommand: <code>dita install</code> plug-in-zip --force</p> </li> <li> <p>--help -h</p> <p>Print a list of available arguments, options, and subcommands.</p> </li> <li> <p>--logfile=file -l file</p> <p>Write logging messages to a file.</p> </li> <li> <p>--parameter=value __-D___parameter_=value</p> <p>Specify a value for a DITA-OT or Ant build parameter.</p> <p>The GNU-style --parameter=value form is only available for parameters that are configured in the plug-in configuration file; the Java-style -D form can also be used to specify additional non-configured parameters or set system properties.</p> <p>Parameters not implemented by the specified transformation type or referenced in a <code>.properties</code> file are ignored.</p> <p>Tip: If you are building in different environments where the location of the input files is not consistent, set args.input.dir with the <code>dita</code> command and reference its value with <code>${args.input.dir}</code> in your <code>.properties</code> file.</p> </li> <li> <p>--propertyfile=file</p> <p>Use build parameters defined in the referenced <code>.properties</code> file.</p> <p>Build parameters specified on the command line override those set in the <code>.properties</code> file.</p> </li> <li> <p>--repeat=N</p> <p>Repeat the transformation N number of times.</p> <p>This option can be used by plug-in developers to measure performance. To run a conversion five times, for example, use --repeat=5. The duration of each execution will appear in the console when the final transformation is complete.</p> <p><code>$ `dita` **--input**=`docsrc/samples/sequence.ditamap` **--format**=html5 \\        **--repeat**=5 1 11281ms 2 4132ms 3 3690ms 4 4337ms 5 3634ms</code></p> </li> <li> <p>--resource=file -r file</p> <p>Specifies resource files.</p> <p>This argument corresponds to the common parameter args.resources.</p> <p>Resource files can be used to convert partial documentation sets by processing input with additional information.</p> <p>For example, to process a single topic file with a map that contains key definitions, use a command like this:</p> <p><code>syntax-bash `dita` **--input**=`topic.dita` **--resource**=`keys.ditamap` **--format**=html5</code></p> <p>To convert a chapter map to HTML5 and insert related links from relationship tables in a separate map, use:</p> <p><code>syntax-bash `dita` **--input**=`chapter.ditamap` **--resource**=`reltables.ditamap` **--format**=html5</code></p> </li> <li> <p>--temp=dir -t dir</p> <p>Specifies the location of the temporary directory.</p> <p>This option corresponds to the common parameter dita.temp.dir.</p> <p>The temporary directory is where DITA-OT writes intermediate files that are generated during the transformation process.</p> </li> <li> <p>--verbose -v</p> <p>Verbose logging prints additional information to the console, including directory settings, effective values for Ant properties, input/output files, and informational messages to assist in troubleshooting.</p> </li> </ul> <p>Related information </p> <p>Building output using the dita command</p> <p>DITA-OT parameters</p> <p>Internal Ant properties</p> <p>Setting build parameters with .properties files</p> <p>Accessing help for the dita command</p>"},{"location":"parameters/generate-copy-outer/","title":"Handling content outside the map directory","text":"<p>By default, DITA-OT assumes content is located in or beneath the directory containing the DITA map file. The generate.copy.outer parameter can be used to adjust how output is generated for content that is located outside the map directory.</p>"},{"location":"parameters/generate-copy-outer/#background","title":"Background","text":"<p>This is an issue in the following situations:</p> <ul> <li>The DITA map is in a directory that is a peer to directories that contain referenced objects.</li> <li>The DITA map is in a directory that is below the directories that contain the referenced objects.</li> </ul> <p>Let\u2019s assume that the directory structure for the DITA content looks like the following:</p> <pre><code>images/\n  fig.png\nmaps/\n  start.ditamap\ntopics/\n  topic.dita\n</code></pre> <p>The DITA map is in the <code>maps</code> directory, the topics are in the <code>topics</code> directory, and the images are in the <code>images</code> directory.</p>"},{"location":"parameters/generate-copy-outer/#exclude-content-outside-the-map-directory","title":"Exclude content outside the map directory","text":"<p>Let\u2019s assume that you run the HTML5 transformation. By default, DITA-OT uses the generate.copy.outer parameter with a value of 1, which means that no output is generated for content that is located outside the DITA map directory.</p> <p>You receive only the following output:</p> <pre><code>index.html\ncommonltr.css\ncommonrtl.css\n</code></pre> <p>The <code>index.html</code> file contains the navigation structure, but all the links are broken, since no HTML files were built for the topics.</p> <p>How do you fix this? By adjusting the parameter setting to shift the output directory.</p>"},{"location":"parameters/generate-copy-outer/#shift-the-output-directory-to-include-all-content","title":"Shift the output directory to include all content","text":"<p>To preserve the links to referenced topics and images and make it easier to copy the output directory, set the generate.copy.outer parameter to 3.</p> <p>Now your output directory structure resembles the structure of the source directory:</p> <pre><code>images/\n  fig.png\nmaps/\n  index.html\ntopics/\n  topic.html\ncommonltr.css\ncommonrtl.css\n</code></pre> <p>The <code>index.html</code> file is in the <code>maps</code> directory, the HTML files for the topics are in the <code>topics</code> directory, and the referenced images are in the <code>images</code> directory.</p> <p>Tip: If args.csspath is not set, the default CSS files (and any custom CSS files specified via args.css) will be copied to the root level of the output folder. To copy CSS files to an output subfolder named <code>css</code>, set args.csspath to css.</p>"},{"location":"parameters/internal-ant-properties/","title":"Internal Ant properties","text":"<p>DITA-OT uses these Ant properties in certain internal operations. They are not intended for general use, but may be adjusted by plug-in developers to configure custom transform types.</p> <p>Attention: Internal properties are subject to change from one version of DITA-OT to another.</p> <ul> <li> <p><code>include.rellinks</code></p> <p>A space-separated list of link roles to be output; the <code>#default</code> value token represents links without an explicit role (those for which no <code>@role</code> attribute is defined). Defined by <code>args.rellinks</code>, but may be overridden directly.</p> <p>Valid roles include:</p> <ul> <li>parent</li> <li>child</li> <li>sibling</li> <li>friend</li> <li>next</li> <li>previous</li> <li>cousin</li> <li>ancestor</li> <li>descendant</li> <li>sample</li> <li>external</li> <li>other</li> <li><code>temp.output.dir.name</code></li> </ul> <p>This property can be used to place all output in an internal directory, so that a final step in the transform type can do some form of post-processing before the files are placed in the specified output directory.</p> <p>For example, if a custom HTML5 transform sets the property to <code>zip_dir</code>, all output files (including HTML, images, and CSS) will be placed within the directory <code>zip_dir</code> in the temporary processing directory. A final step can then be used to add more files, zip the directory, and return that zip to the designated output directory.</p> </li> </ul>"},{"location":"parameters/local-properties-file/","title":"The <code>local.properties</code> file","text":"<p>A <code>local.properties</code> file in the root directory of the DITA-OT installation can be used to override the default values of various DITA-OT parameters.</p> <p>For example, if you always use the same rendering engine to produce PDF output for all of your projects, you could create a <code>local.properties</code> file in the root directory of your DITA-OT installation to set the pdf.formatter parameter and additional options for the XSL processor:</p> <pre><code># Use RenderX XEP Engine for PDF output\npdf.formatter = xep\n\n# Specify the user configuration file for RenderX\ncustom.xep.config = /path/to/custom.config\n</code></pre> <p>Backslash \u201c\\\u201d characters in .properties files must be escaped with a second backslash as \u201c\\\\\u201d. If you use Antenna House Formatter on a Windows system, for example, you would set the path to the command using a properties file entry like this:</p> <pre><code># Use Antenna House Formatter for PDF output\npdf.formatter = ah\n\n# Specify the path to the Antenna House Formatter command\naxf.cmd=C:\\\\Program Files\\\\Antenna House\\\\AHFormatterV62\n</code></pre> <p>Note: This file can only be used to set Ant property values that can be passed as argument parameters to the command line. The DITA-OT Java code does not read this file.</p>"},{"location":"parameters/parameters-base-html/","title":"HTML-based output parameters","text":"<p>Certain parameters apply to all HTML-based transformation types: HTML5, XHTML, HTML\u00a0Help, and Eclipse help. </p> <ul> <li> <p>args.artlbl</p> <p>Specifies whether to generate a label for each image; the label will contain the image file name. The allowed values are yes and no; the default value is no.</p> </li> <li> <p>args.copycss</p> <p>Specifies whether to copy the custom .css file to the output directory. The allowed values are yes and no; the default value is no.</p> <p>If an external process will copy your custom .css file to the output directory, leave this parameter unset (or set it to no). If DITA-OT should copy the file when generating output, set it to yes.</p> </li> <li> <p>args.css</p> <p>Specifies the name of a custom .css file.</p> <p>The value of this parameter should be only the file name. The absolute path to the parent directory should be specified with args.cssroot.</p> </li> <li> <p>args.csspath</p> <p>Specifies the destination directory to which .css files are copied (relative to the output directory).</p> <p>Corresponds to the XSLT parameter CSSPATH.</p> <p>DITA-OT will copy the file to this location.</p> <p>Tip: If args.csspath is not set, the custom CSS file (and the default CSS files) will be copied to the root level of the output folder. To copy CSS files to an output subfolder named <code>css</code>, set args.csspath to css.</p> </li> <li> <p>args.cssroot</p> <p>Specifies the source directory that contains the custom .css file.</p> <p>DITA-OT will copy the file from this location.</p> <p>Important: Enter the absolute path to the parent directory of the custom CSS file specified with args.css.</p> </li> <li> <p>args.dita.locale</p> <p>Specifies the language locale file to use for sorting index entries.</p> <p>Note: This parameter is not available for the XHTML transformation.</p> </li> <li> <p>args.eclipse.provider</p> <p>Specifies the name of the person or organization that provides the Eclipse help.</p> </li> <li> <p>args.eclipse.symbolic.name</p> <p>Specifies the symbolic name (aka plugin ID) in the output for an Eclipse Help project.</p> </li> <li> <p>args.eclipse.version</p> <p>Specifies the version number to include in the output.</p> </li> <li> <p>args.eclipsehelp.country</p> <p>Specifies the region for the language that is specified by the args.</p> </li> <li> <p>args.eclipsehelp.jar.name</p> <p>Specifies that the output should be zipped and returned using this name.</p> </li> <li> <p>args.eclipsehelp.language</p> <p>Specifies the base language for translated content, such as en for English.</p> </li> <li> <p>args.ftr</p> <p>Specifies an XML file that contains content for a running footer.</p> <p>Corresponds to the XSLT parameter FTR.</p> <p>Note: The footer file should be specified using an absolute path and must contain valid XML. A common practice is to place all content into a <code>&lt;div&gt;</code> element. In HTML5 output, the footer file contents will be wrapped in an HTML5 <code>&lt;footer&gt;</code> element with the <code>@role</code> attribute set to contentinfo.</p> </li> <li> <p>args.gen.default.meta</p> <p>Generate metadata for parental control scanners, meta elements with name=\"security\" and name=\"Robots\". The allowed values are yes and no; the default value is no.</p> <p>Corresponds to the XSLT parameter genDefMeta.</p> </li> <li> <p>args.hdf</p> <p>Specifies an XML file that contains content to be placed in the document head.</p> <p>The contents of the header file will be inserted in the <code>&lt;head&gt;</code> element of the generated HTML files.</p> <p>Tip: The header file should be specified using an absolute path and must contain valid XML. If you need to insert more than one element into the HTML page head, wrap the content in a <code>&lt;div&gt;</code> element. The division wrapper in the header file will be discarded when generating HTML files, and the contents will be inserted into each page head.</p> </li> <li> <p>args.hdr</p> <p>Specifies an XML file that contains content for a running header.</p> <p>Corresponds to the XSLT parameter HDR.</p> <p>Note: The header file should be specified using an absolute path and must contain valid XML. A common practice is to place all content into a <code>&lt;div&gt;</code> element. In HTML5 output, the contents of the header file will be wrapped in an HTML5 <code>&lt;header&gt;</code> element with the <code>@role</code> attribute set to banner.</p> </li> <li> <p>args.hide.parent.link</p> <p>Specifies whether to hide links to parent topics in the HTML or XHTML output. The allowed values are yes and no; the default value is no.</p> <p>Corresponds to the XSLT parameter NOPARENTLINK.</p> <p>Note: This parameter is deprecated in favor of the args.rellinks parameter.</p> </li> <li> <p>args.htmlhelp.includefile</p> <p>Specifies the name of a file that you want included in the HTML Help.</p> </li> <li> <p>args.indexshow</p> <p>Specifies whether the content of &lt;indexterm&gt; elements are rendered in the output. The allowed values are yes and no; the default value is no.</p> </li> <li> <p>args.outext</p> <p>Specifies the file extension for HTML or XHTML output.</p> <p>Corresponds to the XSLT parameter OUTEXT.</p> </li> <li> <p>args.xhtml.classattr</p> <p>Specifies whether to include the DITA class ancestry inside the XHTML elements. The allowed values are yes and no; the default value is yes.</p> <p>For example, the <code>&lt;prereq&gt;</code> element (which is specialized from <code>&lt;section&gt;</code>) would generate <code>class=\"section prereq\"</code>. Corresponds to the XSLT parameter PRESERVE-DITA-CLASS.</p> <p>Note: Beginning with DITA-OT release 1.5.2, the default value is yes. For release 1.5 and 1.5.1, the default value was no.</p> </li> <li> <p>args.xhtml.contenttarget</p> <p>Specifies the value of the @target attribute on the &lt;base&gt; element in the TOC file.</p> </li> <li> <p>args.xhtml.toc</p> <p>Specifies the base name of the TOC file.</p> </li> <li> <p>args.xhtml.toc.class</p> <p>Specifies the value of the @class attribute on the &lt;body&gt; element in the TOC file.</p> </li> <li> <p>args.xhtml.toc.xsl</p> <p>Specifies a custom XSL file to be used for TOC generation.</p> </li> <li> <p>args.xsl</p> <p>Specifies a custom XSL file to be used instead of the default XSL transformation.</p> <p>The parameter must specify a fully qualified file name.</p> </li> </ul> <p>Related information </p> <p>Eclipse help transformation</p> <p>HTML help transformation</p> <p>XHTML transformation</p> <p>Setting parameters for custom HTML</p> <p>HTML5 transformation</p> <p>Bundling CSS in a custom HTML plug-in</p> <p>Embedding web fonts in HTML output</p> <p>Inserting JavaScript in generated HTML</p> <p>Eclipse Help parameters</p> <p>HTML5 parameters</p> <p>Microsoft Compiled HTML Help parameters</p> <p>XHTML parameters</p>"},{"location":"parameters/parameters-base/","title":"Common parameters","text":"<p>Certain parameters apply to all transformations that DITA Open Toolkit supports.</p> <ul> <li> <p>args.debug</p> <p>Specifies whether debugging information is included in the log. The allowed values are yes and no; the default value is no.</p> </li> <li> <p>args.draft</p> <p>Specifies whether the content of &lt;draft-comment&gt; and &lt;required-cleanup&gt; elements is included in the output. The allowed values are yes and no; the default value is no.</p> <p>Corresponds to the XSLT parameter DRAFT in most XSLT modules.</p> <p>Tip: For PDF output, setting the args.draft parameter to yes causes the contents of the <code>&lt;titlealts&gt;</code> element to be rendered below the title.</p> </li> <li> <p>args.figurelink.style</p> <p>Specifies how cross references to figures are styled in output. The allowed values are NUMBER, TITLE, and NUMTITLE.</p> <p>Specifying NUMBER results in \"Figure 5\"; specifying TITLE results in the title of the figure. Corresponds to the XSLT parameter FIGURELINK.</p> <p>Note: Support for PDF was added in DITA-OT 2.0. By default PDF uses the value NUMTITLE, which is not supported for other transformation types; this results in \"Figure 5. Title\".</p> </li> <li> <p>args.filter</p> <p>Specifies filter file(s) used to include, exclude, or flag content. Relative paths are resolved against the DITA-OT base directory (for backwards compatibility) and internally converted to absolute paths.</p> <p>Note:</p> <p>To specify multiple filter files, use the system path separator character to delimit individual file paths (semicolon \u2018<code>;</code>\u2019 on Windows, and colon \u2018<code>:</code>\u2019 on macOS and Linux) and wrap the value in quotes:</p> <p><code>--args.filter=\"filter1.ditaval;filter2.ditaval;filter3.ditaval\"</code></p> <p>DITAVAL files are evaluated in the order specified, so conditions specified in the first file take precedence over matching conditions specified in later files, just as conditions at the start of a DITAVAL document take precedence over matching conditions later in the same document.</p> </li> <li> <p>args.gen.task.lbl</p> <p>Specifies whether to generate headings for sections within task topics. The allowed values are YES and NO.</p> <p>Corresponds to the XSLT parameter GENERATE-TASK-LABELS.</p> </li> <li> <p>args.grammar.cache</p> <p>Specifies whether the grammar-caching feature of the XML parser is used. The allowed values are yes and no; the default value is yes.</p> <p>Note: This option dramatically speeds up processing time. However, there is a known problem with using this feature for documents that use XML entities. If your build fails with parser errors about entity resolution, set this parameter to no.</p> </li> <li> <p>args.input</p> <p>Specifies the main file for your documentation project.</p> <p>This parameter corresponds to the command-line argument --input.</p> <p>Typically this is a DITA map, however it also can be a DITA topic if you want to transform a single DITA file. The path can be absolute, relative to args.input.dir, or relative to the current directory if args.input.dir is not defined.</p> </li> <li> <p>args.input.dir</p> <p>Specifies the base directory for your documentation project.</p> </li> <li> <p>args.output.base</p> <p>Specifies the name of the output file without file extension.</p> </li> <li> <p>args.rellinks</p> <p>Specifies which links to include in the output. The following values are supported:</p> <ul> <li>none \u2013 No links are included.</li> <li>all \u2013 All links are included.</li> <li>noparent \u2013 Ancestor and parent links are not included.</li> <li>nofamily \u2013 Parent, ancestor, child, descendant, sibling, next, previous, and cousin links are not included. For PDF output, the default value is nofamily. Other formats include all link roles except <code>ancestor</code> links.</li> </ul> </li> <li> <p>args.resources</p> <p>Specifies resource files.</p> <p>This parameter corresponds to the command-line option --resource.</p> <p>Resource files can be used to convert partial documentation sets by processing input with additional information.</p> <p>For example, to process a single topic file with a map that contains key definitions, use a command like this:</p> <p><code>syntax-bash `dita` **--input**=`topic.dita` **--format**=html5 **--args.resources**=`keys.ditamap`</code></p> <p>To convert a chapter map to HTML5 and insert related links from relationship tables in a separate map, use:</p> <p><code>syntax-bash `dita` **--input**=`chapter.ditamap` **--format**=html5 **--args.resources**=`reltables.ditamap`</code></p> </li> <li> <p>args.tablelink.style</p> <p>Specifies how cross references to tables are styled. The allowed values are NUMBER, TITLE, and NUMTITLE.</p> <p>Specifying NUMBER results in \"Table 5\"; specifying TITLE results in the title of the table. Corresponds to the XSLT parameter TABLELINK.</p> <p>Note: Support for PDF was added in DITA-OT 2.0. By default PDF uses the value NUMTITLE, which is not supported for other transformation types; this results in \"Table 5. Title\".</p> </li> <li> <p>build-step.branch-filter</p> <p>Run process branch-filter The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.chunk</p> <p>Run process chunk The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.clean-preprocess</p> <p>Run process clean-preprocess The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.clean-temp</p> <p>Run process clean-temp The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.coderef</p> <p>Run process coderef The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.conref</p> <p>Run process conref The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.copy-flag</p> <p>Run process copy-flag The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.copy-html</p> <p>Run process copy-html The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.copy-image</p> <p>Run process copy-image The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.keyref</p> <p>Run process keyref The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.map-profile</p> <p>Run process map-profile The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.maplink</p> <p>Run process maplink The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.mapref</p> <p>Run process mapref The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.move-meta-entries</p> <p>Run process move-meta-entries The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.normalize-codeblock</p> <p>Run process normalize-codeblock The allowed values are true and false; the default value is true.</p> </li> <li> <p>build-step.profile</p> <p>Run process profile The allowed values are true and false; the default value is false.</p> </li> <li> <p>build-step.topic-profile</p> <p>Run process topic-profile The allowed values are true and false; the default value is false.</p> </li> <li> <p>build-step.topicpull</p> <p>Run process topicpull The allowed values are true and false; the default value is true.</p> </li> <li> <p>clean.temp</p> <p>Specifies whether DITA-OT deletes the files in the temporary directory after it finishes a build. The allowed values are yes and no; the default value is yes.</p> </li> <li> <p>conserve-memory</p> <p>Conserve memory at the expense of processing speed. The allowed values are true and false; the default value is false.</p> </li> <li> <p>default.language</p> <p>Specifies the language that is used if the input file does not have the <code>@xml:lang</code> attribute set on the root element. By default, this is set to en. The allowed values are those that are defined in IETF BCP 47, Tags for Identifying Languages.</p> </li> <li> <p>dita.dir</p> <p>Specifies where DITA-OT is installed.</p> </li> <li> <p>dita.input.valfile</p> <p>Specifies a filter file to be used to include, exclude, or flag content.</p> <p>Note: This parameter is deprecated in favor of the args.filter parameter.</p> </li> <li> <p>dita.temp.dir</p> <p>Specifies the location of the temporary directory.</p> <p>This parameter corresponds to the command-line option --temp.</p> <p>The temporary directory is where DITA-OT writes intermediate files that are generated during the transformation process.</p> </li> <li> <p>filter-stage</p> <p>Specifies whether filtering is done before all other processing, or after key and conref processing. The allowed values are early and late; the default value is early.</p> <p>Note: Changing the filtering stage may produce different results for the same initial data set and filtering conditions.</p> </li> <li> <p>force-unique</p> <p>Generate copy-to attributes to duplicate topicref elements. The allowed values are true and false; the default value is false.</p> <p>Setting this to true ensures that unique output files are created for each instance of a resource when a map contains multiple references to a single topic.</p> </li> <li> <p>generate-debug-attributes</p> <p>Specifies whether the @xtrf and @xtrc debugging attributes are generated in the temporary files. The following values are supported:</p> <ul> <li>true (default) \u2013 Enables generation of debugging attributes</li> <li>false \u2013 Disables generation of debugging attributes Note: Disabling debugging attributes reduces the size of temporary files and thus reduces memory consumption. However, the log messages no longer have the source information available and thus the ability to debug problems might deteriorate.</li> </ul> </li> <li> <p>generate.copy.outer</p> <p>Adjust how output is generated for content that is located outside the directory containing the input resource (DITA map or topic). The following values are supported:</p> <ul> <li>1 (default) \u2013 Do not generate output for content that is located outside the DITA map directory.</li> <li>3 \u2013 Shift the output directory so that it contains all output for the publication. See Handling content outside the map directory for more information.</li> </ul> </li> <li> <p>link-crawl</p> <p>Specifies whether to crawl only those topic links found in maps, or all discovered topic links. The allowed values are map and topic; the default value is topic.</p> </li> <li> <p>onlytopic.in.map</p> <p>Specifies whether files that are linked to, or referenced with a @conref attribute, generate output. The allowed values are true and false; the default value is false.</p> <p>If set to true, only files that are referenced directly from the map will generate output.</p> </li> <li> <p>outer.control</p> <p>Specifies whether to warn or fail if content is located outside the directory containing the input resource (DITA map or topic). The following values are supported:</p> <ul> <li>fail \u2013 Fail quickly if files are going to be generated or copied outside of the directory.</li> <li>warn (default) \u2013 Complete the operation if files will be generated or copied outside of the directory, but log a warning.</li> <li>quiet \u2013 Quietly finish without generating warnings or errors. Warning: Microsoft HTML Help Compiler cannot produce HTML Help for documentation projects that use outer content. The content files must reside in or below the directory containing the root map file, and the map file cannot specify \"..\" at the start of the <code>@href</code> attributes for <code>&lt;topicref&gt;</code> elements.</li> </ul> </li> <li> <p>output.dir</p> <p>Specifies the name and location of the output directory.</p> <p>This parameter corresponds to the command-line option --output.</p> <p>By default, the output is written to <code>*DITA-dir*/out</code>.</p> </li> <li> <p>parallel</p> <p>Run processes in parallel when possible. The allowed values are true and false; the default value is false.</p> </li> <li> <p>processing-mode</p> <p>Specifies how DITA-OT handles errors and error recovery. The following values are supported:</p> <ul> <li>strict \u2013 When an error is encountered, DITA-OT stops processing</li> <li>lax (default) \u2013 When an error is encountered, DITA-OT attempts to recover from it</li> <li>skip \u2013 When an error is encountered, DITA-OT continues processing but does not attempt error recovery</li> <li>remove-broken-links</li> </ul> <p>Remove broken related links. The allowed values are true and false; the default value is false.</p> </li> <li> <p>result.rewrite-rule.class</p> <p>Specifies the name of the Java class used to rewrite filenames.</p> <p>The custom class should implement the <code>org.dita.dost.module.RewriteRule</code> interface.</p> </li> <li> <p>result.rewrite-rule.xsl</p> <p>Specifies the name of the XSLT file used to rewrite filenames.</p> <p>See Adjusting file names in map-first pre-processing for details.</p> </li> <li> <p>root-chunk-override</p> <p>Override for map chunk attribute value.</p> <p>Acceptable values include any value normally allowed on the <code>@chunk</code> attribute. If the map does not have a <code>@chunk</code> attribute, this value will be used; if the map already has a <code>@chunk</code> attribute specified, this value will be used instead.</p> </li> <li> <p>store-type</p> <p>Temporary file store type. The allowed values are file and memory; the default value is file.</p> <p>In-memory processing provides performance advantages in I/O bound environments such as cloud computing platforms, where processing time depends primarily on how long it takes to read and write temporary files. For more information, see Store API \u2013 Processing in memory.</p> <p>Important: Custom plug-ins that expect to find certain files on disk in the temporary directory will not work with in-memory processing.</p> </li> <li> <p>transtype</p> <p>Specifies the output format (transformation type).</p> <p>This parameter corresponds to the command-line argument --format.</p> <p>You can create plug-ins to add new output formats; by default, the following values are available:</p> <ul> <li>dita</li> <li>eclipsehelp</li> <li>html5</li> <li>htmlhelp</li> <li>markdown, markdown_gitbook, and markdown_github</li> <li>pdf</li> <li>xhtml Tip: See DITA-OT transformations (output formats) for sample command line syntax and more information on each transformation.</li> </ul> </li> <li> <p>validate</p> <p>Specifies whether DITA-OT validates the content. The allowed values are true and false; the default value is true.</p> </li> </ul> <p>Related information </p> <p>Eclipse help transformation</p> <p>HTML help transformation</p> <p>PDF transformation</p> <p>XHTML transformation</p> <p>Setting parameters for custom HTML</p> <p>HTML5 transformation</p> <p>Generating Markdown output</p> <p>Normalized DITA transformations</p>"},{"location":"parameters/parameters-eclipsehelp/","title":"Eclipse Help parameters","text":"<p>Certain parameters are specific to the Eclipse help transformation.</p> <ul> <li> <p>args.eclipse.provider</p> <p>Specifies the name of the person or organization that provides the Eclipse help.</p> <p>The default value is DITA.</p> <p>Tip: The toolkit ignores the value of this parameter when it processes an Eclipse map.</p> </li> <li> <p>args.eclipse.symbolic.name</p> <p>Specifies the symbolic name (aka plugin ID) in the output for an Eclipse Help project.</p> <p>The <code>@id</code> value from the DITA map or the Eclipse map collection (Eclipse help specialization) is the symbolic name for the plugin in Eclipse. The default value is org.sample.help.doc.</p> <p>Tip: The toolkit ignores the value of this parameter when it processes an Eclipse map.</p> </li> <li> <p>args.eclipse.version</p> <p>Specifies the version number to include in the output.</p> <p>The default value is 0.0.0.</p> <p>Tip: The toolkit ignores the value of this parameter when it processes an Eclipse map.</p> </li> <li> <p>args.eclipsehelp.country</p> <p>Specifies the region for the language that is specified by the args.</p> <p>For example, us, ca, and gb would clarify a value of en set for the args.eclipsehelp.language parameter. The content will be moved into the appropriate directory structure for an Eclipse fragment.</p> </li> <li> <p>args.eclipsehelp.jar.name</p> <p>Specifies that the output should be zipped and returned using this name.</p> </li> <li> <p>args.eclipsehelp.language</p> <p>Specifies the base language for translated content, such as en for English.</p> <p>This parameter is a prerequisite for the args.eclipsehelp.country parameter. The content will be moved into the appropriate directory structure for an Eclipse fragment.</p> </li> </ul> <p>Related information </p> <p>Eclipse help transformation</p> <p>Common parameters</p> <p>HTML-based output parameters</p>"},{"location":"parameters/parameters-html5/","title":"HTML5 parameters","text":"<p>The HTML5 transformation shares common parameters with other HTML-based transformations and provides additional parameters that are specific to HTML5 output. </p> <ul> <li> <p>args.artlbl</p> <p>Specifies whether to generate a label for each image; the label will contain the image file name. The allowed values are yes and no; the default value is no.</p> </li> <li> <p>args.copycss</p> <p>Specifies whether to copy the custom .css file to the output directory. The allowed values are yes and no; the default value is no.</p> <p>If an external process will copy your custom .css file to the output directory, leave this parameter unset (or set it to no). If DITA-OT should copy the file when generating output, set it to yes.</p> </li> <li> <p>args.css</p> <p>Specifies the name of a custom .css file.</p> <p>The value of this parameter should be only the file name. The absolute path to the parent directory should be specified with args.cssroot.</p> </li> <li> <p>args.csspath</p> <p>Specifies the destination directory to which .css files are copied (relative to the output directory).</p> <p>Corresponds to the XSLT parameter CSSPATH.</p> <p>DITA-OT will copy the file to this location.</p> <p>Tip: If args.csspath is not set, the custom CSS file (and the default CSS files) will be copied to the root level of the output folder. To copy CSS files to an output subfolder named <code>css</code>, set args.csspath to css.</p> </li> <li> <p>args.cssroot</p> <p>Specifies the source directory that contains the custom .css file.</p> <p>DITA-OT will copy the file from this location.</p> <p>Important: Enter the absolute path to the parent directory of the custom CSS file specified with args.css.</p> </li> <li> <p>args.dita.locale</p> <p>Specifies the language locale file to use for sorting index entries.</p> </li> <li> <p>args.ftr</p> <p>Specifies an XML file that contains content for a running footer.</p> <p>Corresponds to the XSLT parameter FTR.</p> <p>Note: The footer file should be specified using an absolute path and must contain valid XML. A common practice is to place all content into a <code>&lt;div&gt;</code> element. In HTML5 output, the footer file contents will be wrapped in an HTML5 <code>&lt;footer&gt;</code> element with the <code>@role</code> attribute set to contentinfo.</p> </li> <li> <p>args.gen.default.meta</p> <p>Generate metadata for parental control scanners, meta elements with name=\"security\" and name=\"Robots\". The allowed values are yes and no; the default value is no.</p> <p>Corresponds to the XSLT parameter genDefMeta.</p> </li> <li> <p>args.hdf</p> <p>Specifies an XML file that contains content to be placed in the document head.</p> <p>The contents of the header file will be inserted in the <code>&lt;head&gt;</code> element of the generated HTML files.</p> <p>Tip: The header file should be specified using an absolute path and must contain valid XML. If you need to insert more than one element into the HTML page head, wrap the content in a <code>&lt;div&gt;</code> element. The division wrapper in the header file will be discarded when generating HTML files, and the contents will be inserted into each page head.</p> </li> <li> <p>args.hdr</p> <p>Specifies an XML file that contains content for a running header.</p> <p>Corresponds to the XSLT parameter HDR.</p> <p>Note: The header file should be specified using an absolute path and must contain valid XML. A common practice is to place all content into a <code>&lt;div&gt;</code> element. In HTML5 output, the contents of the header file will be wrapped in an HTML5 <code>&lt;header&gt;</code> element with the <code>@role</code> attribute set to banner.</p> </li> <li> <p>args.hide.parent.link</p> <p>Specifies whether to hide links to parent topics in the HTML5 output. The allowed values are yes and no; the default value is no.</p> <p>Corresponds to the XSLT parameter NOPARENTLINK.</p> <p>Note: This parameter is deprecated in favor of the args.rellinks parameter.</p> </li> <li> <p>args.html5.classattr</p> <p>Specifies whether to include the DITA class ancestry inside the HTML5 elements. The allowed values are yes and no; the default value is yes.</p> </li> <li> <p>args.html5.contenttarget</p> <p>Specifies the value of the @target attribute on the &lt;base&gt; element in the TOC file.</p> </li> <li> <p>args.html5.toc</p> <p>Specifies the base name of the TOC file.</p> </li> <li> <p>args.html5.toc.class</p> <p>Specifies the value of the @class attribute on the &lt;body&gt; element in the TOC file.</p> </li> <li> <p>args.html5.toc.xsl</p> <p>Specifies a custom XSL file to be used for TOC generation.</p> </li> <li> <p>args.indexshow</p> <p>Specifies whether the content of &lt;indexterm&gt; elements are rendered in the output. The allowed values are yes and no; the default value is no.</p> </li> <li> <p>args.outext</p> <p>Specifies the file extension for HTML5 output.</p> <p>Corresponds to the XSLT parameter OUTEXT.</p> </li> <li> <p>args.xsl</p> <p>Specifies a custom XSL file to be used instead of the default XSL transformation.</p> <p>The parameter must specify a fully qualified file name.</p> </li> <li> <p>html5.toc.generate</p> <p>Generate TOC file from the DITA map. The allowed values are yes and no; the default value is yes.</p> </li> <li> <p>nav-toc</p> <p>Specifies whether to generate a table of contents (ToC) in the HTML5 <code>&lt;nav&gt;</code> element of each page. The navigation can then be rendered in a sidebar or menu via CSS.</p> <p>The following values are supported:</p> <ul> <li>none (default) \u2013 No table of contents will be generated</li> <li>partial \u2013 Include the current topic in the ToC along with its parents, siblings and children</li> <li>full \u2013 Generate a complete ToC for the entire map</li> </ul> </li> </ul> <p>Related information </p> <p>HTML5 transformation</p> <p>Setting parameters for custom HTML</p> <p>HTML-based output parameters</p>"},{"location":"parameters/parameters-htmlhelp/","title":"Microsoft Compiled HTML Help parameters","text":"<p>Certain parameters are specific to the Microsoft Compiled HTML Help (.chm) transformation.</p> <ul> <li> <p>args.htmlhelp.includefile</p> <p>Specifies the name of a file that you want included in the HTML Help.</p> </li> </ul> <p>Related information </p> <p>HTML help transformation</p> <p>Common parameters</p> <p>HTML-based output parameters</p>"},{"location":"parameters/parameters-other/","title":"Other parameters","text":"<p>These parameters enable you to reload style sheets that DITA-OT uses for specific pre-processing stages.</p> <ul> <li> <p>dita.html5.reloadstylesheet dita.preprocess.reloadstylesheet dita.preprocess.reloadstylesheet.clean-map dita.preprocess.reloadstylesheet.conref dita.preprocess.reloadstylesheet.lag-module dita.preprocess.reloadstylesheet.mapref dita.preprocess.reloadstylesheet.mappull dita.preprocess.reloadstylesheet.maplink dita.preprocess.reloadstylesheet.topicpull dita.xhtml.reloadstylesheet</p> <p>Specifies whether DITA-OT reloads the XSL style sheets that are used for the transformation. The allowed values are true and false; the default value is false.</p> <p>During the pre-processing stage, DITA-OT processes one DITA topic at a time, using the same XSLT stylesheet for the entire process. These parameters control whether Ant will use the same <code>Transformer</code> object in Java, the object that handles the XSLT processing, for all topics, or create a separate <code>Transformer</code> for each topic.</p> <p>The default (false) option uses the same <code>Transformer</code>, which is a little faster, because it will not need to parse/compile the XSLT stylesheets and only needs to read the source trees with <code>document()</code> once. The downside is that it will not release the source trees from memory, so you can run out of memory.</p> <p>Tip: For large projects that generate Java out-of-memory errors during transformation, set the parameter to true to allow the XSLT processor to release memory. You may also need to increase the memory available to Java.</p> </li> </ul> <p>Related information </p> <p>Increasing Java memory allocation</p> <p>Other error messages</p>"},{"location":"parameters/parameters-pdf/","title":"PDF parameters","text":"<p>Certain parameters are specific to the PDF transformation.</p> <ul> <li> <p>args.artlbl</p> <p>Specifies whether to generate a label for each image; the label will contain the image file name. The allowed values are yes and no; the default value is no.</p> </li> <li> <p>args.bookmap-order</p> <p>Specifies if the frontmatter and backmatter content order is retained in bookmap. The allowed values are retain and discard; the default value is discard.</p> </li> <li> <p>args.bookmark.style</p> <p>Specifies whether PDF bookmarks are by default expanded or collapsed. The allowed values are EXPANDED and COLLAPSE.</p> </li> <li> <p>args.chapter.layout</p> <p>Specifies whether chapter level TOCs are generated. The allowed values are MINITOC and BASIC; the default value is MINITOC.</p> </li> <li> <p>args.fo.userconfig</p> <p>Specifies the user configuration file for FOP.</p> </li> <li> <p>args.xsl.pdf</p> <p>Specifies an XSL file that is used to override the default XSL transformation.</p> <p>You must specify the fully qualified file name.</p> </li> <li> <p>axf.cmd</p> <p>Specifies the path to the Antenna House Formatter executable.</p> </li> <li> <p>axf.opt</p> <p>Specifies the user configuration file for Antenna House Formatter.</p> </li> <li> <p>custom.xep.config</p> <p>Specifies the user configuration file for RenderX.</p> </li> <li> <p>customization.dir</p> <p>Specifies the customization directory.</p> </li> <li> <p>maxJavaMemory</p> <p>Specifies the amount of memory allocated to the RenderX process.</p> </li> <li> <p>org.dita.index.skip</p> <p>Disable index processing. The allowed values are yes and no; the default value is no.</p> <p>Up until DITA-OT 3.4, indexing code was provided in the PDF plug-in and only available for PDF output. In version 3.4 and above, indexing is provided by a separate plug-in to allow other transformations to access the results.</p> <p>If you have overridden PDF index processing via the <code>transform.topic2fo</code> target in the past, you can set the org.dita.index.skip property to yes and re-enable the <code>transform.topic2fo.index</code> target with <code>&lt;feature extension=\"depend.org.dita.pdf2.index\" value=\"transform.topic2fo.index\"/&gt;</code> in your plug-in configuration.</p> </li> <li> <p>org.dita.pdf2.chunk.enabled</p> <p>Enables chunk attribute processing. The following values are supported:</p> <ul> <li>true \u2013 Enables chunk processing</li> <li>false (default) \u2013 Disables chunk processing</li> <li>org.dita.pdf2.i18n.enabled</li> </ul> <p>Enables internationalization (I18N) font processing to provide per-character font selection for FO renderers that do not support the <code>font-selection-strategy</code> property (such as Apache FOP).</p> <p>When this feature is enabled, DITA-OT uses a font mapping process that takes the content language into consideration. The mapping process uses configuration files for each language to define characters that should be rendered with certain logical fonts, and font mappings that associate each logical font to physical font files.</p> <p>The following values are allowed:</p> <ul> <li>true (default) \u2014 Enables font mapping</li> <li>false \u2014 Disables font mapping Tip: If you don\u2019t use custom character mappings, turning off font mapping makes it easier to define custom fonts simply by changing font names in the XSL attributes files of your custom PDF plug-in. For details, see Font configuration in PDF2.</li> </ul> </li> <li> <p>outputFile.base</p> <p>Specifies the base file name of the generated PDF file.</p> <p>By default, the PDF file uses the base filename of the input <code>.ditamap</code> file.</p> </li> <li> <p>pdf.formatter</p> <p>Specifies the XSL processor. The following values are supported:</p> <ul> <li>xep \u2013 RenderX XEP Engine</li> <li>ah \u2013 Antenna House Formatter</li> <li>fop (default) \u2013 Apache FOP</li> </ul> </li> <li> <p>publish.required.cleanup</p> <p>Specifies whether draft-comment and required-cleanup elements are included in the output. The allowed values are yes, no, yes, and no.</p> <p>The default value is the value of the args.draft parameter. Corresponds to the XSLT parameter publishRequiredCleanup.</p> <p>Note: This parameter is deprecated in favor of the args.draft parameter.</p> </li> <li> <p>theme</p> <p>Theme configuration file.</p> </li> <li> <p>xep.dir</p> <p>RenderX installation directory.</p> </li> </ul> <p>Related information </p> <p>PDF transformation</p> <p>Common parameters</p>"},{"location":"parameters/parameters-xhtml/","title":"XHTML parameters","text":"<p>Certain parameters are specific to the XHTML transformation.</p> <ul> <li> <p>args.xhtml.contenttarget</p> <p>Specifies the value of the @target attribute on the &lt;base&gt; element in the TOC file.</p> <p>The default value is contentwin. Change this value to use a different target name for the table of contents.</p> </li> <li> <p>args.xhtml.toc</p> <p>Specifies the base name of the TOC file.</p> </li> <li> <p>args.xhtml.toc.class</p> <p>Specifies the value of the @class attribute on the &lt;body&gt; element in the TOC file.</p> </li> <li> <p>args.xhtml.toc.xsl</p> <p>Specifies a custom XSL file to be used for TOC generation.</p> </li> </ul> <p>Related information </p> <p>XHTML transformation</p> <p>Setting parameters for custom HTML</p> <p>Common parameters</p> <p>HTML-based output parameters</p>"},{"location":"parameters/parameters_intro/","title":"DITA-OT parameters","text":"<p>Certain parameters apply to all DITA-OT transformations. Other parameters are common to the HTML-based transformations. Some parameters apply only to specific transformation types. These parameters can be passed as options to the <code>dita</code> command using the --parameter=value syntax or included in build scripts as Ant properties.</p> <p>If your toolkit installation includes custom plug-ins that define additional parameters, you can add entries to the following topics by rebuilding the DITA-OT documentation.</p> <p>Related information </p> <p>Setting build parameters with .properties files</p> <p>Rebuilding the DITA-OT documentation</p>"},{"location":"parameters/plugin-properties-file/","title":"The <code>plugin.properties</code> file","text":"<p>The <code>plugin.properties</code> file is used to store configuration properties that are set by the plug-in installation process.</p> <p>The file is located in the <code>config/org.dita.dost.platform</code> directory of the DITA-OT installation and stores a cached version of the plug-in configuration used by the Java code.</p> <p>The contents of this file depend on the installed plug-ins. Each plug-in may contribute properties such as the path to the plug-in folder, supported extensions and print transformation types.</p> <p>Warning: The <code>plugin.properties</code> file is regenerated each time the plug-in integration process is run, so it should not be edited manually as these changes would be lost the next time a plug-in is installed or removed.</p>"},{"location":"reference/","title":"Reference","text":"<p>The Reference topics provide more advanced information about the DITA-OT architecture, OASIS specification support, and licensing.</p>"},{"location":"reference/architecture/","title":"DITA Open Toolkit Architecture","text":"<p>DITA Open Toolkit is an open-source implementation of the OASIS specification for the Darwin Information Typing Architecture. The toolkit uses Ant, XSLT, and Java to transform DITA content (maps and topics) into different deliverable formats.</p> <p>Related information </p> <p>Looking under the hood of the DITA Open Toolkit</p>"},{"location":"reference/books/","title":"Books","text":"<p>Several DITA-related publications include information on configuring and customizing DITA Open Toolkit with detailed examples on creating custom plug-ins for PDF output.</p>"},{"location":"reference/books/#dita-for-print-a-dita-open-toolkit-workbook-second-edition-2017","title":"DITA for Print: A DITA Open Toolkit Workbook (Second Edition, 2017)","text":"<p>Authored by Leigh W. White, DITA Specialist at IXIASOFT, and published by XML Press, DITA for Print walks readers through developing a PDF customization from scratch.</p> <p>Here is an excerpt from the back cover:</p> <p>DITA for Print is for anyone who wants to learn how to create PDFs using the DITA Open Toolkit without learning everything there is to know about XSL-FO, XSLT, or XPath, or even about the DITA Open Toolkit itself. DITA for Print is written for non-programmers, by a non-programmer, and although it is written for people who have a good understanding of the DITA standard, you don\u2019t need a technical background to get custom PDFs up and running quickly.</p> <p>This is an excellent, long-needed resource that was initially developed in 2013 for DITA-OT 1.8.</p> <p>The second edition has been revised to cover DITA Open Toolkit Version 2, including customizing the DITA 1.3 troubleshooting topic type, localization strings, bookmarks, and the new back-cover functionality.</p> <p>Important:</p> <p>The first edition of DITA for Print recommended copying entire files from the PDF2 plug-in to your custom plug-in. The DITA-OT project \u2014 and the second edition of the book \u2014 do not recommend this practice.</p> <p>Instead, you should copy only the specific attribute sets and templates that you want to override. Following this practice will more cleanly isolate your customizations from the DITA-OT code, which will make it easier for you to update your plug-ins to work with future versions of DITA-OT.</p>"},{"location":"reference/books/#dita-for-practitioners-volume-1-architecture-and-technology-2012","title":"DITA for Practitioners: Volume 1, Architecture and Technology (2012)","text":"<p>Authored by Eliot Kimber and published by XML Press, this seminal resource contains a chapter dedicated to DITA Open Toolkit: \u201cRunning, Configuring, and Customizing the Open Toolkit\u201d. In addition to a robust overview of DITA-OT customization and extension, the chapter contains a detailed example of customizing a PDF plug-in to specify 7\" \u00d7 10\" paper size and custom fonts for body text and headers.</p> <p>The DITA-OT chapter in DITA for Practitioners: Volume 1 was written for DITA-OT 1.5.4, which was the latest stable version at the time it was written.</p> <p>Related information </p> <p>Customizing PDF output</p>"},{"location":"reference/common-html-processing/","title":"Common HTML-based processing","text":"<p>After the pre-processing operation runs, HTML-based builds each run a common series of Ant targets to generate HTML file. Navigation may be created before or after this set of common routines.</p> <p>After the pre-processing is completed, the following targets are run for all of the HTML-based builds:</p> <ul> <li>If the args.css parameter is passed to the build to add a CSS file, the <code>copy-css</code> target copies the CSS file from its source location to the relative location in the output directory.</li> <li>If a DITAVAL file is used, the <code>copy-revflag</code> target copies the default start- and end-revision flags into the output directory.</li> <li>The DITA topics are converted to HTML files. Unless the <code>@chunk</code> attribute was specified, each DITA topic in the temporary directory now corresponds to one HTML file. The <code>dita.inner.topics.xhtml</code> target is used to process documents that are in the map directory (or subdirectories of the map directory). The <code>dita.outer.topics.xhtml</code> target is used to process documents that are outside of the scope of the map, and thus might end up outside of the designated output directory. Various DITA-OT parameters control how documents processed by the <code>dita.outer.topics.xhtml</code> target are handled.</li> </ul>"},{"location":"reference/dita-spec-support/","title":"DITA specification support","text":"<p>DITA Open Toolkit 4.1 supports all versions of the OASIS DITA specification, including 1.0, 1.1, 1.2, and 1.3.</p>"},{"location":"reference/dita-v1-2-support/","title":"DITA 1.2 support","text":"<p>DITA Open Toolkit 4.1 supports the DITA 1.2 specification. While 1.2 is no longer the latest version of DITA, the grammar files (DTD and XML Schema) are still included with DITA-OT and content explicitly created for 1.2 continues to work as intended.</p> <p>Highlights of DITA 1.2 support in the toolkit include:</p> <ul> <li>Processing support for all new elements and attributes</li> <li>Link redirection and text replacement using <code>@keyref</code></li> <li>New <code>@processing-role</code> attribute in maps to allow references to topics that will not produce output artifacts</li> <li>New content reference extensions, including the ability to reference a range of elements, to push content into another topic, and to use keys for resolving a <code>@conref</code> attribute.</li> <li>The ability to filter content with controlled values and taxonomies using Subject Scheme Maps</li> <li>Processing support for both default versions of task (original, limited task, and the general task with fewer constraints on element order)</li> <li>Acronym and abbreviation support with the new <code>&lt;abbreviated-form&gt;</code> element</li> <li>New link grouping abilities available with headers in relationship tables</li> <li>OASIS Subcommittee specializations from the learning and machine industry domains (note that the core toolkit contains only basic processing support for these, but can be extended to produce related artifacts such as SCORM modules)</li> </ul> <p>To find detailed information about any of these features, see the specification documents at OASIS. The DITA Adoption Technical Committee has also produced several papers to describe individual new features. In general, the white papers are geared more towards DITA users and authors, while the specification is geared more towards tool implementors, though both may be useful for either audience. The DITA Adoption papers can be found from that committee\u2019s main web page.</p> <p>Related information </p> <p>SCORM Wrapper for DITA to SCORM</p> <p>DITA 1.2 Specification (XHTML)</p> <p>DITA 1.2 Specification (PDF)</p> <p>DITA 1.2 Specification (DITA source)</p> <p>OASIS DITA Technical Committee</p> <p>OASIS DITA Adoption Technical Committee</p>"},{"location":"reference/dita-v1-3-support/","title":"DITA 1.3 support","text":"<p>DITA Open Toolkit 4.1 provides processing support for the OASIS DITA 1.3 specification. Initial preview support for this specification was added in version 2.0 of the toolkit; version 2.2 extended this foundation to support key scopes and branch filtering along with additional DITA 1.3 features.</p> <p>Because DITA 1.3 is fully backwards compatible with previous DITA DTDs and schemas, DITA-OT provides the 1.3 materials as the default grammar files for processing. The XML Catalog resolution maps any references for unversioned DITA document types to the 1.3 versions. All processing ordinarily dependent on the 1.0, 1.1, or 1.2 definitions continues to work as usual, and any documents that make use of the newer DITA 1.3 elements or attributes will be supported with specific new processing.</p>"},{"location":"reference/dita-v1-3-support/#major-features-of-dita-13","title":"Major features of DITA 1.3","text":"<p>The following DITA 1.3 features are supported in DITA Open Toolkit.</p> <ul> <li>Scoped keys supported using DITA 1.3 <code>@keyscope</code> attribute</li> <li>Branch filtering using <code>&lt;ditavalref&gt;</code> elements in a map</li> <li>Support formatting based on new XML Mention elements, such as adding angle brackets around elements tagged with <code>&lt;xmlelement&gt;</code> and adding <code>@</code> before attributes tagged with <code>&lt;xmlatt&gt;</code></li> <li>New highlighting elements <code>&lt;line-through&gt;</code> and <code>&lt;overline&gt;</code></li> <li>Support for profiling based on <code>@deliveryTarget</code> attribute</li> <li>Support for the new <code>@orient</code> attribute for rotating tables</li> <li>Profile (filter or flag) based on groups within profiling attributes</li> <li><code>@keyref</code> and related key referencing attributes supported on <code>&lt;object&gt;</code></li> <li>New in-topic link syntax using <code>.</code> in place of the topic ID: <code>#./figure</code></li> <li>Support for additional new elements, such as the <code>&lt;div&gt;</code> element for grouping</li> <li>Support <code>@cascade</code> attribute in maps (processing defaults to the value <code>merge</code>, which is the default cascade operation described by the DITA specification)</li> </ul> <p>Note: For the latest status information on DITA 1.3-related features and fixes, see the DITA 1.3 label in the GitHub issues tracker.</p> <p>Related information </p> <p>Accessibility in DITA-OT</p> <p>RNG to DTD and XSD using the DITA Open Toolkit</p> <p>DITA 1.3 Part 3 latest errata version: All-Inclusive Edition (HTML)</p> <p>DITA 1.3 Part 3 latest errata version: All-Inclusive Edition (PDF)</p> <p>DITA Version 1.3 Errata 01 (Distribution ZIP of the DITA source)</p> <p>OASIS DITA Technical Committee</p> <p>OASIS DITA Adoption Technical Committee</p>"},{"location":"reference/dita-v2-0-support/","title":"DITA 2.0 preview support","text":"<p>DITA Open Toolkit 4.1 provides a preview of features for the upcoming OASIS DITA 2.0 specification. This preliminary processing support is provided on the basis of the latest drafts of the DITA 2.0 DTD and RELAX\u00a0NG grammar files from OASIS (as of April 26, 2023).</p> <p>DITA documents that reference the draft grammar files can be parsed, and where features overlap with DITA 1.3, those features will work as expected.</p>"},{"location":"reference/dita-v2-0-support/#dita-ot-35","title":"DITA-OT 3.5","text":"<p>DITA-OT 3.5 provided an initial preview of DITA 2.0 features.</p> <ul> <li> <p>The new <code>&lt;include&gt;</code> element can be used to reference text or XML content from other files. In addition to the processing mandated by the specification, DITA-OT also supports the character set definition and line range extraction options previously provided for <code>&lt;coderef&gt;</code> elements (see Extended codeblock processing).</p> </li> <li> <p>The new <code>@specializations</code> attribute, which replaces the DITA 1.x <code>@domains</code> attribute, can now be used as an alternative method of declaring specialized attributes.</p> </li> <li> <p>The <code>@outputclass</code> attribute can now be specified as a flagging behavior in DITAVAL files. This allows you to flag an element with a CSS class keyword that will be added to the <code>@class</code> attribute value in the generated HTML. Output classes allow you to pick up pre-defined styles from existing web frameworks, and are more easily overridden with custom CSS files than the inline <code>@style</code> attributes generated by DITA 1.x flagging options such as <code>@color</code> and <code>@backcolor</code>.</p> </li> <li> <p>Titles can now be specified on simple tables, and <code>&lt;simpletable&gt;</code> entries now support row and column spanning attributes.</p> </li> <li> <p>Where DITA 1.x defined conflicting <code>@class</code> values for <code>&lt;linktext&gt;</code>, <code>&lt;shortdesc&gt;</code>, and <code>&lt;searchtitle&gt;</code> in maps and topics, the new draft of DITA 2.0 uses the topic-based <code>@class</code> value in all cases. Processing is updated to recognize the updated value when these elements are used in maps.</p> </li> </ul>"},{"location":"reference/dita-v2-0-support/#dita-ot-36","title":"DITA-OT 3.6","text":"<p>DITA-OT 3.6 added support for additional DITA 2.0 features.</p> <ul> <li>Where earlier DITA versions relied on the <code>&lt;object&gt;</code> element to embed media in DITA source files, DITA 2.0 provides new <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> elements that correspond to their HTML5 equivalents.</li> <li>For HTML5 compatibility, the new emphasis domain adds support for the <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code> elements in addition to the existing <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code> elements in the highlighting domain.</li> <li>The troubleshooting domain has been updated with additional constructs that can be used to provide detailed diagnostic information.</li> <li>Several obsolete elements and attributes have been removed from DITA 2.0, including:<ul> <li><code>&lt;boolean&gt;</code></li> <li><code>&lt;data-about&gt;</code></li> <li><code>&lt;indextermref&gt;</code></li> <li><code>@alt</code> on <code>&lt;image&gt;</code></li> <li><code>@navtitle</code> on <code>&lt;topicref&gt;</code></li> <li><code>@query</code> on <code>&lt;topicref&gt;</code></li> <li><code>@refcols</code> on <code>&lt;simpletable&gt;</code></li> <li><code>@xtrc</code></li> <li><code>@xtrf</code></li> </ul> </li> </ul>"},{"location":"reference/dita-v2-0-support/#dita-ot-37","title":"DITA-OT 3.7","text":"<p>DITA-OT 3.7 added support for additional DITA 2.0 features.</p> <ul> <li> <p>The new \u201ccombine\u201d chunk action can be used to merge content into new output documents.</p> <p>When the <code>@chunk</code> attribute is set to <code>combine</code> on a map, branch, or map reference, all source DITA documents grouped by that reference will be combined into a single document in the output.</p> <p>(Support for the DITA 2.0 \u201csplit\u201d chunk action has not yet been implemented.)</p> <p>Note: The new chunk action is only applied if the root map has a DITA 2.0 doctype, such as:</p> <p><code>&lt;!DOCTYPE map PUBLIC \"-//OASIS//DTD DITA 2.0 Map//EN\" \"map.dtd\"&gt;</code></p> <p>If the root map uses an unversioned (or 1.x) doctype, DITA 1.3 processing will be applied, and 2.0 chunk actions will be ignored. With a 2.0 root map, any 1.3 chunk actions are ignored.</p> </li> <li> <p>The new <code>&lt;keytext&gt;</code> element can be used to define variable text referenced by <code>@keyref</code>. Although the DITA 2.0 grammar files in this release support the use of <code>&lt;keytext&gt;</code> in authored files, DITA-OT 3.7 does not yet have processing support for the element.</p> </li> <li>The new alternative titles domain and <code>&lt;titlealt&gt;</code> element (separate from the <code>&lt;titlealts&gt;</code> element in DITA 1.3) may be used when you need to use an alternate title, such as for a navigation title, search title, link title, subtitle, or title hint.</li> <li>The new <code>@appid-role</code> attribute is available on <code>&lt;resourceid&gt;</code>. The default is <code>context-sensitive-help</code>.</li> <li>The <code>@keyref</code> attribute was added to all elements in the highlighting domain and the new emphasis domain.</li> <li>The <code>@href</code>, <code>@format</code>, and <code>@scope</code> attributes are now used consistently for linking elements.</li> <li>Several obsolete elements and attributes have been removed from DITA 2.0, including:<ul> <li><code>&lt;anchor&gt;</code></li> <li><code>&lt;anchorref&gt;</code></li> <li><code>&lt;data-about&gt;</code></li> <li><code>&lt;hasInstance&gt;</code></li> <li><code>&lt;hasKind&gt;</code></li> <li><code>&lt;hasNarrower&gt;</code></li> <li><code>&lt;hasPart&gt;</code></li> <li><code>&lt;hasRelated&gt;</code></li> <li><code>&lt;longquoteref&gt;</code></li> <li><code>&lt;relatedSubjects&gt;</code></li> <li><code>&lt;sectiondiv&gt;</code></li> <li><code>&lt;subjectRel&gt;</code></li> <li><code>&lt;subjectRelHeader&gt;</code></li> <li><code>&lt;subjectRelTable&gt;</code></li> <li><code>&lt;subjectRole&gt;</code></li> <li><code>@anchorref</code> from <code>&lt;map&gt;</code></li> <li><code>@copy-to</code></li> <li><code>@href</code>, <code>@format</code>, <code>@type</code>, <code>@scope</code>, <code>@reftitle</code> from <code>&lt;lq&gt;</code> (<code>@keyref</code> remains)</li> <li><code>@locktitle</code></li> <li><code>@longdescref</code></li> <li><code>@mapkeyref</code></li> <li><code>@print</code></li> <li><code>@query</code></li> <li><code>@specentry</code> from <code>&lt;stentry&gt;</code></li> <li><code>@spectitle</code></li> </ul> </li> </ul>"},{"location":"reference/dita-v2-0-support/#dita-ot-40","title":"DITA-OT 4.0","text":"<p>DITA-OT 4.0 added support for additional DITA 2.0 features.</p> <ul> <li> <p>The new \u201csplit\u201d chunk action can be used to break content into new output documents. #3942</p> <p>When the <code>@chunk</code> attribute is set to <code>split</code> on a map, branch, or map reference, each topic from the referenced source document will be rendered as an individual document.</p> <p>Note: The new chunk action is only applied if the root map has a DITA 2.0 doctype, such as:</p> <p><code>&lt;!DOCTYPE map PUBLIC \"-//OASIS//DTD DITA 2.0 Map//EN\" \"map.dtd\"&gt;</code></p> <p>If the root map uses an unversioned (or 1.x) doctype, DITA 1.3 processing will be applied, and 2.0 chunk actions will be ignored. With a 2.0 root map, any 1.3 chunk actions are ignored.</p> </li> </ul>"},{"location":"reference/dita-v2-0-support/#dita-ot-41","title":"DITA-OT 4.1","text":"<p>DITA-OT 4.1 adds support for additional DITA 2.0 features.</p> <ul> <li> <p>DITA 2.0 splits the programming and syntax domains (so you can use one without the other).</p> <p>The syntax diagram elements move from the programming domain to a new syntax diagram domain, which results in new class attribute tokens. All elements and content models remain the same.</p> <p>HTML5 and PDF processing has been updated for DITA-OT 4.1 to support syntax diagram elements from DITA 2.0, so that processing matches what those elements did in DITA 1.3. #4082</p> </li> <li> <p>DITA 2.0 removes the xNAL domain and classification domains. #4177</p> </li> </ul> <p>Note: Other new or revised features proposed for DITA 2.0 are not yet supported. Additional features will be implemented in future versions of DITA-OT as the specification evolves.</p> <p>Tip: For the latest status information on DITA 2.0-related features and fixes, see the DITA 2.0 label in the GitHub issues tracker.</p> <p>Related information </p> <p>OASIS DITA Technical Committee</p>"},{"location":"reference/docs-dita-features/","title":"DITA features in the documentation","text":"<p>DITA Open Toolkit uses various recent DITA features in the project documentation.</p> <p>The source files for the DITA-OT documentation include examples of the following DITA features (among others):</p> <ul> <li>subjectScheme classification for controlling available attributes</li> <li>profiling and branch filtering (novice/expert content)</li> <li>extending topics with conref push</li> <li>keys and key references</li> <li>XML mention domain</li> </ul>"},{"location":"reference/docs-dita-features/#subject-schemes","title":"Subject schemes","text":"<p>Various topics, sections and elements in the docs are profiled by audience:</p> <pre><code>&lt;li id=\"novice-variables-last\" audience=\"novice\"&gt;\n  &lt;p id=\"common-format-info\"&gt;\n    &lt;varname&gt;format&lt;/varname&gt; is the output format (transformation type). This argument corresponds to the\n    common parameter &lt;xref keyref=\"parameters-base/transtype\"/&gt;. Use the same values as for the\n      &lt;parmname&gt;transtype&lt;/parmname&gt; build parameter, for example &lt;option&gt;html5&lt;/option&gt; or\n      &lt;option&gt;pdf&lt;/option&gt;.&lt;/p&gt;\n&lt;/li&gt;\n</code></pre> <p>An \u201caudience\u201d subject scheme controls the values that are available for the <code>@audience</code> attribute:</p> <pre><code>&lt;subjectdef keys=\"audience\"&gt;\n  &lt;subjectdef keys=\"novice\"/&gt;\n  &lt;subjectdef keys=\"expert\"/&gt;\n  &lt;subjectdef keys=\"xslt-customizer\"/&gt;\n&lt;/subjectdef&gt;\n</code></pre> <p>A dedicated subject scheme map defines several series of permissible values for <code>@outputclass</code> attributes, which apply styling to elements on the project website, enable extended codeblock processing such as whitespace visualization and line numbering in PDF output, or trigger HTML5-compliant syntax highlighting via prism.js.</p> <pre><code>&lt;schemeref href=\"subjectscheme-outputclass.ditamap\"/&gt;\n</code></pre>"},{"location":"reference/docs-dita-features/#branch-filtering-re-using-profiled-content","title":"Branch filtering: re-using profiled content","text":"<p>Installing DITA-OT pulls a subset of the build description from using the <code>dita</code> command, filtered to display only content deemed suitable for novice users under Building output:</p> <pre><code>&lt;topicref href=\"using-dita-command.dita\"\n          keys=\"first-build-using-dita-command\" locktitle=\"yes\"&gt;\n  &lt;topicmeta&gt;\n    &lt;navtitle&gt;Building output&lt;/navtitle&gt;\n  &lt;/topicmeta&gt;\n  &lt;ditavalref href=\"../resources/novice.ditaval\"&gt;\n    &lt;ditavalmeta&gt;\n      &lt;dvrResourcePrefix&gt;first-build-&lt;/dvrResourcePrefix&gt;\n    &lt;/ditavalmeta&gt;\n  &lt;/ditavalref&gt;\n&lt;/topicref&gt;\n</code></pre> <p>The same content appears later in Using the dita command with additional information on arguments, options and examples.</p> <pre><code>&lt;topicref href=\"using-dita-command.dita\"\n          keys=\"build-using-dita-command\" locktitle=\"yes\"&gt;\n  &lt;topicmeta&gt;\n    &lt;navtitle&gt;Using the &lt;cmdname&gt;dita&lt;/cmdname&gt; command&lt;/navtitle&gt;\n  &lt;/topicmeta&gt;\n  &lt;ditavalref href=\"../resources/expert.ditaval\"&gt;\n    &lt;ditavalmeta&gt;\n      &lt;dvrResourcePrefix&gt;build-&lt;/dvrResourcePrefix&gt;\n    &lt;/ditavalmeta&gt;\n  &lt;/ditavalref&gt;\n</code></pre>"},{"location":"reference/docs-dita-features/#conref-push","title":"Conref push","text":"<p>The docs build uses the conref push mechanism (with the <code>pushreplace</code>, <code>mark</code>, and <code>pushafter</code> conactions) to extend the parameter descriptions embedded in the default plug-ins:</p> <pre><code>&lt;plentry id=\"args.csspath\"&gt;\n  &lt;pt&gt;\n    &lt;parmname&gt;args.csspath&lt;/parmname&gt;\n  &lt;/pt&gt;\n  &lt;pd conaction=\"pushreplace\" conref=\"parameters-html5.dita#html5/args.csspath.desc\"&gt;\n    &lt;div conref=\"./ant-parameters-details.dita#base-html/args.csspath.desc\"/&gt;\n  &lt;/pd&gt;\n  &lt;pd conaction=\"mark\" conref=\"parameters-html5.dita#html5/args.csspath.desc\"/&gt;\n  &lt;pd conaction=\"pushafter\"&gt;\n    &lt;div conref=\"./ant-parameters-details.dita#base-html/args.csspath.details\"/&gt;\n  &lt;/pd&gt;\n&lt;/plentry&gt;\n</code></pre> <p>The pushed content appears in the output after the default description. (See HTML-based output parameters.)</p> <p>Tip: You could also use the same mechanism to extend the documentation with custom information that applies only to your company\u2019s toolkit distribution.</p>"},{"location":"reference/docs-dita-features/#keys-and-key-references","title":"Keys and key references","text":"<p>The <code>key-definitions.ditamap</code> defines keys for version references, re-usable links, etc.</p> <p>This key definition defines the maintenance release version:</p> <pre><code>&lt;keydef keys=\"maintenance-version\"&gt;\n  &lt;topicmeta&gt;\n    &lt;keywords&gt;\n      &lt;keyword&gt;4.1.2&lt;/keyword&gt;\n    &lt;/keywords&gt;\n  &lt;/topicmeta&gt;\n&lt;/keydef&gt;\n</code></pre> <p>In topics, the keyword is used in place of hard-coded version references:</p> <pre><code>&lt;title&gt;DITA Open Toolkit &lt;keyword keyref=\"maintenance-version\"/&gt; Release Notes&lt;/title&gt;\n</code></pre>"},{"location":"reference/docs-dita-features/#xml-mention-domain","title":"XML mention domain","text":"<p>The docs use the XML mention domain to mark up XML elements and attributes:</p> <pre><code>&lt;li id=\"1777\"&gt;\n  DITA 1.3: Initial support has been added for the &lt;xmlatt&gt;orient&lt;/xmlatt&gt;\n  attribute on &lt;xmlelement&gt;table&lt;/xmlelement&gt; elements. These changes allow\n  Antenna House Formatter to render tables in landscape mode when the\n  &lt;xmlatt&gt;orient&lt;/xmlatt&gt; attribute is set to &lt;option&gt;land&lt;/option&gt;. [\u2026]\n&lt;/li&gt;\n</code></pre> <p>When the toolkit generates output for the sample above:</p> <ul> <li>the XML element name is wrapped in angle brackets as <code>&lt;table&gt;</code></li> <li>the attribute name is prefixed with an \u201cat\u201d sign as <code>@orient</code></li> </ul>"},{"location":"reference/eclipsehelp-processing/","title":"Eclipse help processing","text":"<p>The eclipsehelp transformation generates XHTML-based output and files that are needed to create an Eclipse Help system plug-in. Once the normal XHTML process has run, the <code>dita.map.eclipse</code> target is used to create a set of control files and navigation files.</p> <p>Eclipse uses multiple files to control the plug-in behavior. Some of these control files are generated by the build, while others might be created manually. The following Ant targets control the Eclipse help processing:</p> <ul> <li> <p><code>dita.map.eclipse.init</code></p> <p>Sets up various default properties</p> </li> <li> <p><code>dita.map.eclipse.toc</code></p> <p>Creates the XML file that defines an Eclipse table of contents</p> </li> <li> <p><code>dita.map.eclipse.index</code></p> <p>Creates the sorted XML file that defines an Eclipse index</p> </li> <li> <p><code>dita.map.eclipse.plugin</code></p> <p>Creates the <code>plugin.xml</code> file that controls the behavior of an Eclipse plug-in</p> </li> <li> <p><code>dita.map.eclipse.plugin.properties</code></p> <p>Creates a Java properties file that sets properties for the plug-in, such as name and version information</p> </li> <li> <p><code>dita.map.eclipse.manifest.file</code></p> <p>Creates a <code>MANIFEST.MF</code> file that contains additional information used by Eclipse</p> </li> <li> <p><code>copy-plugin-files</code></p> <p>Checks for the presence of certain control files in the source directory, and copies those found to the output directory</p> </li> <li> <p><code>dita.map.eclipse.fragment.language.init</code></p> <p>Works in conjunction with the <code>dita.map.eclipse.fragment.language.country.init</code> and <code>dita.map.eclipse.fragment.error</code> targets to control Eclipse fragment files, which are used for versions of a plug-in created for a new language or locale</p> </li> </ul> <p>Several of the targets listed above have matching templates for processing content that is located outside of the scope of the map directory, such as <code>dita.out.map.eclipse.toc</code>.</p>"},{"location":"reference/extended-functionality/","title":"Extended codeblock processing","text":"<p>DITA-OT provides additional processing support beyond that which is mandated by the DITA specification. These extensions can be used to define character encodings or line ranges for code references, normalize indendation, add line numbers or display whitespace characters in code blocks.</p>"},{"location":"reference/extended-functionality/#character-set-definition","title":"Character set definition","text":"<p>For <code>&lt;coderef&gt;</code> elements, DITA-OT supports defining the code reference target file encoding using the <code>@format</code> attribute. The supported format is:</p> <pre><code>format (\";\" space* \"charset=\" charset)?\n</code></pre> <p>If a character set is not defined, the system default character set will be used. If the character set is not recognized or supported, the DOTJ052E error is thrown and the system default character set is used as a fallback.</p> <pre><code>&lt;coderef href=\"unicode.txt\" format=\"txt; charset=UTF-8\"/&gt;\n</code></pre> <p>As of DITA-OT 3.3, the default character set for code references can be changed by adding the default.coderef-charset key to the configuration.properties file:</p> <pre><code>default.coderef-charset = ISO-8859-1\n</code></pre> <p>The character set values are those supported by the Java Charset class.</p> <p>Note: As of DITA-OT 4.0, the default character set for code references has been changed from the system default encoding to UTF-8.</p>"},{"location":"reference/extended-functionality/#line-range-extraction","title":"Line range extraction","text":"<p>Code references can be limited to extract only a specified line range by defining the <code>line-range</code> pointer in the URI fragment. The format is:</p> <pre><code>uri (\"#line-range(\" start (\",\" end)? \")\" )?\n</code></pre> <p>Start and end line numbers start from 1 and are inclusive. If the end range is omitted, the range ends on the last line of the file.</p> <pre><code>&lt;coderef href=\"Parser.scala#line-range(5,10)\" format=\"scala\"/&gt;\n</code></pre> <p>Only lines from 5 to 10 will be included in the output.</p>"},{"location":"reference/extended-functionality/#rfc-5147","title":"RFC 5147","text":"<p>DITA-OT also supports the line position and range syntax from RFC 5147. The format for line range is:</p> <pre><code>uri (\"#line=\" start? \",\" end? )?\n</code></pre> <p>Start and end line numbers start from 0 and are inclusive and exclusive, respectively. If the start range is omitted, the range starts from the first line; if the end range is omitted, the range ends on the last line of the file. The format for line position is:</p> <pre><code>uri (\"#line=\" position )?\n</code></pre> <p>The position line number starts from 0.</p> <pre><code>&lt;coderef href=\"Parser.scala#line=4,10\" format=\"scala\"/&gt;\n</code></pre> <p>Only lines from 5 to 10 will be included in the output.</p>"},{"location":"reference/extended-functionality/#line-range-by-content","title":"Line range by content","text":"<p>Instead of specifying line numbers, you can also select lines to include in the code reference by specifying keywords (or \u201ctokens\u201d) that appear in the referenced file.</p> <p>DITA-OT supports the <code>token</code> pointer in the URI fragment to extract a line range based on the file content. The format for referencing a range of lines by content is:</p> <pre><code>uri (\"#token=\" start? (\",\" end)? )?\n</code></pre> <p>Lines identified using start and end tokens are exclusive: the lines that contain the start token and end token will be not be included. If the start token is omitted, the range starts from the first line in the file; if the end token is omitted, the range ends on the last line of the file.</p> <p>Given a Haskell source file named <code>fact.hs</code> with the following content,</p> <pre><code>-- START-FACT\nfact :: Int -&gt; Int\nfact 0 = 1\nfact n = n * fact (n-1)\n-- END-FACT\nmain = print $ fact 7\n</code></pre> <p>a range of lines can be referenced as:</p> <pre><code>&lt;coderef href=\"fact.hs#token=START-FACT,END-FACT\"/&gt;\n</code></pre> <p>to include the range of lines that follows the <code>START-FACT</code> token on Line 1, up to (but not including) the line that contains the <code>END-FACT</code> token (Line 5). The resulting <code>&lt;codeblock&gt;</code> would contain lines 2\u20134:</p> <pre><code>fact :: Int -&gt; Int\nfact 0 = 1\nfact n = n * fact (n-1)\n</code></pre> <p>Tip: This approach can be used to reference code samples that are frequently edited. In these cases, referencing line ranges by line number can be error-prone, as the target line range for the reference may shift if preceding lines are added or removed. Specifying ranges by line content makes references more robust, as long as the <code>token</code> keywords are preserved when the referenced resource is modified.</p>"},{"location":"reference/extended-functionality/#whitespace-normalization","title":"Whitespace normalization","text":"<p>DITA-OT can adjust the leading whitespace in code blocks to remove excess indentation and keep lines short. Given an XML snippet in a codeblock with lines that all begin with spaces (indicated here as dots \u201c\u00b7\u201d),</p> <pre><code>\u00b7\u00b7&lt;subjectdef keys=\"audience\"&gt;\n\u00b7\u00b7\u00b7\u00b7&lt;subjectdef keys=\"novice\"/&gt;\n\u00b7\u00b7\u00b7\u00b7&lt;subjectdef keys=\"expert\"/&gt;\n\u00b7\u00b7&lt;/subjectdef&gt;\n</code></pre> <p>DITA-OT can remove the leading whitespace that is common to all lines in the code block. To trim the excess space, set the <code>@outputclass</code> attribute on the <code>&lt;codeblock&gt;</code> element to include the <code>normalize-space</code> keyword.</p> <p>In this case, two spaces (\u201c\u00b7\u00b7\u201d) would be removed from the beginning of each line, shifting content to the left by two characters, while preserving the indentation of lines that contain additional whitespace (beyond the common indent):</p> <pre><code>&lt;subjectdef keys=\"audience\"&gt;\n\u00b7\u00b7&lt;subjectdef keys=\"novice\"/&gt;\n\u00b7\u00b7&lt;subjectdef keys=\"expert\"/&gt;\n&lt;/subjectdef&gt;\n</code></pre>"},{"location":"reference/extended-functionality/#whitespace-visualization-pdf","title":"Whitespace visualization (PDF)","text":"<p>DITA-OT can be set to display the whitespace characters in code blocks to visualize indentation in PDF output.</p> <p>To enable this feature, set the <code>@outputclass</code> attribute on the <code>&lt;codeblock&gt;</code> element to include the <code>show-whitespace</code> keyword.</p> <p>When PDF output is generated, space characters in the code will be replaced with a middle dot or \u201cinterpunct\u201d character (\u00a0<code>\u00b7</code>\u00a0); tab characters are replaced with a rightwards arrow and three spaces (\u00a0<code>\u2192</code>\u00a0).</p> <pre><code>    for i in 0..10 {\n        println(i)\n    }\n</code></pre>"},{"location":"reference/extended-functionality/#line-numbering-pdf","title":"Line numbering (PDF)","text":"<p>DITA-OT can be set to add line numbers to code blocks to make it easier to distinguish specific lines.</p> <p>To enable this feature, set the <code>@outputclass</code> attribute on the <code>&lt;codeblock&gt;</code> element to include the <code>show-line-numbers</code> keyword.</p> <pre><code>    for i in 0..10 {\n        println(i)\n    }\n</code></pre> <p>Related information </p> <p>Resolve topic fragments and code references (topic-fragment)</p>"},{"location":"reference/flagging-migration/","title":"XHTML migration for flagging updates in DITA-OT 1.7","text":"<p>This topic is primarily of interest to developers with XHTML transform overrides written prior to DITA-OT 1.7. Due to significant changes in the flagging process with the 1.7 release, some changes may be needed to make overrides work properly with DITAVAL-based flagging. The new design is significantly simpler than the old design; in many cases, migration will consist of deleting old code that is no longer needed.</p>"},{"location":"reference/flagging-migration/#which-xhtml-overrides-need-to-migrate","title":"Which XHTML overrides need to migrate?","text":"<p>If your override does not contain any code related to DITAVAL flagging, then there is nothing to migrate.</p> <p>If your builds do not make use of DITAVAL-based flagging, but call the deprecated flagging templates, then you should override but there is little urgency. You will not see any difference in the output, but those templates will be removed in a future release.</p> <p>If you do make use of DITAVAL-based flagging, try using your override with 1.7. Check the elements you override:</p> <ol> <li>In some cases flags may be doubled. This will be the case if you call routines such as <code>start-flagit</code>.</li> <li>In some cases flags may be removed. This will be the case if you call shortcut routines such as <code>revtext</code> or <code>revblock</code>.</li> <li>In other cases, flags may still appear properly, in which case migration is less urgent.</li> </ol> <p>For any override that needs migration, please see the instructions that follow.</p>"},{"location":"reference/flagging-migration/#deprecated-templates-in-dita-ot-17","title":"Deprecated templates in DITA-OT 1.7","text":"<p>All of the old DITAVAL-based templates are deprecated in DITA-OT 1.7. If your overrides include any of the following templates, they should be migrated for the new release; in many cases the templates below will not have any effect on your output, but all instances should be migrated.</p> <ul> <li>The <code>gen-style</code> template used to add CSS styling</li> <li>The <code>start-flagit</code> and <code>end-flagit</code> templates used to generate image flags based on property attributes like <code>@audience</code></li> <li>The <code>start-revflag</code> and <code>end-revflag</code> templates, used to generate images for active revisions</li> <li>Shortcut templates that group these templates into a single call, such as:<ul> <li><code>start-flags-and-rev</code> and <code>end-flags-and-rev</code>, used to combine flags and revisions into one call</li> <li><code>revblock</code> and <code>revtext</code>, both used to output start revisions, element content, and end revisions</li> <li>The modes <code>outputContentsWithFlags</code> and <code>outputContentsWithFlagsAndStyle</code>, both used to combine processing for property/revision flags with content processing</li> </ul> </li> <li>All other templates that make use of the <code>$flagrules</code> variable, which is no longer used in any of the DITA-OT 1.7 code</li> <li>All templates within <code>flag.xsl</code> that were called from the templates listed above</li> <li>Element processing handled with mode=\"elementname-fmt\", such as <code>mode=\"ul-fmt\"</code> for processing unordered lists and <code>mode=\"section-fmt\"</code> for sections.</li> </ul>"},{"location":"reference/flagging-migration/#what-replaces-the-templates","title":"What replaces the templates?","text":"<p>The new flagging design described in the preprocess design section now adds literal copies of relevant DITAVAL elements, along with CSS-based flagging information, into the relevant section of the topic. This allows most flags to be processed in document order; in addition, there is never a need to read the DITAVAL, interpret CSS, or evaluate flagging logic. The <code>htmlflag.xsl</code> file contains a few rules to match and process the start/end flags; in most cases, all code to explicitly process flags can be deleted.</p> <p>For example, the common logic for most element rules before DITA-OT 1.7 could be boiled down to the following:</p> <ol> <li>Match element</li> <li>Create <code>flagrules</code> variable by reading DITAVAL for active flags</li> <li>Output start tag such as <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code></li> <li>Call <code>commonattributes</code> and ID processing</li> <li>Call <code>gen-style</code> with <code>$flagrules</code>, to create DITAVAL-based CSS</li> <li>Call <code>start-flagit</code> with <code>$flagrules</code>, to create start flag images</li> <li>Call <code>start-revflag</code> with <code>$flagrules</code>, to create start revision images</li> <li>Output contents</li> <li>Call <code>end-revflag</code> with <code>$flagrules</code>, to create end revision images</li> <li>Call <code>end-flagit</code> with <code>$flagrules</code>, to create end flag images</li> <li>Output end tag such as <code>&lt;/div&gt;</code> or <code>&lt;/span&gt;</code></li> </ol> <p>In DITA-OT 1.7, style and images are typically handled with XSLT fallthrough processing. This removes virtually all special flag coding from element rules, because flags are already part of the document and processed in document order.</p> <p>The sample above is reduced to:</p> <ol> <li>Match element</li> <li>Output start tag such as <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code></li> <li>Call <code>commonattributes</code> and ID processing</li> <li>Output contents</li> <li>Output end tag such as <code>&lt;/div&gt;</code> or <code>&lt;/span&gt;</code></li> </ol>"},{"location":"reference/flagging-migration/#migrating-gen-style-named-template","title":"Migrating <code>gen-style</code> named template","text":"<p>Calls to the <code>gen-style</code> template should be deleted. There is no need to replace this call for most elements.</p> <p>The <code>gen-style</code> template was designed to read a DITAVAL file, find active style-based flagging (such as colored or bold text), and add it to the generated <code>@style</code> attribute in HTML.</p> <p>With DITA-OT 1.7, the style is calculated in the pre-process flagging module. The result is created as <code>@outputclass</code> on a <code>&lt;ditaval-startprop&gt;</code> sub-element. The <code>commonattributes</code> template now includes a line to process that value; the result is that for every element that calls <code>commonattributes</code>, DITAVAL style will be processed when needed. Because virtually every element includes a call to this common template, there is little chance that your override needs to explicitly process the style. The new line in <code>commonattributes</code> that handles the style is:</p> <pre><code>&lt;xsl:apply-templates select=\"*[contains(@class,' ditaot-d/ditaval-startprop ')]/@outputclass\" mode=\"add-ditaval-style\"/&gt;\n</code></pre>"},{"location":"reference/flagging-migration/#migrating-start-flagit-start-revflag-end-flagit-and-end-flagit-named-templates","title":"Migrating <code>start-flagit</code>, <code>start-revflag</code>, <code>end-flagit</code>, and <code>end-flagit</code> named templates","text":"<p>Calls to these templates fall into two general groups.</p> <p>If the flow of your element rule is to create a start tag like <code>&lt;div&gt;</code>, <code>start-flagit</code>/<code>start-revflag</code>, process contents, <code>end-revflag</code>/<code>end-flagit</code>, end tag \u2014 you just need to delete the calls to these templates. Flags will be generated simply by processing the element contents in document order.</p> <p>If the flow of your element rule processes flags outside of the normal document-order. There are generally two reasons this is done. The first case is for elements like <code>&lt;ol&gt;</code>, where flags must appear before the <code>&lt;ol&gt;</code> in order to create valid XHTML. The second is for elements like <code>&lt;section&gt;</code>, where start flags are created, followed by the title or some generated text, element contents, and finally end flags. In either of these cases, support for processing flags in document order is disabled, so they must be explicitly processed out-of-line.</p> <p>This is done with the following two lines (one for start flag/revision, one for end flag/revision):</p> <ul> <li> <p>Create starting flag and revision images:</p> <p><code>language-xml &lt;xsl:apply-templates select=\"*[contains(@class,' ditaot-d/ditaval-startprop ')]\" mode=\"out-of-line\"/&gt;</code></p> </li> <li> <p>Create ending flag and revision images:</p> <p><code>language-xml &lt;xsl:apply-templates select=\"*[contains(@class,' ditaot-d/ditaval-endprop ')]\" mode=\"out-of-line\"/&gt;</code></p> </li> </ul> <p>For example, the following lines are used in DITA-OT 1.7 to process the <code>&lt;ul&gt;</code> element (replacing the 29 lines used in DITA-OT 1.6):</p> <pre><code>&lt;xsl:template match=\"*[contains(@class,' topic/ul ')]\"&gt;\n  **&amp;lt;xsl:apply-templates select=\"\\*\\[contains\\(@class,' ditaot-d/ditaval-startprop '\\)\\]\" mode=\"out-of-line\"/&amp;gt;**\n  &lt;xsl:call-template name=\"setaname\"/&gt;\n  &lt;ul&gt;\n    &lt;xsl:call-template name=\"commonattributes\"/&gt;\n    &lt;xsl:apply-templates select=\"@compact\"/&gt;\n    &lt;xsl:call-template name=\"setid\"/&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/ul&gt;\n  **&amp;lt;xsl:apply-templates select=\"\\*\\[contains\\(@class,' ditaot-d/ditaval-endprop '\\)\\]\" mode=\"out-of-line\"/&amp;gt;**\n  &lt;xsl:value-of select=\"$newline\"/&gt;\n&lt;/xsl:template&gt;\n</code></pre>"},{"location":"reference/flagging-migration/#migrating-start-flags-and-rev-and-end-flags-and-rev","title":"Migrating <code>start-flags-and-rev</code> and <code>end-flags-and-rev</code>","text":"<ul> <li><code>start-flags-and-rev</code> is equivalent to calling <code>start-flagit</code> followed by <code>start-revflag</code>; it should be migrated as in the previous section.</li> <li><code>end-flags-and-rev</code> is equivalent to calling <code>end-revflag</code> followed by <code>end-flagit</code>; it should be migrated as in the previous section.</li> </ul>"},{"location":"reference/flagging-migration/#migrating-revblock-and-revtext","title":"Migrating <code>revblock</code> and <code>revtext</code>","text":"<p>Calls to these two templates can be replaced with a simple call to <code>&lt;xsl:apply-templates/&gt;</code>.</p>"},{"location":"reference/flagging-migration/#migrating-modes-outputcontentswithflags-and-outputcontentswithflagsandstyle","title":"Migrating modes <code>outputContentsWithFlags</code> and <code>outputContentsWithFlagsAndStyle</code>","text":"<p>Processing an element with either of these modes can be replaced with a simple call to <code>&lt;xsl:apply-templates/&gt;</code>.</p>"},{"location":"reference/flagging-migration/#migrating-modeelementname-fmt","title":"Migrating <code>mode=\"elementname-fmt\"</code>","text":"<p>Prior to DITA-OT 1.7, many elements were processed with the following logic:</p> <pre><code>Match element\n    Set variable to determine if revisions are active and $DRAFT is on\n    If active\n        create division with rev style\n            process element with mode=\"elementname-fmt\"\n        end division\n    Else\n        process element with mode=\"elementname-fmt\"\n\nMatch element with mode=\"elementname-fmt\"\n    Process as needed\n</code></pre> <p>Beginning with DITA-OT 1.7, styling from revisions is handled automatically with the <code>commonattributes</code> template. This means there is no need for the extra testing, or the indirection to <code>mode=\"elementname-fmt\"</code>. These templates are deprecated, and element processing will move into the main element rule. Overrides that include this indirection may remove it; overrides should also be sure to match the default rule, rather than matching with <code>mode=\"elementname-fmt\"</code>.</p>"},{"location":"reference/glossary/","title":"Glossary","text":"<p>Certain terms have particular meaning in the context of the DITA Open Toolkit project.</p>"},{"location":"reference/glossary/#argument","title":"argument","text":"<p>Required parameter passed to the Ant process or <code>dita</code> command.</p>"},{"location":"reference/glossary/#dita-open-toolkit","title":"DITA Open Toolkit","text":"<p>The open-source publishing engine for content authored in the Darwin Information Typing Architecture.</p>"},{"location":"reference/glossary/#dita-ot","title":"DITA-OT","text":"<p>Note: Treat as a proper noun; do not precede with the definite article.</p>"},{"location":"reference/glossary/#dost","title":"DOST","text":"<p>Note: Deprecated acronym for \u201cDITA Open __S__ource Toolkit\u201d. Use DITA-OT instead.</p>"},{"location":"reference/glossary/#extension-point","title":"extension point","text":"<p>Pre-defined interface that can be added to a plug-in to allow other plug-ins to extend or customize portions of its functionality. An extendable feature is defined by declaring an <code>&lt;extension-point&gt;</code> element in the <code>plugin.xml</code> file. Other plug-ins can then override the default behavior by defining custom code that runs when this extension point is called.</p>"},{"location":"reference/glossary/#option","title":"option","text":"<p>Discretionary parameter passed to the Ant process or <code>dita</code> command.</p>"},{"location":"reference/glossary/#output-format","title":"output format","text":"<p>Deliverable file or set of files containing all of the transformed content.</p>"},{"location":"reference/glossary/#parameter","title":"parameter","text":"<p>Command-line argument or option passed to the Ant process or <code>dita</code> command.</p>"},{"location":"reference/glossary/#plug-in","title":"plug-in","text":"<p>Group of related files that change the default behavior of DITA-OT in some way.</p>"},{"location":"reference/glossary/#processor","title":"processor","text":"<p>Software that performs a series of operations to transform DITA content from one format to another.</p>"},{"location":"reference/glossary/#property","title":"property","text":"<p>Ant-specific argument or option.</p>"},{"location":"reference/glossary/#template","title":"template","text":"<p>Optional <code>&lt;template&gt;</code> elements can be added to <code>plugin.xml</code> files to define XML or XSL files that integrate DITA-OT extensions. Template files are often named with a <code>_template</code> suffix, and may be used to create custom extensions, group targets, and more. Anything contained in the plug-in\u2019s template files is integrated when the plug-in is installed.</p>"},{"location":"reference/glossary/#transformation-type","title":"transformation type","text":"<p>Component of a plug-in that defines an output format.</p>"},{"location":"reference/glossary/#transtype","title":"transtype","text":"<p>Note: Abbreviated form of transformation type. Use only to refer to the transtype parameter of the <code>dita</code> command, or to the <code>&lt;transtype&gt;</code> element in a <code>plugin.xml</code> file that defines the output format.</p>"},{"location":"reference/glossary/#variable","title":"variable","text":"<p>Language-specific piece of generated text, most often defined in the files in <code>org.dita.base/xsl/common</code>.</p>"},{"location":"reference/glossary/#xsl-template","title":"XSL template","text":"<p>Set of rules in an XSL stylesheet that are applied to nodes that match specific XML structures.</p>"},{"location":"reference/html-based-processing/","title":"HTML-based processing modules","text":"<p>DITA-OT ships with several varieties of HTML output, each of which follows roughly the same path through the processing pipeline. All HTML-based transformations begin with the same call to the pre-processing module, after which they generate HTML files and then branch to create the transformation-specific navigation files.</p>"},{"location":"reference/html5-processing/","title":"HTML5 processing","text":"<p>After the HTML5 files are generated, the html5 transformation generates a table of contents (ToC) file called <code>index.html</code>, which can be loaded as a cover page or rendered in a navigation sidebar or menu via CSS.</p> <p>As of DITA-OT 2.2, the nav-toc parameter can be used in HTML5 transformations to embed navigation directly in topics using native HTML5 elements without JavaScript or framesets.</p>"},{"location":"reference/htmlhelp-processing/","title":"HTML Help processing","text":"<p>The htmlhelp transformation creates HTML Help control files. If the build runs on a system that has the HTML Help compiler installed, the control files are compiled into a CHM file.</p> <p>Once the pre-processing and XHTML processes are completed, most of the HTML Help processing is handled by the following targets:</p> <ul> <li> <p><code>dita.map.htmlhelp</code></p> <p>Create the HHP, HHC, and HHK files. The HHK file is sorted based on the language of the map.</p> </li> <li> <p><code>dita.htmlhelp.convertlang</code></p> <p>Ensures that the content can be processed correctly by the compiler, and that the appropriate code pages and languages are used.</p> </li> <li> <p><code>compile.HTML.Help</code></p> <p>Attempts to detect the HTML Help compiler. If the compiler is found, the full project is compiled into a single CHM file.</p> </li> </ul>"},{"location":"reference/implementation-dependent-features/","title":"Implementation-dependent features","text":"<p>For certain features, the DITA specification allows conforming processors to choose between different implementation alternatives. In these cases, there may be differences in behavior when DITA content is handled by different processors. DITA-OT supports implementation-specific features by applying one or more of the permissible processing approaches.</p>"},{"location":"reference/implementation-dependent-features/#chunking","title":"Chunking","text":"<p>DITA content can be divided or merged into new output documents in different ways, depending on the value of the <code>@chunk</code> attribute.</p> <p>DITA-OT supports the following chunking methods:</p> <ul> <li>select-topic</li> <li>select-document</li> <li>select-branch</li> <li>by-topic</li> <li>by-document</li> <li>to-content</li> <li>to-navigation.</li> </ul> <p>When no chunk attribute values are given, no chunking is performed.</p> <p>Note: For HTML-based transformation types, this is effectively equivalent to select-document and by-document defaults.</p> <p>Error recovery:</p> <ul> <li>When two tokens from the same category are used, no error or warning is thrown.</li> <li>When an unrecognized chunking method is used, no error or warning is thrown.</li> </ul>"},{"location":"reference/implementation-dependent-features/#filtering","title":"Filtering","text":"<p>Error recovery:</p> <ul> <li>When there are multiple <code>&lt;revprop&gt;</code> elements with the same <code>@val</code> attribute, no error or warning is thrown</li> <li>When multiple prop elements define a duplicate attribute and value combination, attribute default, or fall-back behavior, the DOTJ007W warning is thrown.</li> </ul>"},{"location":"reference/implementation-dependent-features/#debugging-attributes","title":"Debugging attributes","text":"<p>The debug attributes are populated as follows:</p> <ul> <li> <p>xtrf</p> <p>The XML trace filename is used to store the absolute system path of the original source document.</p> </li> <li> <p>xtrc</p> <p>The XML trace counter stores an element counter with the following format:</p> <p><code>element-name \":\" integer-counter \";\" line-number \":\" column-number</code></p> </li> </ul>"},{"location":"reference/implementation-dependent-features/#image-scaling","title":"Image scaling","text":"<p>If both height and width attributes are given, the image is scaled non-uniformly.</p> <p>If the scale attribute is not an unsigned integer, no error or warning is thrown during preprocessing.</p>"},{"location":"reference/implementation-dependent-features/#map-processing","title":"Map processing","text":"<p>When a <code>&lt;topicref&gt;</code> element that references a map contains child <code>&lt;topicref&gt;</code> elements, the DOTX068W error is thrown and the child <code>&lt;topicref&gt;</code> elements are ignored.</p>"},{"location":"reference/implementation-dependent-features/#link-processing","title":"Link processing","text":"<p>When the value of a hyperlink reference in the <code>@href</code> attribute is not a valid URI reference, the DOTJ054E error is thrown. Depending on the processing-mode setting, error recovery may be attempted.</p>"},{"location":"reference/implementation-dependent-features/#copy-to-processing","title":"Copy-to processing","text":"<p>When the <code>@copy-to</code> attribute is specified on a <code>&lt;topicref&gt;</code>, the content of the <code>&lt;shortdesc&gt;</code> element is not used to override the short description of the topic.</p>"},{"location":"reference/implementation-dependent-features/#coderef-processing","title":"Coderef processing","text":"<p>When <code>&lt;coderef&gt;</code> elements are used within code blocks to reference external files with literal code samples, the system default character set is used as the target file encoding unless a different character set is explicitly defined via the mechanisms described under Character set definition.</p>"},{"location":"reference/java-api/","title":"Using the Java API","text":"<p>DITA Open Toolkit includes a Java Application Programming Interface to allow developers to embed the toolkit more easily into other Java programs.</p> <p>When using the API, programmers don\u2019t need to know or care that DITA-OT uses Ant, they can just use Java.</p> <p>Note: When running DITA-OT via the <code>dita</code> command, an <code>ant</code> shell script handles the classpath setup, but when using the API the classpath should be set up as part of the normal classpath configuration for the Java application.</p>"},{"location":"reference/java-api/#example-usage","title":"Example usage","text":"<pre><code>// Create a reusable processor factory with DITA-OT base directory\nProcessorFactory pf = ProcessorFactory.newInstance(ditaDir);\n// and set the temporary directory\npf.setBaseTempDir(tempDir);\n\n// Create a processor using the factory and configure the processor\nProcessor p = pf.newProcessor(\"html5\")\n.setInput(mapFile)\n.setOutputDir(outDir)\n.setProperty(\"nav-toc\", \"partial\");\n\n// Run conversion\np.run();\n</code></pre> <p>By default, running DITA-OT via the API will write a debug log to the temporary directory. A custom SLF4J logger can also be used to access the log via the Simple Logging Facade for Java.</p> <p>The processor cleans the temporary directory by default, but this can be disabled to simplify debugging in cases where the processor failed.</p> <p>Tip: See the DITA-OT Java API documentation in the <code>doc/api/</code> folder of the DITA-OT distribution package for information on the packages, classes, interfaces and methods provided by the Java API.</p>"},{"location":"reference/java-api/#downloading-dita-ot-from-maven-central","title":"Downloading DITA-OT from Maven Central","text":"<p>As of version 2.5, the DITA Open Toolkit base library (<code>dost.jar</code>) is available via the Maven 2 Central Repository. You can use this mechanism to download the main JAR file and include it in the build for other Java projects.</p> <p>To locate the latest version, search for the <code>org.dita-ot</code> group ID.</p> <p>Important: The <code>dost.jar</code> file provides only the DITA Open Toolkit base library. It does not contain the full DITA-OT distribution and cannot be used to run DITA-OT by itself. You will need to ensure that your build installs the other files and directories required for the toolkit along with the dependencies for your project.</p> <p>Related information </p> <p>DITA-OT Java API documentation</p>"},{"location":"reference/license/","title":"License Information","text":"<p>DITA Open Toolkit is released under the Apache License, Version 2.0.</p> <p>Note: For information on the terms and conditions for use, reproduction, and distribution of DITA Open Toolkit, refer to the Apache License 2.0.</p>"},{"location":"reference/map-first-preprocessing/","title":"Map-first preprocessing","text":"<p>DITA-OT 3.0 provides a map-first preprocessing option as an alternative to the default <code>preprocess</code> operation. The method, which was introduced in DITA-OT 2.5 as an experimental feature, has been improved and is ready for use in many production scenarios. Map-first-preprocessing provides the same functionality as the default <code>preprocess</code>, but takes a different approach.</p> <p>Whereas the default preprocessing routine handles both maps and topics at the same time, often switching back and forth between map operations and topic operations, the map-first approach only begins processing topics after nearly all map processing is complete. This simplifies the processing logic and creates cleaner module responsibilities, which makes it easier to process only those topics that are actually referenced after filtering, for example, or to only process the map to validate the map structure.</p> <p>The current preprocessing architecture was established during the DITA 1.0 era when there were fewer DITA features that operated on the map level. Initially, the difference between processing modes was not that great. DITA 1.2 and 1.3 introduced many more map-level features, such as keys and key scopes, that make it difficult to reliably work with topics before all map features have been resolved.</p> <p>The original preprocessing operation already handles many map operations first, but this was not the original design and requires regular refactoring to handle edge cases. The new map-first preprocessing is designed with this model in mind, improving the overall processing flow and making it more formal about the map-first model. The new model also takes advantage of hashed topic file names in the temporary directory, which simplifies many processing steps, and is better able to handle topics referenced outside of the map directory (that case has resulted in a variety of issues with the original model).</p> <p>Note: The map-first preprocessing option is enabled by default in DITA-OT 3.0 for PDF and HTML Help. These formats were chosen because they generate a compiled result file, so temporarily hashed file names should all be invisible to the build. After further testing and feedback, the new option will most likely become the default for other output formats in future versions. Because the DITA-OT development team cannot have access to all varieties of DITA, all edge cases, or even all the ways DITA-OT itself is extended, the switch to default map-first preprocessing for other output formats will be smoother for everyone if more people can test and provide feedback.</p>"},{"location":"reference/map-first-preprocessing/#how-to-use-map-first-preprocessing","title":"How to use map-first preprocessing","text":"<p>To use (or test) map-first preprocessing, call the <code>preprocess2</code> Ant target in your custom transformation types instead of using the default <code>preprocess</code> target.</p> <p>For example, if you have a custom HTML5 transformation type named \"myhtml\", then you may have a plug-in extension that looks this:</p> <pre><code>&lt;!-- Simple variant: set properties and call default HTML5 --&gt;\n&lt;target name=\"dita2myhtml\" depends=\"myhtml.init,dita2html5\"/&gt;\n\n</code></pre> <p>This type of extension is quite common, and is used to set default properties for your environment followed by a normal build to use those properties. In this case, you'll need to replace <code>dita2html5</code> with the normal HTML5 steps, swapping out <code>preprocess</code> for <code>preprocess2</code>:</p> <pre><code>&lt;!-- Simple variant: set properties and call default HTML5 --&gt;\n&lt;target name=\"dita2myhtml\" \n        depends=\"myhtml.init,\n                 html5.init,\n                 build-init,\n                 **preprocess2,**\n                 html5.topic,\n                 html5.map,\n                 html5.css\"/&gt;\n</code></pre> <p>Note: If you use this simple method for customized PDF or HTML Help builds, you will automatically be using <code>preprocess2</code>.</p> <p>Some custom transformation types already require you to repeat the default dependencies, in which case you should already call <code>preprocess</code> directly, as in the following:</p> <pre><code>&lt;!-- More complex variant: add processing steps to default HTML5 --&gt;\n&lt;target name=\"dita2myhtml\"\n        depends=\"myhtml.init,\n                 build-init,\n                 preprocess,\n                 local-extensions-after-preprocess,\n                 html5.topic,\n                 html5.map,\n                 html5.css\"/&gt;\n</code></pre> <p>In such cases, the modification is much easier \u2013 simply add a <code>2</code> to the existing <code>preprocess</code> target.</p>"},{"location":"reference/map-first-preprocessing/#how-to-test-in-a-production-environment","title":"How to test in a production environment","text":"<p>In some cases, you may be responsible for maintaining transformation types that are actually run by many people on your team or around a company. In this case, you likely need to maintain your existing transformation types based on the backwards-compatible <code>preprocess</code> modules, but also want to provide your colleagues with a way to test their own documents using <code>preprocess2</code>.</p> <p>There are several ways to do this. One fairly straightforward approach would be to create a new custom transformation type that is exactly the same, except for preprocessing. For example, if you have a local HTML variant called <code>myhtml</code> as above, instead of modifying that transformation directly, you could create a second transformation type called <code>myhtml-beta</code> that provides exactly the same support, but with the new map-first preprocessing:</p> <pre><code>*&amp;lt;!-- Original \"myhtml\" is not modified, used for production --&amp;gt;*\n&lt;target name=\"dita2myhtml5\" depends=\"myhtml.init,dita2html5\"/&gt;\n\n*&amp;lt;!-- \"myhtml-beta\" used to test and provide feedback on preprocess2 --&amp;gt;*\n&lt;target name=\"dita2myhtml-beta\" \n        depends=\"myhtml.init,\n                 html5.init,\n                 build-init,\n                 **preprocess2,**\n                 html5.topic,\n                 html5.map,\n                 html5.css\"/&gt;\n</code></pre>"},{"location":"reference/map-first-preprocessing/#known-limitations","title":"Known limitations","text":"<p>The <code>preprocess2</code> implementation details are subject to change; dependencies within <code>preprocess2</code> may be renamed or removed based on feedback.</p> <p>The internal extension points that run before or after individual steps in the original <code>preprocess</code> pipeline (<code>preprocess.*.pre/preprocess.*.post</code>) are not available in the newer map-first preprocessing pipeline (<code>preprocess2</code>), which is used in the PDF and HTML Help transformations as of DITA-OT 3.0.</p> <p>Related information </p> <p>We shall call it preprocess2</p>"},{"location":"reference/markdown-formats/","title":"Markdown formats","text":"<p>The following topics show how DITA XML constructs are represented in Markdown and MDITA, provide details on common syntax, differences between the <code>markdown</code> and <code>mdita</code> formats, and describe additional configuration options.</p> <p>Targetonly </p> <p>Markdown input</p> <p>Preview support for Lightweight DITA</p>"},{"location":"reference/pdf-transform/","title":"PDF processing modules","text":"<p>The PDF (formerly known as PDF2) transformation process runs the pre-processing routine and follows it by a series of additional targets. These steps work together to create a merged set of content, convert the merged content to XSL-FO, and then format the XSL-FO file to PDF.</p> <p>The PDF process includes many Ant targets. During a typical conversion from map to PDF, the following targets are most significant.</p> <ul> <li> <p><code>map2pdf2</code></p> <p>Creates a merged file by calling a common Java merge module. It then calls the <code>publish.map.pdf</code> target to do the remainder of the work.</p> </li> <li> <p><code>publish.map.pdf</code></p> <p>Performs some initialization and then calls the <code>transform.topic2pdf</code> target to do the remainder of processing.</p> </li> <li> <p><code>transform.topic2pdf</code></p> <p>Converts the merged file to XSL-FO, generates the PDF, and deletes the <code>topic.fo</code> file, unless instructed to keep it.</p> </li> </ul> <p>The <code>transform.topic2pdf</code> target uses the following targets to perform those tasks:</p> <ul> <li> <p><code>transform.topic2fo</code></p> <p>Convert the merged file to an XSL-FO file. This process is composed of several sub-targets.</p> </li> <li> <p><code>transform.topic2fo.index</code></p> <p>Runs a Java process to set up index processing, based on the document language. This step generates the file <code>stage1.xml</code> in the temporary processing directory.</p> </li> <li> <p><code>transform.topic2fo.flagging</code></p> <p>Sets up preprocessing for flagging based on a DITAVAL file. This step generates the file <code>stage1a.xml</code> in the temporary processing directory.</p> </li> <li> <p><code>transform.topic2fo.main</code></p> <p>Does the bulk of the conversion from DITA to XSL-FO. It runs the XSLT-based process that creates <code>stage2.fo</code> in the temporary processing directory</p> </li> <li> <p><code>transform.topic2fo.i18n</code></p> <p>Does additional localization processing on the FO file; it runs a Java process that converts <code>stage2.fo</code> into <code>stage3.fo</code>, followed by an XSLT process that converts <code>stage3.fo</code> into <code>topic.fo</code>.</p> </li> <li> <p><code>transform.fo2pdf</code></p> <p>Converts the <code>topic.fo</code> file into PDF using the specified FO processor (Antenna House, XEP, or Apache FOP).</p> </li> <li> <p><code>delete.fo2pdf.topic.fo</code></p> <p>Deletes the <code>topic.fo</code> file, unless otherwise specified by setting an Ant property or command-line option.</p> </li> </ul>"},{"location":"reference/pdf-transformation-history/","title":"History of the PDF transformation","text":"<p>The DITA Open Toolkit PDF transformation was originally based on a third-party contribution by Idiom Technologies, and is commonly known as the \u201cpdf2\u201d plug-in.</p> <p>When IBM developed the code that later became DITA-OT, it included only a proof-of-concept PDF transformation. IBM had their own processing chain for producing PDFs from SGML, which they had developed over several decades, so resources were focused primarily on XHTML output and preprocessing.</p> <p>Since the initial proof-of-concept transformation was not robust enough for production-grade output, companies began to develop their own PDF transformations. One company, Idiom Technologies, made their transformation (known as the \u201cpdf2\u201d transformation) available as open source on 23 February 2006. The Idiom plug-in was initially available as a separately-downloadable plug-in that could be installed into DITA-OT.</p> <p>Later the DITA-OT project formally incorporated the Idiom plug-in as a demonstration in the <code>demo/fo</code> directory. Beginning with DITA-OT version 1.5, released 18 December 2009, the \u201cpdf2\u201d code served as the main, supported PDF transformation. (The original PDF transformation was deprecated and renamed \u201clegacypdf\u201d.) In DITA-OT version 1.6, the \u201cpdf2\u201d plug-in was moved to <code>plugins/org.dita.pdf2</code>.</p> <p>The fact that the current PDF transformation was not originally developed in parallel with the other core DITA-OT transformations led to anomalies that often confuse users:</p> <ul> <li>Elements are often (by default) styled differently in the XHTML and PDF transformations. For example, consider the <code>&lt;info&gt;</code> element in a task topic. In HTML output, this is an inline element; in PDF output, it is a block-level element.</li> <li>The auto-generated strings used for localization are different, and so languages that are supported by DITA-OT differ based on whether the XHTML or PDF transformation is used.</li> <li>The Idiom plug-in used its own extension mechanism (the <code>Customization</code> folder) to provide overrides to the PDF transformation.</li> <li>Before the release of DITA 1.1 (which added support for the indexing domain), Idiom developed an index extension that used a FrameMaker-inspired syntax.</li> </ul>"},{"location":"reference/preprocess-branch-filter/","title":"Branch filtering (<code>branch-filter</code>)","text":"<p>The <code>branch-filter</code> step filters topics using DITAVAL files defined in the map.</p>"},{"location":"reference/preprocess-chunk/","title":"Chunk topics (<code>chunk</code>)","text":"<p>The <code>chunk</code> step breaks apart and assembles referenced DITA content based on the <code>@chunk</code> attribute in maps. This step is implemented in Java.</p> <p>DITA-OT has implemented processing for the following values of the <code>@chunk</code> attribute:</p> <ul> <li>select-topic</li> <li>select-document</li> <li>select-branch</li> <li>by-topic</li> <li>by-document</li> <li>to-content</li> <li>to-navigation</li> </ul> <p>Related information </p> <p>Chunking definition in the DITA 1.2 specification</p>"},{"location":"reference/preprocess-clean-map/","title":"Map cleanup (<code>clean-map</code>)","text":"<p>The <code>clean-map</code> step removes any elements and attributes that were added to files to support preprocessing.</p>"},{"location":"reference/preprocess-conref/","title":"Resolve content references (<code>conref</code>)","text":"<p>The <code>conref</code> step resolves content references, processing only the DITA maps or topics that use the <code>@conref</code> attribute. This step is implemented in XSLT.</p> <p>The values of the <code>@id</code> attribute on referenced content are changed as the elements are pulled into the new locations. This ensures that the values of the <code>@id</code> attribute within the referencing topic remain unique.</p> <p>If an element is pulled into a new context along with a cross reference that references the target, both the values of the <code>@id</code> and <code>@xref</code> attributes are updated so that they remain valid in the new location. For example, a referenced topic might include a section as in the following example:</p> <pre><code>&lt;topic id=\"referenced_topic\"&gt;\n  &lt;title&gt;...&lt;/title&gt;\n  &lt;body&gt;\n    &lt;section id=\"sect\"&gt;\n      &lt;title&gt;Sample section&lt;/title&gt;\n      &lt;p&gt;Figure &lt;xref href=\"#referenced_topic/fig\"/&gt; \n        contains a code sample that demonstrates ... .&lt;/p&gt;\n      &lt;fig id=\"fig\"&gt;\n        &lt;title&gt;Code sample&lt;/title&gt;\n        &lt;codeblock&gt;....&lt;/codeblock&gt;\n      &lt;/fig&gt;\n    &lt;/section&gt;\n  &lt;/body&gt;\n&lt;/topic&gt;\n</code></pre> <p>When the section is referenced using a <code>@conref</code> attribute, the value of the <code>@id</code> attribute on the <code>&lt;fig&gt;</code> element is modified to ensure that it remains unique in the new context. At the same time, the <code>&lt;xref&gt;</code> element is also modified so that it remains valid as a local reference. For example, if the referencing topic has an <code>@id</code> set to \"new_topic\", then the conrefed element may look like this in the intermediate document <code>&lt;section&gt;</code>.</p> <pre><code>&lt;section id=\"sect\"&gt;\n  &lt;title&gt;Sample section&lt;/title&gt;\n  &lt;p&gt;Figure &lt;xref href=\"#new_topic/d1e25\"/&gt; contains a code sample\n    that demonstrates ... .&lt;/p&gt;\n  &lt;fig id=\"d1e25\"&gt;\n    &lt;title&gt;Code sample&lt;/title&gt;\n    &lt;codeblock&gt;....&lt;/codeblock&gt;\n  &lt;/fig&gt;\n&lt;/section&gt;\n</code></pre> <p>In this case, the value of the <code>@id</code> attribute on the <code>&lt;fig&gt;</code> element has been changed to a generated value of \"d1e25\". At the same time, the <code>&lt;xref&gt;</code> element has been updated to use that new generated ID, so that the cross reference remains valid.</p>"},{"location":"reference/preprocess-conrefpush/","title":"Conref push (<code>conrefpush</code>)","text":"<p>The <code>conrefpush</code> step resolves \u201cconref push\u201d references to render the content of the referencing element before, after, or in place of the referenced element. This step only processes documents that use conref push or that are updated due to the push action. This step is implemented in Java.</p>"},{"location":"reference/preprocess-copy-to/","title":"Copy topics (<code>copy-to</code>)","text":"<p>The <code>copy-to</code> step makes a copy of original topic resources to new resources defined by the <code>@copy-to</code> attribute.</p>"},{"location":"reference/preprocess-copyfiles/","title":"Copy related files (<code>copy-files</code>)","text":"<p>The <code>copy-files</code> step copies non-DITA resources to the output directory, such as HTML files that are referenced in a map or images that are referenced by a DITAVAL file. Which files are copied depends on the transformation type.</p>"},{"location":"reference/preprocess-debugfilter/","title":"Debug and filter (<code>debug-filter</code>)","text":"<p>The <code>debug-filter</code> step processes all referenced DITA content and creates copies in a temporary directory. As the DITA content is copied, filtering is performed, debugging information is inserted, and table column names are adjusted. This step is implemented in Java.</p> <p>The following modifications are made to the DITA source:</p> <ul> <li>If a DITAVAL file is specified, the DITA source is filtered according to the entries in the DITAVAL file.</li> <li>Debug information is inserted into each element using the <code>@xtrf</code> and <code>@xtrc</code> attributes. The values of these attributes enable messages later in the build to reliably indicate the original source of the error. For example, a message might trace back to the fifth <code>&lt;ph&gt;</code> element in a specific DITA topic. Without these attributes, that count might no longer be available due to filtering and other processing.</li> <li>The table column names are adjusted to use a common naming scheme. This is done only to simplify later conref processing. For example, if a table row is pulled into another table, this ensures that a reference to \"column 5 properties\" will continue to work in the fifth column of the new table.</li> </ul>"},{"location":"reference/preprocess-flagging/","title":"Flagging (<code>flag-module</code>)","text":"<p>Beginning with DITA-OT 1.7, flagging support is implemented as a common <code>flag-module</code> preprocessing step. The module evaluates the DITAVAL against all flagging attributes, and adds DITA-OT\u2013specific hints to the topic when flags are active. Any extended transformation type may use these hints to support flagging without adding logic to interpret the DITAVAL.</p>"},{"location":"reference/preprocess-flagging/#evaluating-the-ditaval-flags","title":"Evaluating the DITAVAL flags","text":"<p>Flagging is implemented as a reusable module during the preprocess stage. If a DITAVAL file is not used with a build, this step is skipped with no change to the file.</p> <p>When a flag is active, relevant sections of the DITAVAL itself are copied into the topic as a sub-element of the current topic. The active flags are enclosed in a pseudo-specialization of the <code>&lt;foreign&gt;</code> element (referred to as a pseudo-specialization because it is used only under the covers, with all topic types; it is not integrated into any shipped document types).</p> <ul> <li> <p><code>&lt;ditaval-startprop&gt;</code></p> <p>When any flag is active on an element, a <code>&lt;ditaval-startprop&gt;</code> element will be created as the first child of the flagged element:</p> <p><code>language-xml &lt;ditaval-startprop class=\"+ topic/foreign ditaot-d/ditaval-startprop \"&gt;</code></p> <p>The <code>&lt;ditaval-startprop&gt;</code> element will contain the following:</p> <ul> <li>If the active flags should create a new style, that style is included using standard CSS markup on the <code>@outputclass</code> attribute. Output types that make use of CSS, such as XHTML, can use this value as-is.</li> <li>If styles conflict, and a <code>&lt;style-conflict&gt;</code> element exists in the DITAVAL, it will be copied as a child of <code>&lt;ditaval-startprop&gt;</code>.</li> <li>Any <code>&lt;prop&gt;</code> or <code>&lt;revprop&gt;</code> elements that define active flags will be copied in as children of the <code>&lt;ditaval-startprop&gt;</code> element. Any <code>&lt;startflag&gt;</code> children of the properties will be included, but <code>&lt;endflag&gt;</code> children will not.</li> <li><code>&lt;ditaval-endprop&gt;</code></li> </ul> <p>When any flag is active on an element, a <code>&lt;ditaval-endprop&gt;</code> element will be created as the last child of the flagged element:</p> <p><code>language-xml &lt;ditaval-endprop class=\"+ topic/foreign ditaot-d/ditaval-endprop \"&gt;</code></p> <p>CSS values and <code>&lt;style-conflict&gt;</code> elements are not included on this element.</p> <p>Any <code>&lt;prop&gt;</code> or <code>&lt;revprop&gt;</code> elements that define active flags will be copied in as children of <code>&lt;ditaval-prop&gt;</code>. Any <code>&lt;startflag&gt;</code> children of the properties will be included, but <code>&lt;endflag&gt;</code> children will not.</p> </li> </ul>"},{"location":"reference/preprocess-flagging/#supporting-flags-in-overrides-or-custom-transformation-types","title":"Supporting flags in overrides or custom transformation types","text":"<p>For most transformation types, the <code>&lt;foreign&gt;</code> element should be ignored by default, because arbitrary non-DITA content may not mix well unless coded for ahead of time. If the <code>&lt;foreign&gt;</code> element is ignored by default, or if a rule is added to specifically ignore <code>&lt;ditaval-startprop&gt;</code> and <code>&lt;ditaval-endprop&gt;</code>, then the added elements will have no impact on a transform. If desired, flagging support may be integrated at any time in the future.</p> <p>The processing described above runs as part of the common preprocess, so any transform that uses the default preprocess will get the topic updates. To support generating flags as images, XSLT-based transforms can use default fallthrough processing in most cases. For example, if a paragraph is flagged, the first child of <code>&lt;p&gt;</code> will contain the start flag information; adding a rule to handle images in <code>&lt;ditaval-startprop&gt;</code> will cause the image to appear at the start of the paragraph content.</p> <p>In some cases fallthrough processing will not result in valid output; for those cases, the flags must be explicitly processed. This is done in the XHTML transform for elements like <code>&lt;ol&gt;</code>, because fallthrough processing would place images in between <code>&lt;ol&gt;</code> and <code>&lt;li&gt;</code>. To handle this, the code processes <code>&lt;ditaval-startprop&gt;</code> before starting the element, and <code>&lt;ditaval-endprop&gt;</code> at the end. Fallthrough processing is then disabled for those elements as children of <code>&lt;ol&gt;</code>.</p>"},{"location":"reference/preprocess-flagging/#example-ditaval","title":"Example DITAVAL","text":"<p>Assume the following DITAVAL file is in use during a build. This DITAVAL will be used for each of the following content examples.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;val&gt;\n  *&amp;lt;!-- Define what happens in the case of conflicting styles --&amp;gt;*\n  &lt;style-conflict background-conflict-color=\"red\"/&gt;\n\n  *&amp;lt;!-- Define two flagging properties that give styles \\(no image\\) --&amp;gt;*\n  &lt;prop action=\"flag\" att=\"audience\" style=\"underline\" val=\"user\"\n        backcolor=\"green\"/&gt;\n  &lt;prop action=\"flag\" att=\"platform\" style=\"overline\" val=\"win\"\n        backcolor=\"blue\"/&gt;\n\n  *&amp;lt;!-- Define a property that includes start and end image flags --&amp;gt;*\n  &lt;prop action=\"flag\" att=\"platform\" val=\"linux\" style=\"overline\"\n        backcolor=\"blue\"&gt;\n    &lt;startflag imageref=\"startlin.png\"&gt;\n      &lt;alt-text&gt;Start linux&lt;/alt-text&gt;&lt;/startflag&gt;\n    &lt;endflag imageref=\"endlin.png\"&gt;\n      &lt;alt-text&gt;End linux&lt;/alt-text&gt;&lt;/endflag&gt;\n  &lt;/prop&gt;\n\n  *&amp;lt;!-- Define a revision that includes start and end image flags --&amp;gt;*\n  &lt;revprop action=\"flag\" style=\"double-underline\" val=\"rev2\"&gt;\n    &lt;startflag imageref=\"start_rev.gif\"&gt;\n      &lt;alt-text&gt;START&lt;/alt-text&gt;&lt;/startflag&gt;\n    &lt;endflag imageref=\"end_rev.gif\"&gt;&lt;alt-text&gt;END&lt;/alt-text&gt;&lt;/endflag&gt;\n  &lt;/revprop&gt;\n&lt;/val&gt;\n</code></pre>"},{"location":"reference/preprocess-flagging/#content-example-1-adding-style","title":"Content example 1: Adding style","text":"<p>Now assume the following paragraph exists in a topic. Class attributes are included, as they would normally be in the middle of the preprocess routine; <code>@xtrf</code> and <code>@xtrc</code> are left off for clarity.</p> <pre><code>&lt;p audience=\"user\"&gt;Simple user; includes style but no images&lt;/p&gt;\n</code></pre> <p>Based on the DITAVAL above, audience=\"user\" results in a style with underlining and with a green background. The interpreted CSS value is added to <code>@outputclass</code> on <code>&lt;ditaval-startprop&gt;</code>, and the actual property definition is included at the start and end of the element. The output from the flagging step looks like this (with newlines added for clarity, and class attributes added as they would appear in the temporary file):</p> <p>The resulting file after the flagging step looks like this; for clarity, newlines are added, while <code>@xtrf</code> and <code>@xtrc</code> are removed:</p> <pre><code>&lt;p audience=\"user\" class=\"- topic/p \"&gt;\n  **&amp;lt;ditaval-startprop**\n      **class=\"+ topic/foreign ditaot-d/ditaval-startprop \"**\n      **outputclass=\"background-color:green;text-decoration:underline;\"&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"audience\" style=\"underline\" val=\"user\"\n          backcolor=\"green\"/&amp;gt;**\n  **&amp;lt;/ditaval-startprop&amp;gt;**\n  Simple user; includes style but no images\n  **&amp;lt;ditaval-endprop**\n      **class=\"+ topic/foreign ditaot-d/ditaval-endprop \"&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"audience\" style=\"underline\" val=\"user\"\n          backcolor=\"green\"/&amp;gt;**\n  **&amp;lt;/ditaval-endprop&amp;gt;**\n&lt;/p&gt;\n</code></pre>"},{"location":"reference/preprocess-flagging/#content-example-2-conflicting-styles","title":"Content example 2: Conflicting styles","text":"<p>This example includes a paragraph with conflicting styles. When the audience and platform attributes are both evaluated, the DITAVAL indicates that the background color is both green and blue. In this situation, the <code>&lt;style-conflict&gt;</code> element is evaluated to determine how to style the content.</p> <pre><code>&lt;p audience=\"user\" platform=\"win\"&gt;Conflicting styles (still no images)&lt;/p&gt;\n</code></pre> <p>The <code>&lt;style-conflict&gt;</code> element results in a background color of red, so this value is added to <code>@outputclass</code> on <code>&lt;ditaval-startprop&gt;</code>. As above, active properties are copied into the generated elements; the <code>&lt;style-conflict&gt;</code> element itself is also copied into the generated <code>&lt;ditaval-startprop&gt;</code> element.</p> <p>The resulting file after the flagging step looks like this; for clarity, newlines are added, while <code>@xtrf</code> and <code>@xtrc</code> are removed:</p> <pre><code>&lt;p audience=\"user\" platform=\"win\" class=\"- topic/p \"&gt;\n  **&amp;lt;ditaval-startprop**\n           **class=\"+ topic/foreign ditaot-d/ditaval-startprop \"**\n           **outputclass=\"background-color:red;\"&amp;gt;**\n    **&amp;lt;style-conflict background-conflict-color=\"red\"/&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"audience\" style=\"underline\" val=\"user\"\n          backcolor=\"green\"/&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"platform\" style=\"overline\" val=\"win\"\n          backcolor=\"blue\"/&amp;gt;**\n  **&amp;lt;/ditaval-startprop&amp;gt;**\n\n  Conflicting styles (still no images)\n\n  **&amp;lt;ditaval-endprop**\n           **class=\"+ topic/foreign ditaot-d/ditaval-endprop \"&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"platform\" style=\"overline\" val=\"win\"\n          backcolor=\"blue\"/&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"audience\" style=\"underline\" val=\"user\"\n          backcolor=\"green\"/&amp;gt;****\n  &amp;lt;/ditaval-endprop&amp;gt;**\n&lt;/p&gt;\n</code></pre>"},{"location":"reference/preprocess-flagging/#content-example-3-adding-image-flags","title":"Content example 3: Adding image flags","text":"<p>This example includes image flags for both <code>@platform</code> and <code>@rev</code>, which are defined in DITAVAL <code>&lt;prop&gt;</code> and <code>&lt;revprop&gt;</code> elements.</p> <pre><code>&lt;ol platform=\"linux\" rev=\"rev2\"&gt;\n  &lt;li&gt;Generate images for platform=\"linux\" and rev=\"2\"&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>As above, the <code>&lt;ditaval-startprop&gt;</code> and <code>&lt;ditaval-endprop&gt;</code> nest the active property definitions, with the calculated CSS value on <code>@outputclass</code>. The <code>&lt;ditaval-startprop&gt;</code> drops the ending image, and <code>&lt;ditaval-endprop&gt;</code> drops the starting image. To make document-order processing more consistent, property flags are always included before revisions in <code>&lt;ditaval-startprop&gt;</code>, and the order is reversed for <code>&lt;ditaval-endprop&gt;</code>.</p> <p>The resulting file after the flagging step looks like this; for clarity, newlines are added, while <code>@xtrf</code> and <code>@xtrc</code> are removed:</p> <pre><code>&lt;ol platform=\"linux\" rev=\"rev2\" class=\"- topic/ol \"&gt;\n  **&amp;lt;ditaval-startprop**\n           **class=\"+ topic/foreign ditaot-d/ditaval-startprop \"**\n           **outputclass=\"background-color:blue;**\n                        **text-decoration:underline;**\n                        **text-decoration:overline;\"&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"platform\" val=\"linux\" style=\"overline\"\n          backcolor=\"blue\"&amp;gt;**\n      **&amp;lt;startflag imageref=\"startlin.png\"&amp;gt;**\n        **&amp;lt;alt-text&amp;gt;Start linux&amp;lt;/alt-text&amp;gt;&amp;lt;/startflag&amp;gt;&amp;lt;/prop&amp;gt;**\n    **&amp;lt;revprop action=\"flag\" style=\"double-underline\" val=\"rev2\"&amp;gt;**\n      **&amp;lt;startflag imageref=\"start\\_rev.gif\"&amp;gt;**\n        **&amp;lt;alt-text&amp;gt; &amp;lt;/alt-text&amp;gt;&amp;lt;/startflag&amp;gt;&amp;lt;/revprop&amp;gt;**\n  **&amp;lt;/ditaval-startprop&amp;gt;**\n  &lt;li class=\"- topic/li \"&gt;\n    Generate images for platform=\"linux\" and rev=\"2\"\n  &lt;/li&gt;\n  **&amp;lt;ditaval-endprop**\n           **class=\"+ topic/foreign ditaot-d/ditaval-endprop \"&amp;gt;**\n    **&amp;lt;revprop action=\"flag\" style=\"double-underline\" val=\"rev2\"&amp;gt;**\n      **&amp;lt;endflag imageref=\"end\\_rev.gif\"&amp;gt;**\n        **&amp;lt;alt-text&amp;gt;END&amp;lt;/alt-text&amp;gt;&amp;lt;/endflag&amp;gt;&amp;lt;/revprop&amp;gt;**\n    **&amp;lt;prop action=\"flag\" att=\"platform\" val=\"linux\" style=\"overline\"**\n                                                   **backcolor=\"blue\"&amp;gt;**\n      **&amp;lt;endflag imageref=\"endlin.png\"&amp;gt;**\n        **&amp;lt;alt-text&amp;gt;End linux&amp;lt;/alt-text&amp;gt;&amp;lt;/endflag&amp;gt;&amp;lt;/prop&amp;gt;**\n  **&amp;lt;/ditaval-endprop&amp;gt;**\n&lt;/ol&gt;\n</code></pre>"},{"location":"reference/preprocess-genlist/","title":"Generate lists (<code>gen-list</code>)","text":"<p>The <code>gen-list</code> step examines the input files and creates lists of topics, images, document properties, or other content. These lists are used by later steps in the pipeline. This step is implemented in Java.</p> <p>For example, one list includes all topics that make use of the conref attribute; only those files are processed during the conref stage of the build. The list file name name is derived from the list file property. For example, the <code>conref.list</code> file is generated for \u201cconreffile\u201d and a corresponding list property is provided for each generated list, in this case \u201cconreflist\u201d.</p> <p>The result of this step is a set of several list files in the temporary directory, including <code>dita.list</code> and <code>dita.xml.properties</code>.</p> List file property List file Usage canditopicsfile <code>canditopics.list</code> conreffile <code>conref.list</code> Documents that contain conref attributes that need to be resolved in preprocess. conreftargetsfile <code>conreftargets.list</code> copytosourcefile <code>copytosource.list</code> flagimagefile <code>flagimage.list</code> fullditamapandtopicfile <code>fullditamapandtopic.list</code> All of the ditamap and topic files that are referenced during the transformation. These may be referenced by href or conref attributes. fullditamapfile <code>fullditamap.list</code> All of the ditamap files in dita.list fullditatopicfile <code>fullditatopic.list</code> All of the topic files in dita.list hrefditatopicfile <code>hrefditatopic.list</code> All of the topic files that are referenced with an href attribute hreftargetsfile <code>hreftargets.list</code> Link targets htmlfile <code>html.list</code> Resource files imagefile <code>image.list</code> Image files that are referenced in the content outditafilesfile <code>outditafiles.list</code> resourceonlyfile <code>resourceonly.list</code> subjectschemefile <code>subjectscheme.list</code> subtargetsfile <code>subtargets.list</code> tempdirToinputmapdir.relative.value uplevels user.input.dir Absolute input directory path user.input.file.listfile Input file list file user.input.file Input file path, relative to the input directory"},{"location":"reference/preprocess-keyref/","title":"Resolve key references (<code>keyref</code>)","text":"<p>The <code>keyref</code> step examines all the keys that are defined in the DITA source and resolves the key references. Links that make use of keys are updated so that any <code>@href</code> value is replaced by the appropriate target; key-based text replacement is also performed. This step is implemented in Java.</p>"},{"location":"reference/preprocess-maplink/","title":"Map-based linking (<code>maplink</code>)","text":"<p>This step collects links based on a map and moves those links into the referenced topics. The links are created based on hierarchy in the DITA map, the <code>@collection-type</code> attribute, and relationship tables. This step is implemented in XSLT and Java.</p> <p>The <code>maplink</code> module runs an XSLT stylesheet that evaluates the map; it places all the generated links into a single file in memory. The module then runs a Java program that pushes the generated links into the applicable topics.</p>"},{"location":"reference/preprocess-mapref/","title":"Resolve map references (<code>mapref</code>)","text":"<p>The <code>mapref</code> step resolves references from one DITA map to another. This step is implemented in XSLT.</p> <p>Maps reference other maps by using the following sorts of markup:</p> <pre><code>&lt;topicref href=\"other.ditamap\" format=\"ditamap\"/&gt;\n...\n&lt;mapref href=\"other.ditamap\"/&gt;\n</code></pre> <p>As a result of the mapref step, the element that references another map is replaced by the topic references from the other map. Relationship tables are pulled into the referencing map as a child of the root element (<code>&lt;map&gt;</code> or a specialization of <code>&lt;map&gt;</code>).</p>"},{"location":"reference/preprocess-metadata/","title":"Move metadata (<code>move-meta-entries</code>) and pull content into maps (<code>mappull</code>)","text":"<p>The <code>move-meta-entries</code> step pushes metadata back and forth between maps and topics. For example, index entries and copyrights in the map are pushed into affected topics, so that the topics can be processed later in isolation while retaining all relevant metadata. This step is implemented in Java.</p> <p>Note: As of DITA-OT 2.2, the <code>move-meta-entries</code> and <code>mappull</code> steps have been merged. The <code>mappull</code> step has been moved into <code>move-meta-entries</code>.</p> <p>The <code>mappull</code> step pulls content from referenced topics into maps, and then cascades data within maps. This step is implemented in XSLT.</p> <p>The <code>mappull</code> step makes the following changes to the DITA map:</p> <ul> <li>Titles are pulled from referenced DITA topics. Unless the <code>@locktitle</code> attribute is set to \"yes\", the pulled titles replace the navigation titles specified on the <code>&lt;topicref&gt;</code> elements.</li> <li>The <code>&lt;linktext&gt;</code> element is set based on the title of the referenced topic, unless it is already specified locally.</li> <li>The <code>&lt;shortdesc&gt;</code> element is set based on the short description of the referenced topic, unless it is already specified locally.</li> <li>The <code>@type</code> attribute is set on <code>&lt;topicref&gt;</code> elements that reference local DITA topics. The value of the <code>@type</code> attribute is set to value of the root element of the topic; for example, a <code>&lt;topicref&gt;</code> element that references a task topic is given a <code>@type</code> attribute set to \"task\"\".</li> <li>Attributes that cascade, such as <code>@toc</code> and <code>@print</code>, are made explicit on any child <code>&lt;topicref&gt;</code> elements. This allows future steps to work with the attributes directly, without reevaluating the cascading behavior.</li> </ul>"},{"location":"reference/preprocess-profile/","title":"Filter conditional content (<code>profile</code>)","text":"<p>The <code>profile</code> step removes content from topics and maps based on the rules in DITAVAL files or the <code>@print</code> attribute setting. Output can differ based on when filtering is done.</p>"},{"location":"reference/preprocess-topic-fragment/","title":"Resolve topic fragments and code references (<code>topic-fragment</code>)","text":"<p>The <code>topic-fragment</code> step expands content references to elements in the same topic and resolves references made with the <code>&lt;coderef&gt;</code> element. This step is implemented in SAX pipes.</p> <p>Content references to elements in the same topic are defined via same-topic fragments such as <code>#./ID</code> in URIs.</p> <p>The <code>&lt;coderef&gt;</code> element is used to reference code stored externally in non-XML documents. During the pre-processing step, the referenced content is pulled into the containing <code>&lt;codeblock&gt;</code> element.</p> <p>Related information </p> <p>Extended codeblock processing</p>"},{"location":"reference/preprocess-topicpull/","title":"Pull content into topics (<code>topicpull</code>)","text":"<p>The <code>topicpull</code> step pulls content into <code>&lt;xref&gt;</code> and <code>&lt;link&gt;</code> elements. This step is implemented in XSLT.</p> <p>If an <code>&lt;xref&gt;</code> element does not contain link text, the target is examined and the link text is pulled. For example, a reference to a topic pulls the title of the topic; a reference to a list item pulls the number of the item. If the <code>&lt;xref&gt;</code> element references a topic that has a short description, and the <code>&lt;xref&gt;</code> element does not already contain a child <code>&lt;desc&gt;</code> element, a <code>&lt;desc&gt;</code> element is created that contains the text from the topic short description.</p> <p>The process is similar for <code>&lt;link&gt;</code> elements. If the <code>&lt;link&gt;</code> element does not have a child <code>&lt;linktext&gt;</code> element, one is created with the appropriate link text. Similarly, if the <code>&lt;link&gt;</code> element does not have a child <code>&lt;desc&gt;</code> element, and the short description of the target can be determined, a <code>&lt;desc&gt;</code> element is created that contains the text from the topic short description.</p>"},{"location":"reference/preprocessing/","title":"Pre-processing modules","text":"<p>The pre-processing operation is a set of steps that typically runs at the beginning of every DITA-OT transformation. Each step or stage corresponds to an Ant target in the build pipeline; the <code>preprocess</code> target calls the entire set of steps.</p>"},{"location":"reference/processing-order/","title":"Processing order","text":"<p>The order of processing is often significant when evaluating DITA content. Although the DITA specification does not mandate a specific order for processing, DITA-OT has determined that performing filtering before conref resolution best meets user expectations. Switching the order of processing, while legal, may give different results.</p> <p>The DITA-OT project has found that filtering first provides several benefits. Consider the following sample that contains a <code>&lt;note&gt;</code> element that both uses conref and contains a <code>@product</code> attribute:</p> <pre><code>&lt;note conref=\"documentA.dita#doc/note\" product=\"MyProd\"/&gt;\n</code></pre> <p>If the <code>@conref</code> attribute is evaluated first, then documentA must be parsed in order to retrieve the note content. That content is then stored in the current document (or in a representation of that document in memory). However, if all content with product=\"MyProd\" is filtered out, then that work is all discarded later in the build.</p> <p>If the filtering is done first (as in DITA-OT), this element is discarded immediately, and documentA is never examined. This provides several important benefits:</p> <ul> <li>Time is saved by discarding unused content as early as possible; all future steps can load the document without this extra content.</li> <li>Additional time is saved case by not evaluating the <code>@conref</code> attribute; in fact, documentA does not even need to be parsed.</li> <li>Any user reproducing this build does not need documentA. If the content is sent to a translation team, that team can reproduce an error-free build without documentA; this means documentA can be kept back from translation, preventing accidental translation and increased costs.</li> </ul> <p>If the order of these two steps is reversed, so that conref is evaluated first, it is possible that results will differ. For example, in the code sample above, the <code>@product</code> attribute on the reference target will override the product setting on the referencing note. Assume that the referenced <code>&lt;note&gt;</code> element in documentA is defined as follows:</p> <pre><code>&lt;note id=\"note\" product=\"SomeOtherProduct\"&gt;This is an important note!&lt;/note&gt;\n</code></pre> <p>A process that filters out product=\"SomeOtherProduct\" will remove the target of the original conref before that conref is ever evaluated, which will result in a broken reference. Evaluating conref first would resolve the reference, and only later filter out the target of the conref. While some use cases can be found where this is the desired behavior, benefits such as those described above resulted in the current processing order used by DITA-OT.</p>"},{"location":"reference/processing-pipeline-modules/","title":"Processing modules","text":"<p>The DITA-OT processing pipeline is implemented using Ant. Individual modules within the Ant script are implemented in either Java or XSLT, depending on such factors as performance or requirements for customization. Virtually all Ant and XSLT modules can be extended by adding a plug-in to the toolkit; new Ant targets may be inserted before or after common processing, and new rules may be imported into common XSLT modules to override default processing.</p>"},{"location":"reference/processing-pipeline-modules/#xslt-modules","title":"XSLT modules","text":"<p>The XSLT modules use shell files. Typically, each shell file begins by importing common rules that apply to all topics. This set of common processing rules may in turn import additional common modules, such as those used for reporting errors or determining the document locale. After the common rules are imported, additional imports can be included in order to support processing for DITA specializations.</p> <p>For example, XHTML processing is controlled by the <code>xsl/dita2xhtml.xsl</code> file. The shell begins by importing common rules that are applicable to all general topics: <code>xslhtml/dita2htmlImpl.xsl</code>. After that, additional XSLT overrides are imported for specializations that require modified processing. For example, an override for reference topics is imported in order to add default headers to property tables. Additional modules are imported for tasks, for the highlighting domain, and for several other standard specializations. After the standard XSLT overrides occur, plug-ins may add in additional processing rules for local styles or for additional specializations.</p>"},{"location":"reference/processing-pipeline-modules/#java-modules","title":"Java modules","text":"<p>Java modules are typically used when XSLT is a poor fit, such as for processes that make use of standard Java libraries (like those used for index sorting). Java modules are also used in many cases where a step involves copying files, such as the initial process where source files are parsed and copied to a temporary processing directory.</p>"},{"location":"reference/processing-structure/","title":"Processing structure","text":"<p>DITA-OT implements a multi-stage, map-driven architecture to process DITA content. Each stage in the process examines some or all of the content; some stages result in temporary files that are used by later steps, while others stages result in updated copies of the DITA content. Most of the processing takes place in a temporary working directory; the source files themselves are never modified.</p> <p>DITA-OT is designed as a pipeline. Most of the pipeline is common to all output formats; it is known as the pre-processing stage. In general, any DITA process begins with this common set of pre-processing routines.</p> <p>Once the pre-processing is completed, the pipeline diverges based on the requested output format. Some processing is still common to multiple output formats; for example, Eclipse Help and HTML Help both use the same routines to generate XHTML topics, after which the two pipelines branch to create different sets of navigation files.</p> <p>The following image illustrates how the pipeline works for several common output formats: PDF, Eclipse Help, HTML Help, XHTML, and HTML5.</p> <p>Note: Other output formats may implement additional processing steps.</p> <p></p>"},{"location":"reference/store-api/","title":"Store API \u2013 Processing in memory","text":"<p>DITA-OT originally assumed resources would be available on disk and available from file paths. Recent versions added URI input, so HTTPS resources could be used, but temporary and output resources were still file-based. DITA-OT 3.6 introduces a new Store API that can process temporary resources in memory instead of writing them to disk.</p> <p>The Store API (<code>org.dita.dost.store.Store</code>) is a Java abstraction over temporary file operations. So for example instead of reading resources directly with <code>FileInputStream</code>, the Store API provides operations for this. This abstraction allows implementations of the Store API to choose how they handle resources, enables optimizations or non\u2013file-based storage. Since DITA-OT processes a lot of XML data, the Store API offers operations for XML processing directly. For example, a read method to directly get a DOM <code>Document</code>, instead of opening a file stream manually, parsing it with an XML parser, and getting the <code>Document</code> instance from the parser.</p> <p>The Store API is extendable using Java\u2019s Resource Loader with the <code>org.dita.dost.store.StoreBuilder</code> service. This is a builder interface to get named <code>Store</code> instances (\u201ca Store\u201d).</p>"},{"location":"reference/store-api/#stream-store-for-file-based-processing","title":"Stream Store for file-based processing","text":"<p>This Store could also be a File Store, since it uses disk and local files for temporary resources. This is the traditional DITA-OT implementation, where temporary XML files are stored under the <code>dita.temp.dir</code> path.</p> <p>The Stream Store is activated by setting the store-type parameter to file.</p> <p>Note: To ensure backwards compatibility, the file Store is the default setting in DITA-OT 3.6.</p>"},{"location":"reference/store-api/#cache-store-for-in-memory-processing","title":"Cache Store for in-memory processing","text":"<p>This Store is an in-memory Store, that keeps all temporary resources in memory. The name comes from the feature of the Store, that it caches the parsed XML after reading. That is, instead of storing XML as a byte array, it keeps it as a DOM <code>Document</code> or S9api <code>XdmNode</code>. When the same resource is re-read later, it doesn't have to parse it again, only return the parsed document. Resources that are not available in the temporary directory are handled with the Stream Store.</p> <p>While the Store doesn't write anything to the temporary directory, it will still use URIs where the resources are under the temporary directory. The URIs are simply used for addressing, similarly to URNs. Future releases of DITA-OT may use some other method of addressing, such as a <code>tmp</code> URI scheme.</p> <p>Tip: As of DITA-OT 3.6, the Cache Store can be activated by setting the store-type parameter to memory.</p>"},{"location":"reference/store-api/#benefits","title":"Benefits","text":"<p>The initial implementation of the Cache Store is provided in DITA-OT 3.6 as a preview to allow integration partners to test this new feature.</p> <p>In-memory processing provides performance advantages in I/O bound environments such as cloud computing platforms, where processing time depends primarily on how long it takes to read and write temporary files.</p> <p>The Store API also makes the Saxon S9api easier to use. It offers an XML document model that is in most cases easier to work with than DOM. The abstraction Store makes it easier to work with XML, so various modules don\u2019t need to repeat the same type of XML processing code.</p>"},{"location":"reference/store-api/#caveats","title":"Caveats","text":"<p>Not all custom plug-ins will work with the Cache Store, because they may assume files are used and expect direct file access for resource operations.</p> <p>Important: To take advantage of the Store API, custom plug-ins must use DITA-OT XSLT modules in custom <code>&lt;pipeline&gt;</code> elements instead of Ant\u2019s built-in <code>&lt;xslt&gt;</code> tasks as recommended in Plug-in coding conventions.</p>"},{"location":"reference/third-party-software/","title":"Third-party software","text":"<p>DITA Open Toolkit uses third-party software components to provide certain features in the core toolkit, Java API, and bundled plug-ins.</p>"},{"location":"reference/third-party-software/#dita-ot-41","title":"DITA-OT 4.1","text":"<p>DITA-OT core processing uses the following third-party software:</p> Software Version License Ant 1.10.13 Apache License 2.0 Apache Commons Codec 1.10 Apache License 2.0 Apache Commons IO 2.8.0 Apache License 2.0 Apache XML Commons Resolver 1.2 Apache License 2.0 Guava 32.1.1-jre Apache License 2.0 ICU for Java (ICU4J) 70.1 ICU License Jackson data binding library 2.15.2 Apache License 2.0 Logback Classic Module 1.4.8 Eclipse Public License 1.0, GNU Lesser General Public License 2.1 Saxon-HE 12.3 Mozilla Public License 1.0 Simple Logging Facade for Java (SLF4J) 2.0.7 MIT License Xerces 2.12.2 Apache License 2.0 XML APIs 1.4.01 Apache License 2.0, W3C Document License XML Resolver 5.2.1 Apache License 2.0 <p>Note: The XML APIs library contains source code for SAX and DOM APIs, which each have their own licenses.</p>"},{"location":"reference/third-party-software/#pdf-plug-in","title":"PDF plug-in","text":"<p>The <code>org.dita.pdf2</code> plug-in relies on additional third-party software to generate PDF output:</p> Software Version License Apache Commons Logging 1.0.4 Apache License 2.0 Apache XML Graphics 2.8 Apache License 2.0 Batik 1.13 Apache License 2.0 FOP 2.8 Apache License 2.0"},{"location":"reference/xhtml-processing/","title":"XHTML processing","text":"<p>After the XHTML files are generated by the common routine, the <code>dita.map.xhtml</code> target is called by the xhtml transformation. This target generates a TOC file called <code>index.html</code>, which can be loaded into a frameset.</p>"},{"location":"reference/markdown/Custom-schemas/","title":"Custom schemas","text":"<p>You can create a custom plug-in to set different configuration options for Markdown parsing and conversion to DITA. Custom Markdown schema configurations can be defined using the <code>Java ServiceLoader</code> class.</p> <p>The service type interface <code>com.elovirta.dita.markdown.SchemaProvider</code> has two methods:</p> <ul> <li><code>isSupportedSchema(URI)</code> \u2014 check whether schema URI is supported by this provider.</li> <li><code>createMarkdownParser(URI)</code> \u2014 create <code>MarkdownParser</code> instance for given schema. We suggest returning a configured <code>MarkdownParserImpl</code> instance.</li> </ul>"},{"location":"reference/markdown/Custom-schemas/#example","title":"Example","text":"<p>Sample customization for <code>urn:acme:dita:custom</code> schema.</p> <p>Create a <code>src/main/java/com/acme/AcmeSchemaProvider.java</code> class that extends <code>SchemaProvider</code> to define a scheme and what customization options it uses:</p> <pre><code>package com.acme;\n\nimport com.elovirta.dita.markdown.DitaRenderer;\nimport com.elovirta.dita.markdown.MarkdownParser;\nimport com.elovirta.dita.markdown.MarkdownParserImpl;\nimport com.elovirta.dita.markdown.SchemaProvider;\nimport com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\nimport com.vladsch.flexmark.ext.anchorlink.AnchorLinkExtension;\nimport com.vladsch.flexmark.ext.attributes.AttributesExtension;\nimport com.vladsch.flexmark.ext.autolink.AutolinkExtension;\nimport com.vladsch.flexmark.ext.definition.DefinitionExtension;\nimport com.vladsch.flexmark.ext.footnotes.FootnoteExtension;\nimport com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughSubscriptExtension;\nimport com.vladsch.flexmark.ext.ins.InsExtension;\nimport com.vladsch.flexmark.ext.jekyll.tag.JekyllTagExtension;\nimport com.vladsch.flexmark.ext.superscript.SuperscriptExtension;\nimport com.vladsch.flexmark.ext.tables.TablesExtension;\nimport com.vladsch.flexmark.ext.yaml.front.matter.YamlFrontMatterExtension;\nimport com.vladsch.flexmark.parser.Parser;\nimport com.vladsch.flexmark.util.data.MutableDataSet;\n\nimport java.net.URI;\n\nimport static java.util.Arrays.asList;\n\npublic class AcmeSchemaProvider implements SchemaProvider {\n    private static final URI SCHEMA = URI.create(\"urn:acme:dita:custom.xsd\");\n\n    @Override\n    public boolean isSupportedSchema(URI schema) {\n        return SCHEMA.equals(schema);\n    }\n\n    @Override\n    public MarkdownParser createMarkdownParser(URI schema) {\n        return new MarkdownParserImpl(new MutableDataSet()\n                // See https://github.com/vsch/flexmark-java/wiki/Extensions\n                .set(Parser.EXTENSIONS, asList(\n                        AbbreviationExtension.create(),\n                        AnchorLinkExtension.create(),\n                        AttributesExtension.create(),\n                        FootnoteExtension.create(),\n                        InsExtension.create(),\n                        JekyllTagExtension.create(),\n                        SuperscriptExtension.create(),\n                        TablesExtension.create(),\n                        AutolinkExtension.create(),\n                        YamlFrontMatterExtension.create(),\n                        DefinitionExtension.create(),\n                        StrikethroughSubscriptExtension.create()))\n                .set(DefinitionExtension.TILDE_MARKER, false)\n                .set(TablesExtension.COLUMN_SPANS, true)\n                .set(TablesExtension.APPEND_MISSING_COLUMNS, false)\n                .set(TablesExtension.DISCARD_EXTRA_COLUMNS, true)\n                .set(TablesExtension.HEADER_SEPARATOR_COLUMN_MATCH, true)\n                // See https://github.com/jelovirt/org.lwdita/wiki/Custom-schemas\n                .set(DitaRenderer.FIX_ROOT_HEADING, false)\n                .set(DitaRenderer.SHORTDESC_PARAGRAPH, false)\n                .set(DitaRenderer.ID_FROM_YAML, false)\n                .set(DitaRenderer.LW_DITA, false)\n                .set(DitaRenderer.SPECIALIZATION, false)\n                .set(DitaRenderer.SPECIALIZATION_CONCEPT, false)\n                .set(DitaRenderer.SPECIALIZATION_TASK, false)\n                .set(DitaRenderer.SPECIALIZATION_REFERENCE, false)\n                .toImmutable());\n    }\n}\n</code></pre> <p>To make <code>AcmeSchemaProvider</code> discoverable, create a provider configuration file <code>src/test/resources/META-INF/services/com.elovirta.dita.markdown.SchemaProvider</code>:</p> <pre><code>com.acme.AcmeSchemaProvider\n</code></pre> <p>A sample project is available in the org.lwdita-sample GitHub project repository. It contains a Gradle build to compile the code and package it into a DITA-OT plug-in.</p> <p>The following configuration options can be specified in custom schemas:</p>"},{"location":"reference/markdown/Custom-schemas/#parsing","title":"Parsing","text":"Static Field Default Description <code>DitaRenderer.FIX_ROOT_HEADING</code> <code>false</code> If root heading is missing, generate based on <code>title</code> key from YAML header or filename."},{"location":"reference/markdown/Custom-schemas/#conversion-to-dita","title":"Conversion to DITA","text":"Static Field Default Description <code>DitaRenderer.SHORTDESC_PARAGRAPH</code> <code>false</code> Convert first paragraph to shortdesc. <code>DitaRenderer.TIGHT_LIST</code> <code>true</code> Support tight lists. <code>DitaRenderer.ID_FROM_YAML</code> <code>false</code> Use <code>id</code> key from YAML header for topic @id. <code>DitaRenderer.LW_DITA</code> <code>false</code> Convert to XDITA instead of DITA. Deprecated, use <code>DitaRenderer.MDITA_EXTENDED_PROFILE</code> instead. <code>DitaRenderer.SPECIALIZATION</code> <code>false</code> Convert to concept/task/reference if root heading has matching class. <code>DitaRenderer.SPECIALIZATION_CONCEPT</code> <code>false</code> Convert to DITA concept. <code>DitaRenderer.SPECIALIZATION_TASK</code> <code>false</code> Convert to DITA task. <code>DitaRenderer.SPECIALIZATION_REFERENCE</code> <code>false</code> Convert to DITA concept. <code>DitaRenderer.MDITA_CORE_PROFILE</code> <code>false</code> Parse as MDITA core profile and convert to XDITA. <code>DitaRenderer.MDITA_EXTENDED_PROFILE</code> <code>false</code> Parse as MDITA extended profile and convert to XDITA. <code>DitaRenderer.MAP</code> <code>false</code> Convert to DITA map."},{"location":"reference/markdown/Format-comparison/","title":"Format comparison","text":"<p>Although the original Markdown DITA format and the MDITA format for LwDITA share some common syntax, there are several differences to consider when choosing which format to use.</p> <ul> <li> <p>In 2015, the original DITA-OT Markdown plug-in introduced a series of conventions to convert Markdown content to DITA, and vice-versa. This Markdown flavor was called \u201cMarkdown DITA\u201d. The <code>markdown</code> format adds several complementary constructs to represent DITA content in Markdown, beyond those proposed for the MDITA format in the Lightweight DITA specification drafts.</p> </li> <li> <p>In 2017, the Markdown plug-in was superseded by the LwDITA plug-in, which was bundled with DITA-OT 3.0, and added new formats for Lightweight DITA. The <code>mdita</code> format implements the subset of Markdown features proposed in the latest specification drafts, but differs in some ways from the original Markdown DITA format.</p> </li> </ul> <p>The following table provides an overview of differences between the <code>markdown</code> and <code>mdita</code> formats.</p> Features Markdown DITA MDITA (LwDITA) DITA map <code>@format</code> attribute <code>markdown</code> or <code>md</code> <code>mdita</code> LwDITA \u2013 \u2714 First \u00b6 Body \u00b6 Short description Subheadings Nested topics Sections Topic IDs Special attributes or title Generated from title Output class Special attributes block \u2013 Profiling atts Special attributes block \u2013 Topic types Special attributes block \u2013 Schemas YAML frontmatter \u2013 Tables OASIS exchange table model \u00a01 DITA <code>&lt;simpletable&gt;</code> Cell alignment \u2714 \u2013 Sections Defined via attributes \u2013 Examples Defined via attributes \u2013 Notes MkDocs Material admonitions \u2013 Markdown maps Map schema <code>.mditamap</code> extension Maps: topic sequences OL in Markdown map \u2013 Maps: key definitions Link reference definition \u2013 Maps: reltables MultiMarkdown tables with links \u2013 Key references in topics \u2714 Shortcut reference links \u2714 Shortcut reference links List spacing loose or tight (no blank lines) loose only (\u00b6 per item) <p>1 https://www.oasis-open.org/specs/tm9901.html</p>"},{"location":"reference/markdown/MDITA-syntax/","title":"MDITA syntax","text":"<p>In 2017, the Markdown plug-in was superseded by the LwDITA plug-in, which was bundled with DITA-OT 3.0, and added new formats for Lightweight DITA. The <code>mdita</code> format implements the subset of Markdown features proposed in the latest specification drafts, but differs in some ways from the original Markdown DITA format.</p> <p>To apply the stricter LwDITA-specific processing to a Markdown topic, create a topic reference in your map and set the <code>@format</code> attribute to <code>mdita</code>:</p> <pre><code>&lt;map&gt;\n  &lt;topicref href=\"mdita-topic.md\" format=\"mdita\"/&gt;\n&lt;/map&gt;\n</code></pre> <p>In this case, the first paragraph in the topic is treated as a short description, and tables are converted to DITA <code>&lt;simpletable&gt;</code> elements.</p> <p>The MDITA format uses CommonMark as the underlying markup language. MDITA files must be UTF-8 encoded.</p> <p>The MDITA parser processes topics according to the MDITA \u201cExtended profile\u201d proposed for LwDITA. The \"Core profile\" can be enabled for custom parser configurations.</p> <p>The following Markdown constructs are parsed differently when the <code>@format</code> attribute is set to <code>mdita</code>.</p>"},{"location":"reference/markdown/MDITA-syntax/#titles-and-document-structure","title":"Titles and document structure","text":"<p>The first heading level generates a topic and the second heading level a section:</p> <pre><code># Topic title\n\n## Section title\n</code></pre> <pre><code>&lt;topic id=\"topic_title\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;body&gt;\n    &lt;section&gt;\n      &lt;title&gt;Section title&lt;/title&gt;\n    &lt;/section&gt;\n  &lt;/body&gt;\n&lt;/topic&gt;\n</code></pre> <p>The ID is generated automatically from the title content.</p>"},{"location":"reference/markdown/MDITA-syntax/#topic-content","title":"Topic content","text":"<p>The first paragraph is treated as a <code>&lt;shortdesc&gt;</code> element.</p> <pre><code># Topic title\n\nFirst paragraph.\n\nSecond paragraph.\n</code></pre> <pre><code>&lt;topic id=\"topic_title\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;shortdesc&gt;First paragraph.&lt;/shortdesc&gt;\n  &lt;body&gt;\n    &lt;p&gt;Second paragraph.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/topic&gt;\n</code></pre>"},{"location":"reference/markdown/MDITA-syntax/#tables","title":"Tables","text":"<p>Tables use the MultiMarkdown table extension format:</p> <pre><code>| First Header | Second Header | Third Header |\n| ------------ | :-----------: | -----------: |\n| Content      |    _Cell_     |         Cell |\n| Content      |   **Cell**    |         Cell |\n</code></pre> <p>Tables in MDITA files are converted to DITA <code>&lt;simpletable&gt;</code> elements:</p> <pre><code>&lt;simpletable&gt;\n  &lt;sthead&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;First Header&lt;/p&gt;&lt;/stentry&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;Second Header&lt;/p&gt;&lt;/stentry&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;Third Header&lt;/p&gt;&lt;/stentry&gt;\n  &lt;/sthead&gt;\n  &lt;strow&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;Content&lt;/p&gt;&lt;/stentry&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;&lt;i&gt;Cell&lt;/i&gt;&lt;/p&gt;&lt;/stentry&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;Cell&lt;/p&gt;&lt;/stentry&gt;\n  &lt;/strow&gt;\n  &lt;strow&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;Content&lt;/p&gt;&lt;/stentry&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;&lt;b&gt;Cell&lt;/b&gt;&lt;/p&gt;&lt;/stentry&gt;\n    &lt;stentry&gt;\n      &lt;p&gt;Cell&lt;/p&gt;&lt;/stentry&gt;\n  &lt;/strow&gt;\n&lt;/simpletable&gt;\n</code></pre> <p>Note Cell alignment information is not preserved, as the <code>@align</code> attribute is are not available for <code>&lt;simpletable&gt;</code> elements.</p> <p>Table cells may only contain inline content.</p>"},{"location":"reference/markdown/MDITA-syntax/#mdita-map-syntax","title":"MDITA map syntax","text":"<p>DITA maps can be written in MDITA using standard Markdown syntax for links and lists.</p> <p>Note: Requires DITA-OT 4.1 or newer.</p> <p>In MDITA, maps use the file name extension <code>mditamap</code> to define the file as a map:</p> <pre><code># Map title\n\n- [Topic title](topic.md)\n  - [Nested title](nested.md)\n</code></pre> <pre><code>&lt;map&gt;\n  &lt;title&gt;Map Title&lt;/title&gt;\n  &lt;topicref href=\"topic.dita\" navtitle=\"Topic title\"&gt;\n    &lt;topicref href=\"nested.dita\" navtitle=\"Nested title\"/&gt;\n  &lt;/topicref&gt;\n&lt;/map&gt;\n</code></pre> <p>In MDITA, both ordered and unordered list items create <code>&lt;topicref&gt;</code> elements.</p>"},{"location":"reference/markdown/MDITA-syntax/#common-syntax","title":"Common syntax","text":"<p>The following common Markdown constructs are processed in the same way for both <code>mdita</code> and <code>markdown</code> topics.</p>"},{"location":"reference/markdown/MDITA-syntax/#hard-line-breaks","title":"Hard line breaks","text":"<p>A line break that is preceded by two or more spaces is parsed as a hard line break. Because DITA doesn\u2019t have a <code>&lt;br&gt;</code> element for line break, hard line breaks are converted into <code>&lt;?linebreak?&gt;</code> processing instructions.</p> <pre><code>foo\u00b7\u00b7\nbaz\n</code></pre> <pre><code>&lt;p&gt;foo&lt;?linebreak?&gt;baz&lt;/p&gt;\n</code></pre> <p>The LwDITA plug-in contains extensions for HTML5 and PDF outputs to generate line breaks.</p>"},{"location":"reference/markdown/MDITA-syntax/#links","title":"Links","text":"<p>The format of local link targets is detected based on file name extension. The following extensions are treated as DITA files:</p> extension format <code>.dita</code> <code>dita</code> <code>.xml</code> <code>dita</code> <code>.md</code> <code>markdown</code> <code>.markdown</code> <code>markdown</code> <p>All other link targets detect the <code>format</code> from the file name extension and are treated as non-DITA files. Absolute link targets are treated as external scope links:</p> <pre><code>[Markdown](test.md)\n[DITA](test.dita)\n[HTML](test.html)\n[External](http://www.example.com/test.html)\n</code></pre> <pre><code>&lt;xref href=\"test.md\"&gt;Markdown&lt;/xref&gt;\n&lt;xref href=\"test.dita\"&gt;DITA&lt;/xref&gt;\n&lt;xref href=\"test.html\" format=\"html\"&gt;HTML&lt;/xref&gt;\n&lt;xref href=\"http://www.example.com/test.html\" format=\"html\" scope=\"external\"&gt;External&lt;/xref&gt;\n</code></pre>"},{"location":"reference/markdown/MDITA-syntax/#images","title":"Images","text":"<p>Images used in inline content are processed with inline placement. If a block-level image contains a title, it is treated as an image wrapped in a figure element:</p> <pre><code>An inline ![Alt](test.jpg).\n\n![Alt](test.jpg)\n\n![Alt](test.jpg 'Title')\n</code></pre> <pre><code>&lt;p&gt;An inline &lt;image href=\"test.jpg\"&gt;&lt;alt&gt;Alt&lt;/alt&gt;&lt;/image&gt;.&lt;/p&gt;\n&lt;image href=\"test.jpg\" placement=\"break\"&gt;\n  &lt;alt&gt;Alt&lt;/alt&gt;\n&lt;/image&gt;\n&lt;fig&gt;\n  &lt;title&gt;Title&lt;/title&gt;\n  &lt;image href=\"test.jpg\"&gt;\n    &lt;alt&gt;Alt&lt;/alt&gt;\n  &lt;/image&gt;\n&lt;/fig&gt;\n</code></pre>"},{"location":"reference/markdown/MDITA-syntax/#key-references","title":"Key references","text":"<p>Keys can be referenced using standard Markdown syntax for shortcut reference links:</p> <pre><code>[key]\n[link text][key]\n![image-key]\n</code></pre> <pre><code>&lt;xref keyref=\"key\"/&gt;\n&lt;xref keyref=\"key\"&gt;link text&lt;/xref&gt;\n&lt;image keyref=\"image-key\"/&gt;\n</code></pre>"},{"location":"reference/markdown/MDITA-syntax/#inline","title":"Inline","text":"<p>The following inline elements are supported:</p> <pre><code>**bold**\n_italic_\n`code`\n~~strikethrough~~\n</code></pre> <pre><code>&lt;b&gt;bold&lt;/b&gt;\n&lt;i&gt;italic&lt;/i&gt;\n&lt;codeph&gt;code&lt;/codeph&gt;\n&lt;ph status=\"deleted\"&gt;strikethrough&lt;/ph&gt;\n</code></pre>"},{"location":"reference/markdown/MDITA-syntax/#lists","title":"Lists","text":"<p>Standard Markdown syntax is used for both ordered (numbered) and unordered (bulleted) lists.</p> <p>Unordered list items can be marked up using either asterisks \u201c<code>*</code>\u201d or hyphens \u201c<code>-</code>\u201d as list markers:</p> <pre><code>* one\n* two\n  - three\n  - four\n</code></pre> <pre><code>&lt;ul&gt;\n  &lt;li&gt;one&lt;/li&gt;\n  &lt;li&gt;two\n    &lt;ul&gt;\n      &lt;li&gt;three&lt;/li&gt;\n      &lt;li&gt;four&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Ordered lists use either numbers or number signs \u201c<code>#</code>\u201d, followed by a period:</p> <pre><code>1.  one\n2.  two\n    #. three\n    #. four\n</code></pre> <pre><code>&lt;ol&gt;\n  &lt;li&gt;one&lt;/li&gt;\n  &lt;li&gt;two\n    &lt;ol&gt;\n      &lt;li&gt;three&lt;/li&gt;\n      &lt;li&gt;four&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>Note: Markdown DITA supports both loose and tight list spacing (with no blank lines between list items). MDITA treats all lists as loose, and wraps each list item in a paragraph (<code>&lt;li&gt;&lt;p&gt;item&lt;/p&gt;&lt;/li&gt;</code>).</p> <p>Definition lists use the PHP Markdown Extra format with a single-line term followed by a colon and the definition:</p> <pre><code>Term\n: Definition.\n</code></pre> <pre><code>&lt;dl&gt;\n  &lt;dlentry&gt;\n    &lt;dt&gt;Term&lt;/dt&gt;\n    &lt;dd&gt;Defintion.&lt;/dd&gt;\n  &lt;/dlentry&gt;\n&lt;/dl&gt;\n</code></pre> <p>Each definition list entry must have only one term and contain only inline content.</p>"},{"location":"reference/markdown/MDITA-syntax/#metadata","title":"Metadata","text":"<p>A YAML metadata block as defined in the pandoc_metadata_block extension can be used to specify metadata elements for the DITA prolog.</p> <p>The supported elements are:</p> <ul> <li><code>author</code></li> <li><code>source</code></li> <li><code>publisher</code></li> <li><code>permissions</code></li> <li><code>audience</code></li> <li><code>category</code></li> <li><code>keyword</code></li> <li><code>resourceid</code></li> </ul> <p>Any unrecognized keys are output using the <code>&lt;data&gt;</code> element.</p> <pre><code>---\nauthor:\n  - Author One\n  - Author Two\nsource: Source\npublisher: Publisher\npermissions: Permissions\naudience: Audience\ncategory: Category\nkeyword:\n  - Keyword1\n  - Keyword2\nresourceid:\n  - Resourceid1\n  - Resourceid2\nworkflow: review\n---\n\n# Sample with YAML header\n</code></pre> <pre><code>&lt;title&gt;Sample with YAML header&lt;/title&gt;\n&lt;prolog&gt;\n  &lt;author&gt;Author One&lt;/author&gt;\n  &lt;author&gt;Author Two&lt;/author&gt;\n  &lt;source&gt;Source&lt;/source&gt;\n  &lt;publisher&gt;Publisher&lt;/publisher&gt;\n  &lt;permissions view=\"Permissions\"/&gt;\n  &lt;metadata&gt;\n    &lt;audience audience=\"Audience\"/&gt;\n    &lt;category&gt;Category&lt;/category&gt;\n    &lt;keywords&gt;\n      &lt;keyword&gt;Keyword1&lt;/keyword&gt;\n      &lt;keyword&gt;Keyword2&lt;/keyword&gt;\n    &lt;/keywords&gt;\n  &lt;/metadata&gt;\n  &lt;resourceid appid=\"Resourceid1\"/&gt;\n  &lt;resourceid appid=\"Resourceid2\"/&gt;\n  &lt;data name=\"workflow\" value=\"review\"/&gt;\n&lt;/prolog&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/","title":"Markdown DITA syntax","text":"<p>In 2015, the original DITA-OT Markdown plug-in introduced a series of conventions to convert Markdown content to DITA, and vice-versa. This Markdown flavor was called \u201cMarkdown DITA\u201d. The <code>markdown</code> format adds several complementary constructs to represent DITA content in Markdown, beyond those proposed for the MDITA format in the Lightweight DITA specification drafts.</p> <p>To add a Markdown topic to a DITA publication, create a topic reference in your map and set the <code>@format</code> attribute to <code>markdown</code>. This allows the toolkit to recognize the source file as Markdown and convert it to DITA:</p> <pre><code>&lt;map&gt;\n  &lt;topicref href=\"markdown-dita-topic.md\" format=\"markdown\"/&gt;\n&lt;/map&gt;\n</code></pre> <p>In this case, the first paragraph in the topic is treated as a body paragraph, and each heading level generates a nested topic.</p> <p>The Markdown DITA format uses CommonMark as the underlying markup language, with several extensions as noted below. Markdown DITA files must be UTF-8 encoded.</p> <p>The following Markdown constructs are parsed differently when the <code>@format</code> attribute is set to <code>markdown</code>.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#titles-and-document-structure","title":"Titles and document structure","text":"<p>Each heading level generates a topic and associated title:</p> <pre><code># Topic title\n\n## Nested topic title\n</code></pre> <pre><code>&lt;topic id=\"topic_title\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;topic id=\"nested_topic_title\"&gt;\n    &lt;title&gt;Nested topic title&lt;/title&gt;\n  &lt;/topic&gt;\n&lt;/topic&gt;\n</code></pre> <p>Pandoc header attributes or PHP Markdown Extra special attributes can be used to define <code>id</code> or <code>outputclass</code> attributes:</p> <pre><code># Topic title {#carrot .juice audience=novice}\n</code></pre> <pre><code>&lt;topic id=\"carrot\" outputclass=\"juice\" audience=\"novice\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n</code></pre> <p>If topic ID is not defined using header attributes, the ID is generated from title contents.</p> <p>If the Markdown document doesn\u2019t contain a level 1 heading, one is generated based on YAML metadata or from the document file name.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#topic-content","title":"Topic content","text":"<p>In Markdown DITA documents, all paragraphs appear inside the <code>body</code> element.</p> <pre><code># Topic title\n\nFirst paragraph.\n\nSecond paragraph.\n</code></pre> <pre><code>&lt;topic id=\"topic_title\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;body&gt;\n    &lt;p&gt;First paragraph.&lt;/p&gt;\n    &lt;p&gt;Second paragraph.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/topic&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#specialization-types","title":"Specialization types","text":"<p>The following class values in header attributes have a special meaning on level 1 headings:</p> <ul> <li><code>concept</code></li> <li><code>task</code></li> <li><code>reference</code></li> </ul> <p>They can be used to change the Markdown DITA topic type to one of the built-in structural specialization types.</p> <pre><code># Task {.task}\n\nContext\n\n1.  Command\n\n    Info.\n</code></pre> <pre><code>&lt;task id=\"task\"&gt;\n  &lt;title&gt;Task &lt;/title&gt;\n  &lt;taskbody&gt;\n    &lt;context&gt;\n      &lt;p&gt;Context&lt;/p&gt;\n    &lt;/context&gt;\n    &lt;steps&gt;\n      &lt;step&gt;\n        &lt;cmd&gt;Command&lt;/cmd&gt;\n        &lt;info&gt;\n          &lt;p&gt;Info.&lt;/p&gt;\n        &lt;/info&gt;\n      &lt;/step&gt;\n    &lt;/steps&gt;\n  &lt;/taskbody&gt;\n&lt;/task&gt;\n</code></pre> <p>The other way to use specialization types is by defining a schema for the document.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#sections","title":"Sections","text":"<p>The following class values in header attributes have a special meaning on heading levels other than 1:</p> <ul> <li><code>section</code></li> <li><code>example</code></li> </ul> <p>They are used to generate <code>section</code> and <code>example</code> elements:</p> <pre><code># Topic title\n\n## Section title {.section}\n\n## Example title {.example}\n</code></pre> <pre><code>&lt;topic id=\"topic_title\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;body&gt;\n    &lt;section&gt;\n      &lt;title&gt;Section title&lt;/title&gt;\n    &lt;/section&gt;\n    &lt;example&gt;\n      &lt;title&gt;Example title&lt;/title&gt;\n    &lt;/example&gt;\n  &lt;/body&gt;\n&lt;/topic&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#tables","title":"Tables","text":"<p>Tables use the MultiMarkdown table extension format:</p> <pre><code>| First Header | Second Header | Third Header |\n| ------------ | :-----------: | -----------: |\n| Content      |          _Long Cell_        ||\n| Content      |   **Cell**    |         Cell |\n</code></pre> <p>Tables in Markdown DITA files are converted to the OASIS exchange table model:</p> <pre><code>&lt;table&gt;\n  &lt;tgroup cols=\"3\"&gt;\n    &lt;colspec colname=\"col1\" colnum=\"1\"/&gt;\n    &lt;colspec colname=\"col2\" colnum=\"2\"/&gt;\n    &lt;colspec colname=\"col3\" colnum=\"3\"/&gt;\n    &lt;thead&gt;\n      &lt;row&gt;\n        &lt;entry colname=\"col1\"&gt;First Header&lt;/entry&gt;\n        &lt;entry align=\"center\" colname=\"col2\"&gt;Second Header&lt;/entry&gt;\n        &lt;entry align=\"right\" colname=\"col3\"&gt;Third Header&lt;/entry&gt;\n      &lt;/row&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;row&gt;\n        &lt;entry colname=\"col1\"&gt;Content&lt;/entry&gt;\n        &lt;entry align=\"center\" namest=\"col2\" nameend=\"col3\" colname=\"col2\"&gt;&lt;i&gt;Long Cell&lt;/i&gt;&lt;/entry&gt;\n      &lt;/row&gt;\n      &lt;row&gt;\n        &lt;entry colname=\"col1\"&gt;Content&lt;/entry&gt;\n        &lt;entry align=\"center\" colname=\"col2\"&gt;&lt;b&gt;Cell&lt;/b&gt;&lt;/entry&gt;\n        &lt;entry align=\"right\" colname=\"col3\"&gt;Cell&lt;/entry&gt;\n      &lt;/row&gt;\n    &lt;/tbody&gt;\n  &lt;/tgroup&gt;\n&lt;/table&gt;\n</code></pre> <p>Table cells may only contain inline content and column spans; block content and row spans are not supported in Markdown DITA.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#notes","title":"Notes","text":"<p>Notes can be written using the syntax defined in the Material for MkDocs admonition extension.</p> <p>Note: Requires DITA-OT 4.1 or newer.</p> <pre><code>!!! note\n\n    Note content.\n</code></pre> <pre><code>&lt;note&gt;\n  &lt;p&gt;Note Content.&lt;/p&gt;\n&lt;/note&gt;\n</code></pre> <p>Different note types can be defined by changing the type qualifier keyword.</p> <pre><code>!!! info\n\n    Info content.\n</code></pre> <pre><code>&lt;note type=\"info\"&gt;\n  &lt;p&gt;Info Content.&lt;/p&gt;\n&lt;/note&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#markdown-dita-map-syntax","title":"Markdown DITA map syntax","text":"<p>DITA maps can be written in Markdown using standard Markdown syntax for links and lists.</p> <p>Note: Requires DITA-OT 4.1 or newer.</p> <p>In Markdown DITA, maps use the schema key in the YAML front matter block to define the file as a map:</p> <pre><code>---\n$schema: urn:oasis:names:tc:dita:xsd:map.xsd\n---\n\n# Map title\n\n- [Topic title](topic.md)\n  - [Nested title](nested.md)\n</code></pre> <pre><code>&lt;map&gt;\n  &lt;title&gt;Map Title&lt;/title&gt;\n  &lt;topicref href=\"topic.dita\" navtitle=\"Topic title\"&gt;\n    &lt;topicref href=\"nested.dita\" navtitle=\"Nested title\"/&gt;\n  &lt;/topicref&gt;\n&lt;/map&gt;\n</code></pre> <p>Unordered list items create <code>&lt;topicref&gt;</code> elements, and ordered list items create <code>&lt;topicref&gt;</code> elements with <code>collection-type=\"sequence\"</code>.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#key-definitions","title":"Key definitions","text":"<p>Keys can be defined using standard Markdown syntax for link reference definitions.</p> <pre><code>---\n$schema: urn:oasis:names:tc:dita:xsd:map.xsd\n---\n\n[key-name]: topic.md\n</code></pre> <pre><code>&lt;map&gt;\n  &lt;keydef href=\"topic.dita\" navtitle=\"Topic title\"/&gt;\n&lt;/map&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#relationship-tables","title":"Relationship tables","text":"<p>Relationship tables are tables with links inside cells.</p> <pre><code>---\n$schema: urn:oasis:names:tc:dita:xsd:map.xsd\n---\n\n| [Help](topic.md)  |                           |\n| ----------------- | ------------------------- |\n| [Topic](topic.md) | [Reference](reference.md) |\n</code></pre> <pre><code>&lt;map&gt;\n  &lt;reltable&gt;\n    &lt;relheader&gt;\n      &lt;relcolspec&gt;\n        &lt;topicref href=\"help.dita\"/&gt;\n      &lt;/relcolspec&gt;\n      &lt;relcolspec/&gt;\n    &lt;/relheader&gt;\n    &lt;relrow&gt;\n      &lt;relcell&gt;\n        &lt;topicref href=\"topic.dita\"/&gt;\n      &lt;/relcell&gt;\n      &lt;relcell&gt;\n        &lt;topicref href=\"reference.dita\"/&gt;\n      &lt;/relcell&gt;\n    &lt;/relrow&gt;\n  &lt;/reltable&gt;\n&lt;/map&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#common-syntax","title":"Common syntax","text":"<p>The following common Markdown constructs are processed in the same way for both <code>mdita</code> and <code>markdown</code> topics.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#hard-line-breaks","title":"Hard line breaks","text":"<p>A line break that is preceded by two or more spaces is parsed as a hard line break. Because DITA doesn\u2019t have a <code>&lt;br&gt;</code> element for line break, hard line breaks are converted into <code>&lt;?linebreak?&gt;</code> processing instructions.</p> <pre><code>foo\u00b7\u00b7\nbaz\n</code></pre> <pre><code>&lt;p&gt;foo&lt;?linebreak?&gt;baz&lt;/p&gt;\n</code></pre> <p>The LwDITA plug-in contains extensions for HTML5 and PDF outputs to generate line breaks.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#links","title":"Links","text":"<p>The format of local link targets is detected based on file name extension. The following extensions are treated as DITA files:</p> extension format <code>.dita</code> <code>dita</code> <code>.xml</code> <code>dita</code> <code>.md</code> <code>markdown</code> <code>.markdown</code> <code>markdown</code> <p>All other link targets detect the <code>format</code> from the file name extension and are treated as non-DITA files. Absolute link targets are treated as external scope links:</p> <pre><code>[Markdown](test.md)\n[DITA](test.dita)\n[HTML](test.html)\n[External](http://www.example.com/test.html)\n</code></pre> <pre><code>&lt;xref href=\"test.md\"&gt;Markdown&lt;/xref&gt;\n&lt;xref href=\"test.dita\"&gt;DITA&lt;/xref&gt;\n&lt;xref href=\"test.html\" format=\"html\"&gt;HTML&lt;/xref&gt;\n&lt;xref href=\"http://www.example.com/test.html\" format=\"html\" scope=\"external\"&gt;External&lt;/xref&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#images","title":"Images","text":"<p>Images used in inline content are processed with inline placement. If a block-level image contains a title, it is treated as an image wrapped in a figure element:</p> <pre><code>An inline ![Alt](test.jpg).\n\n![Alt](test.jpg)\n\n![Alt](test.jpg 'Title')\n</code></pre> <pre><code>&lt;p&gt;An inline &lt;image href=\"test.jpg\"&gt;&lt;alt&gt;Alt&lt;/alt&gt;&lt;/image&gt;.&lt;/p&gt;\n&lt;image href=\"test.jpg\" placement=\"break\"&gt;\n  &lt;alt&gt;Alt&lt;/alt&gt;\n&lt;/image&gt;\n&lt;fig&gt;\n  &lt;title&gt;Title&lt;/title&gt;\n  &lt;image href=\"test.jpg\"&gt;\n    &lt;alt&gt;Alt&lt;/alt&gt;\n  &lt;/image&gt;\n&lt;/fig&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#key-references","title":"Key references","text":"<p>Keys can be referenced using standard Markdown syntax for shortcut reference links:</p> <pre><code>[key]\n[link text][key]\n![image-key]\n</code></pre> <pre><code>&lt;xref keyref=\"key\"/&gt;\n&lt;xref keyref=\"key\"&gt;link text&lt;/xref&gt;\n&lt;image keyref=\"image-key\"/&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#inline","title":"Inline","text":"<p>The following inline elements are supported:</p> <pre><code>**bold**\n_italic_\n`code`\n~~strikethrough~~\n</code></pre> <pre><code>&lt;b&gt;bold&lt;/b&gt;\n&lt;i&gt;italic&lt;/i&gt;\n&lt;codeph&gt;code&lt;/codeph&gt;\n&lt;ph status=\"deleted\"&gt;strikethrough&lt;/ph&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-DITA-syntax/#lists","title":"Lists","text":"<p>Standard Markdown syntax is used for both ordered (numbered) and unordered (bulleted) lists.</p> <p>Unordered list items can be marked up using either asterisks \u201c<code>*</code>\u201d or hyphens \u201c<code>-</code>\u201d as list markers:</p> <pre><code>* one\n* two\n  - three\n  - four\n</code></pre> <pre><code>&lt;ul&gt;\n  &lt;li&gt;one&lt;/li&gt;\n  &lt;li&gt;two\n    &lt;ul&gt;\n      &lt;li&gt;three&lt;/li&gt;\n      &lt;li&gt;four&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Ordered lists use either numbers or number signs \u201c<code>#</code>\u201d, followed by a period:</p> <pre><code>1.  one\n2.  two\n    #. three\n    #. four\n</code></pre> <pre><code>&lt;ol&gt;\n  &lt;li&gt;one&lt;/li&gt;\n  &lt;li&gt;two\n    &lt;ol&gt;\n      &lt;li&gt;three&lt;/li&gt;\n      &lt;li&gt;four&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>Note: Markdown DITA supports both loose and tight list spacing (with no blank lines between list items). MDITA treats all lists as loose, and wraps each list item in a paragraph (<code>&lt;li&gt;&lt;p&gt;item&lt;/p&gt;&lt;/li&gt;</code>).</p> <p>Definition lists use the PHP Markdown Extra format with a single-line term followed by a colon and the definition:</p> <pre><code>Term\n: Definition.\n</code></pre> <pre><code>&lt;dl&gt;\n  &lt;dlentry&gt;\n    &lt;dt&gt;Term&lt;/dt&gt;\n    &lt;dd&gt;Defintion.&lt;/dd&gt;\n  &lt;/dlentry&gt;\n&lt;/dl&gt;\n</code></pre> <p>Each definition list entry must have only one term and contain only inline content.</p>"},{"location":"reference/markdown/Markdown-DITA-syntax/#metadata","title":"Metadata","text":"<p>A YAML metadata block as defined in the pandoc_metadata_block extension can be used to specify metadata elements for the DITA prolog.</p> <p>The supported elements are:</p> <ul> <li><code>author</code></li> <li><code>source</code></li> <li><code>publisher</code></li> <li><code>permissions</code></li> <li><code>audience</code></li> <li><code>category</code></li> <li><code>keyword</code></li> <li><code>resourceid</code></li> </ul> <p>Any unrecognized keys are output using the <code>&lt;data&gt;</code> element.</p> <pre><code>---\nauthor:\n  - Author One\n  - Author Two\nsource: Source\npublisher: Publisher\npermissions: Permissions\naudience: Audience\ncategory: Category\nkeyword:\n  - Keyword1\n  - Keyword2\nresourceid:\n  - Resourceid1\n  - Resourceid2\nworkflow: review\n---\n\n# Sample with YAML header\n</code></pre> <pre><code>&lt;title&gt;Sample with YAML header&lt;/title&gt;\n&lt;prolog&gt;\n  &lt;author&gt;Author One&lt;/author&gt;\n  &lt;author&gt;Author Two&lt;/author&gt;\n  &lt;source&gt;Source&lt;/source&gt;\n  &lt;publisher&gt;Publisher&lt;/publisher&gt;\n  &lt;permissions view=\"Permissions\"/&gt;\n  &lt;metadata&gt;\n    &lt;audience audience=\"Audience\"/&gt;\n    &lt;category&gt;Category&lt;/category&gt;\n    &lt;keywords&gt;\n      &lt;keyword&gt;Keyword1&lt;/keyword&gt;\n      &lt;keyword&gt;Keyword2&lt;/keyword&gt;\n    &lt;/keywords&gt;\n  &lt;/metadata&gt;\n  &lt;resourceid appid=\"Resourceid1\"/&gt;\n  &lt;resourceid appid=\"Resourceid2\"/&gt;\n  &lt;data name=\"workflow\" value=\"review\"/&gt;\n&lt;/prolog&gt;\n</code></pre>"},{"location":"reference/markdown/Markdown-schemas/","title":"Markdown schemas","text":"<p>Starting with version 5.0 of the LwDITA plug-in, the <code>MarkdownReader</code> class supports a new <code>$schema</code> key in the YAML front matter block. This key can be used to define parsing options in topic files for more control over how Markdown content is converted to DITA.</p> <p>Note: Requires DITA-OT 4.1 or newer.</p> <pre><code>---\n$schema: urn:oasis:names:tc:dita:xsd:concept.xsd\n---\n\n# Concept title\n\nShortdesc content.\n\nBody content.\n</code></pre> <p>The <code>$schema</code> value is a URI that is mapped to a parser configuration. This defines how the document should be parsed, i.e. which Markdown flavor it uses. The Markdown schema definition is similar to an XML document type declaration or <code>&lt;?xml-model?&gt;</code> processing instruction where the document defines how it should be optionally validated.</p> <p>Note: The schema URI resembles a reference to an XML Schema Definition or RELAX\u00a0NG schema, but no validation is currently performed.</p> <p>The <code>$schema</code> key must be the first key in the YAML header.</p> <p>The following schemas are built in to the <code>org.lwdita</code> plug-in.</p>"},{"location":"reference/markdown/Markdown-schemas/#dita-topic","title":"DITA topic","text":"<ul> <li><code>urn:oasis:names:tc:dita:xsd:topic.xsd</code></li> <li><code>urn:oasis:names:tc:dita:xsd:topic.rng</code></li> </ul>"},{"location":"reference/markdown/Markdown-schemas/#dita-concept","title":"DITA concept","text":"<ul> <li><code>urn:oasis:names:tc:dita:xsd:concept.xsd</code></li> <li><code>urn:oasis:names:tc:dita:xsd:concept.rng</code></li> </ul>"},{"location":"reference/markdown/Markdown-schemas/#dita-task","title":"DITA task","text":"<ul> <li><code>urn:oasis:names:tc:dita:xsd:task.xsd</code></li> <li><code>urn:oasis:names:tc:dita:xsd:task.rng</code></li> </ul>"},{"location":"reference/markdown/Markdown-schemas/#dita-reference","title":"DITA reference","text":"<ul> <li><code>urn:oasis:names:tc:dita:xsd:reference.xsd</code></li> <li><code>urn:oasis:names:tc:dita:xsd:reference.rng</code></li> </ul>"},{"location":"reference/markdown/Markdown-schemas/#dita-map","title":"DITA map","text":"<ul> <li><code>urn:oasis:names:tc:dita:xsd:map.xsd</code></li> <li><code>urn:oasis:names:tc:dita:xsd:map.rng</code></li> </ul>"},{"location":"reference/markdown/Markdown-schemas/#lightweight-dita-topic-extended-profile","title":"Lightweight DITA topic extended profile","text":"<ul> <li><code>urn:oasis:names:tc:mdita:xsd:topic.xsd</code></li> <li><code>urn:oasis:names:tc:mdita:rng:topic.rng</code></li> <li><code>urn:oasis:names:tc:mdita:extended:xsd:topic.xsd</code></li> <li><code>urn:oasis:names:tc:mdita:extended:rng:topic.rng</code></li> </ul>"},{"location":"reference/markdown/Markdown-schemas/#lightweight-dita-topic-core-profile","title":"Lightweight DITA topic core profile","text":"<ul> <li><code>urn:oasis:names:tc:mdita:core:xsd:topic.xsd</code></li> <li><code>urn:oasis:names:tc:mdita:core:rng:topic.rng</code></li> </ul>"},{"location":"release-notes/","title":"DITA Open Toolkit 4.1 Release Notes","text":"<p>DITA Open Toolkit 4.1.2 is a maintenance release that fixes issues reported in DITA-OT 4.1, which includes a new version of the Lightweight DITA plug-in with significant enhancements to Markdown processing, and updates for the latest DITA 2.0 draft standard.</p> <p>DITA-OT releases follow semantic versioning guidelines. Version numbers use the major.minor.patch syntax, where major versions may include incompatible API changes, minor versions add functionality in a backwards-compatible manner and patch versions are maintenance releases that include backwards-compatible bug fixes.</p> <p>Tip: Download the <code>dita-ot-4.1.2.zip</code> package from the project website at dita-ot.org/download.</p>"},{"location":"release-notes/#requirements-java-17","title":"Requirements: Java 17","text":"<p>DITA-OT 4.1 is designed to run on Java version 17 or later and built and tested with the Open Java Development Kit (OpenJDK). Compatible Java distributions are available from multiple sources:</p> <ul> <li>You can download the Oracle JRE or JDK from oracle.com/java under commercial license.</li> <li>Eclipse Temurin is the free OpenJDK distribution available from adoptium.net.</li> <li>Free OpenJDK distributions are also provided by Amazon Corretto, Azul Zulu, and Red Hat.</li> </ul> <p>Note: The Java virtual machine is generally backwards compatible, so class files built with earlier versions should still run correctly with Java 17 and DITA-OT 4.1. If your DITA-OT installation contains plug-ins with custom Java code, you may need to recompile these with Java 17\u200a\u2014\u200abut in most cases, this step should not be necessary.</p>"},{"location":"release-notes/#dita-ot-412","title":"DITA-OT 4.1.2","text":"<p>DITA Open Toolkit 4.1.2 is a maintenance release that includes the following bug fixes.</p> <ul> <li>Various issues in map-first preprocessing have been resolved in this release. #4237<ul> <li>Earlier versions failed to expand content references that were specified in key definitions. In\u00a0<code>preprocess2</code>, content references are now expanded before key references to ensure that all topics are available when the map is processed. #2420, #4258, #4261</li> <li>Key references to duplicate topics created via <code>@copy-to</code> attributes caused builds to fail. This issue was initially resolved for the original preprocessing routine in DITA-OT 3.1.1. The original source information is now also correctly recorded for copy-to targets in <code>preprocess2</code>, allowing builds to continue. #3007, #3015</li> <li>Earlier versions failed to catch certain validation errors in <code>preprocess2</code>. Map-first preprocessing has been updated to validate files correctly. #3281</li> <li>In DITA-OT 3.5 to 4.1, map-first preprocessing failed to report unresolved content references to topics that were not referenced in the map, and any key references they contained were not expanded. In the past, this issue could be avoided by adding content reference targets to the map with the <code>@processing-role</code> attribute set to <code>resource-only</code>, but this workaround is no longer necessary. Unresolved references should now be reported, and keys expanded even if the target topics are not referenced in the map. #3446, #3546</li> <li>Map-first preprocessing set incorrect values for the <code>path2project</code>, <code>path2project-uri</code>, and <code>path2rootmap-uri</code> processing instructions. In <code>preprocess2</code>, they are now set with correct values that match the original preprocess output. #3514, #4252</li> <li>The map-first preprocessing test code has been simplified to use the same expected output for the original preprocessing routines and <code>preprocess2</code>. #4268</li> </ul> </li> <li>Network file URI validation has been fixed to allow builds to continue when cross-references point to invalid URIs. Up until DITA-OT 3.6, the non-standard 2-slash format could be used to represent the server name in Windows UNC filenames such as <code>\\\\server\\folder\\file.pdf</code> using the Authority part of the URI as <code>file://server/folder/file.pdf</code>. Recent versions of DITA-OT required the correct 3-slash notation with an explicitly empty authority component (<code>file:///server/folder/file.pdf</code>), or builds would fail. Validation has been relaxed to restore support for the 2-slash format. #3718, #4255</li> <li>Chunk-to-content publishing failed on DITA map files whose paths included spaces. The chunk map reader module now normalizes map file paths to allow publishing to continue in these cases. #4064, #4257</li> <li> <p>The HTML5 plug-in has been updated to remove the remaining inline style attributes that prevented custom plug-ins from overriding the monospace font presentation of teletype <code>&lt;tt&gt;</code> elements. These changes move the default teletype styling to CSS to allow users to override the presentation in custom stylesheets. The output is visually equivalent to the results generated by previous toolkit versions. #4254, #4267</p> <p>Important: In publishing environments that do not use the default common CSS files, these styles may need to be implemented in custom stylesheets.</p> </li> <li> <p>Test coverage has been improved to include unit tests for preprocessing, integration tests for subject schemes, and unit tests for cascading metadata in duplicate topicrefs. #4259, #4264, #4280</p> </li> <li>In earlier versions, cross-references or other links to titles that contained footnotes included the footnote text. For a link to a target element that has no explicit link text, DITA-OT computes default link text from the target element. Link text computation now ignores any <code>&lt;fn&gt;</code> elements it encounters, so the link shows only the text from the <code>&lt;title&gt;</code> element. #4269, #4276</li> <li>When maps point to the same resource in multiple topic references with different navigation titles (or other topic metadata), older versions of DITA-OT used the metadata from the first reference for all subsequent instances. The original code was written to cascade metadata within the map and also collect metadata to be pushed to topics. This code worked when each topic was only referenced once. When there were duplicates, only the first topic reference got the correct cascaded metadata; the second reference was processed with the cascaded metadata, but also with the metadata from the first topicref. The code has been refactored to separate metadata cascading within maps from the collection of metadata to push to topics, so subsequent references to the same resource now retain the correct metadata for each instance. #4275, #4283, #4284</li> <li>The bundled XML Resolver has been upgraded to version 5.2.1, which no longer fails on invalid URI characters like spaces or Windows backslashes, and now also runs in environments with a restrictive security manager. #4274, #4279</li> </ul> <p>For additional information on the issues resolved since the previous release, see the 4.1.2 milestone and changelog on GitHub.</p>"},{"location":"release-notes/#dita-ot-411-released-july-20-2023","title":"DITA-OT 4.1.1 released July 20, 2023","text":"<p>DITA Open Toolkit 4.1.1 is a maintenance release that includes the following bug fixes.</p> <ul> <li>In previous releases, there were some cases in which a <code>&lt;desc&gt;</code> element inside an <code>&lt;xref&gt;</code> or <code>&lt;link&gt;</code> element was not annotated with the expected <code>ditaot usershortdesc</code> processing instruction during preprocessing. These omissions have been corrected to aid in debugging. (This change is relevant only within preprocessing, as these processing instructions are deleted when preprocessing completes.) #4155</li> <li>When building HTML output, earlier versions reported XSLT errors while resolving custom header files if paths used Windows backslash characters \u201c<code>\\</code>\u201d as separators. Path separators in args.ftr, args.hdf, and args.hdr parameter values are now converted to the forward slash character \u201c<code>/</code>\u201d to ensure URLs are valid before they are passed to XSLT. #4218, #4226</li> <li>For cross-references to a topic, the target topic\u2019s short description is processed to create a link description. When that <code>&lt;shortdesc&gt;</code> element contained another cross-reference, earlier versions did not process it correctly, and reported DOTX031E (file not available) errors during processing. This issue is now fixed, and link descriptions are created correctly. #4221, #4239</li> <li>Build scripts have been updated to ensure unit tests run correctly during Gradle builds. #4230</li> <li>The RELAX\u00a0NG grammar caching changes in DITA-OT 4.0 introduced a configuration bug that accidentally disabled XML Schema Definition validation. Processing and tests have been updated to ensure that XSD-based maps and topic files can be published correctly. #3926, #4234, #4238</li> <li>When logging was changed to use processing mode in DITA-OT 4.1, the change logged the exception without location. Logging code has been corrected to restore the location information to the exception, so errors once again show the line/column number where the problem appears. #4187, #4240, #4248</li> <li>Several dependencies have been upgraded to include the latest utility versions and fix security issues in bundled libraries:<ul> <li>Guava 32.1.1 #4227, #4245</li> <li>Jackson 2.15.2 #4216, #4228</li> <li>Logback 1.4.8 and SLF4J 2.0.7 #4246, #4250</li> <li>Saxon 12.3 #4241, #4247, #4250</li> </ul> </li> </ul> <p>For additional information on the issues resolved since the previous release, see the 4.1.1 milestone and changelog on GitHub.</p>"},{"location":"release-notes/#dita-ot-41-released-june-22-2023","title":"DITA-OT 4.1 released June 22, 2023","text":"<p>DITA Open Toolkit Release 4.1 includes a new version of the Lightweight DITA plug-in with significant enhancements to Markdown processing, and updates for the latest DITA 2.0 draft standard.</p>"},{"location":"release-notes/#plug-in-development-features","title":"Plug-in development features","text":"<ul> <li>Since DITA-OT 3.5, the <code>dita</code> plugins subcommand shows a list of the currently installed plug-ins by plug-in ID. To make it easier to determine which version of each plug-in is installed, the output now includes the version number for each plug-in as specified in the <code>plugin.xml</code> file. #4137, #4141</li> <li>Previously only files referenced from the start map could be parsed using a custom parser. The start map itself was always processed as DITA XML. As of DITA-OT 4.1, processing has been updated to also allow the start map to use a custom parser. This change allows recent versions of the LwDITA plug-in to process Markdown maps. #4159</li> <li>Plug-in developers can now configure custom parsers via SAX properties that provide a list of formats and processing mode. The LwDITA plug-in uses this mechanism to configure the options supported for Markdown and MDITA. #4205</li> </ul>"},{"location":"release-notes/#lightweight-dita-and-markdown-updates","title":"Lightweight DITA and Markdown updates","text":"<p>The <code>org.lwdita</code> plug-in has been updated to version 5.5, which includes performance improvements and updates to Markdown processing to reflect recent changes to the latest LwDITA drafts from OASIS.</p> <ul> <li> <p>Markdown output</p> <ul> <li>When generating Markdown output, the less-than \u201c&lt;\u201d and greater-than \u201c&gt;\u201d characters are now added to <code>&lt;xmlelement&gt;</code> content as in HTML and PDF output.</li> <li>Markdown output now treats programming and software domain elements as code spans and wraps the content in backtick quotes (<code>``\\) for better correspondence with HTML5 output, which wraps these elements in</code><code>`. <li> <p>Markdown input</p> </li> <li> <p>Standard Markdown syntax can now be used to indicate a span of code by wrapping it with backtick quotes (<code>``\\). In Markdown DITA input, these constructs are converted to DITA</code><code>elements on import, and rendered as</code><code><code>elements in HTML output. In MDITA input, backtick code spans are parsed as teletype</code>` elements to align with LwDITA, which supports teletype highlighting in XDITA. <li>The LwDITA plug-in supports a new <code>$schema</code> key in the YAML front matter block. This key can be used to define parsing options in topic files for more control over how Markdown content is converted to DITA. For more information, see Markdown schemas.</li> <li>Earlier versions of the plug-in failed to parse certain Markdown tables correctly. Table parsing has been improved to ensure these cases are properly processed.</li> <li>The MDITA core profile can now be specified via the new schema key in the YAML front matter block.</li> <li>Any <code>linefeed</code> processing instructions in Markdown input are now converted to line feeds in HTML5 and PDF output.</li> <li>Markdown DITA supports both loose and tight list spacing (with no blank lines between list items). MDITA treats all lists as loose, and wraps each list item in a paragraph: <code>&lt;li&gt;&lt;p&gt;item&lt;/p&gt;&lt;/li&gt;</code>.</li> <li>DITA maps can now be written in Markdown using standard Markdown syntax for links and lists.<ul> <li>In Markdown DITA, the schema key in the YAML front matter block is used to define the file as a map. Unordered list items create <code>&lt;topicref&gt;</code> elements, and ordered list items create <code>&lt;topicref&gt;</code> elements with <code>@collection-type</code>=sequence. List items without a link are treated as topic heads.</li> <li>In MDITA, maps use the file name extension <code>mditamap</code> to define the file as a map. Both ordered and unordered list items create <code>&lt;topicref&gt;</code>, and any unlinked topic heads are ignored.</li> </ul> </li> <li>The flexmark Markdown parsing library has been updated to version 0.64.</li> <li> <p>The XDITA plug-in has been updated to version 0.3.0, which includes recent changes to the grammar files from OASIS (as of June 18, 2023). #4214</p> </li>"},{"location":"release-notes/#updated-dita-20-preview","title":"Updated DITA 2.0 preview","text":"<p>In addition to the DITA 2.0 preview support provided in DITA-OT 3.5 \u2013 4.0, this release includes updated processing for the latest draft versions of the DITA 2.0 grammar files from OASIS (as of April 26, 2023).</p> <ul> <li> <p>DITA 2.0 splits the programming and syntax domains (so you can use one without the other).</p> <p>The syntax diagram elements move from the programming domain to a new syntax diagram domain, which results in new class attribute tokens. All elements and content models remain the same.</p> <p>HTML5 and PDF processing has been updated for DITA-OT 4.1 to support syntax diagram elements from DITA 2.0, so that processing matches what those elements did in DITA 1.3. #4082</p> </li> <li> <p>DITA 2.0 removes the xNAL domain and classification domains. #4177</p> </li> </ul> <p>DITA documents that reference the draft grammar files can be parsed, and where features overlap with DITA 1.3, those features will work as expected.</p> <p>Note: Other new or revised features proposed for DITA 2.0 are not yet supported. Additional features will be implemented in future versions of DITA-OT as the specification evolves.</p>"},{"location":"release-notes/#enhancements-and-changes","title":"Enhancements and changes","text":"<p>DITA Open Toolkit Release 4.1 includes the following enhancements and changes to existing features:</p> <ul> <li>When publishing to HTML and PDF, email links no longer include the <code>mailto:</code> prefix in the default link text. #4020, #4089</li> <li>When filtering profiled content with DITAVAL files that exclude content by default, the DOTJ031I message no longer appears when no rule is specified for a certain attribute. #4048, #4073</li> <li>The Java code has been refactored to use new language and library features from recent Java versions. These changes make the code more future-proof and easier to maintain. #4090, #4091, #4092, #4121</li> <li>The following bundled plug-ins have been upgraded to the latest versions:<ul> <li>The Normalized DITA plug-in version 1.1 now removes unnecessary key artefacts like <code>@keys</code>, <code>@keyref</code> or <code>&lt;keydef&gt;</code> after key resolution, and <code>&lt;ditavalref&gt;</code> elements after branch filter resolution. #4140</li> <li>The Lightweight DITA plug-in version 5.5 includes the Lightweight DITA and Markdown updates described above. #4167, #4178, #4210</li> <li>The PDF Theme plug-in version 0.7.0 adds support for tasks, and the hazard, highlight, markup, UI, and XML domains, so you can now style these elements in a YAML theme file without building a custom PDF plug-in. #4194</li> </ul> </li> <li>Several bundled dependencies have been upgraded to the latest versions:<ul> <li>Ant 1.10.13 #4182</li> <li>FOP 2.8 #4183, #4011</li> <li>Gradle wrapper 7.6.1 #4197</li> <li>Saxon 12.2 #4130</li> </ul> </li> </ul>"},{"location":"release-notes/#bug-fixes","title":"Bug fixes","text":"<p>DITA Open Toolkit Release 4.1 provides fixes for the following bugs:</p> <ul> <li>Earlier versions of Map-first preprocessing (preprocess2) failed to copy non-DITA files to the output directory. Processing has been updated to copy media files and other linked assets. #3242, #3966, #4132</li> <li>When a map contained references to nested subtopics within the same topic file, earlier versions would process the file multiple times during branch filtering. The output was correct but runtime was increased. This issue has been fixed so that the topic file is only filtered once. #3903, #4152</li> <li>In earlier versions, cross-references to <code>&lt;fn&gt;</code> footnote elements without target text were rendered with two levels of <code>&lt;sup&gt;</code> superscript formatting in XHTML and HTML5 output. Now, these links are only superscripted once. #3967, #3968</li> <li>When generating PDF output, earlier versions failed with the PDFX005F error when topic references targeted external resources with the <code>@scope</code> attribute set to <code>external</code>. Processing has been updated to properly recognize external resources and allow builds to complete. #4131</li> <li>Earlier versions included DITA 2.0 grammar files from OASIS that referenced non-public URNs. The files have been updated to the latest versions (as of April 26, 2023), which include updated references in the RELAX\u00a0NG files. #4144, #4177</li> <li>Earlier versions reported errors when processing DITA 2.0 content with empty <code>@specializations</code> attribute values. Processing has been updated to handle these cases correctly. #4165</li> <li>When generating HTMLHelp with DITA-OT 4.0, builds failed with the DOTA015F error. HTMLHelp has been updated to replace the outdated <code>preprocess.copy-image.skip</code> property with the corresponding DITA 4.0 <code>build-step.copy-image</code> property for compatibility with recent toolkit versions. #4181, #4186</li> <li>When topic short descriptions contain cross-reference links that point to one another in circular references across topics, earlier versions would fail with an infinite-recursion stylesheet loop. Now, <code>&lt;shortdesc&gt;</code> descriptions in referenced elements are processed only one level deep. #4184, #4185</li> <li>In earlier versions, setting the processing-mode parameter to strict would only stop processing if errors were reported from the Java code. Any XSLT errors were logged to the console, but processing continued. Now, XSLT errors will also stop processing, so strict mode is a bit \u2026 stricter. #4187</li> </ul>"},{"location":"release-notes/#contributors","title":"Contributors","text":"<p>DITA Open Toolkit Release 4.1 includes code contributions by the following people:</p> <ol> <li>Jarno Elovirta</li> <li>Robert D Anderson</li> <li>Radu Coravu</li> <li>Chris Papademetrious</li> <li>Roger Sheen</li> <li>Duna Marius Cosmin</li> <li>Josh Johnson</li> <li>Toshihiko Makita</li> </ol> <p>For the complete list of changes since the previous release, see the changelog on GitHub.</p>"},{"location":"release-notes/#documentation-updates","title":"Documentation updates","text":"<p>The documentation for DITA Open Toolkit Release 4.1 provides corrections and improvements to existing topics, along with new information in the following topics:</p> <ul> <li>Publishing with project files</li> <li>Markdown input</li> <li>Generating Markdown output</li> <li>Extension point reference</li> <li>Markdown formats<ul> <li>Markdown DITA syntax</li> <li>MDITA syntax</li> <li>Format comparison</li> <li>Markdown schemas</li> <li>Custom schemas</li> </ul> </li> </ul> <p>For additional information on documentation issues resolved in DITA Open Toolkit Release 4.1, see the 4.1 milestone in the documentation repository.</p> <p>DITA Open Toolkit Release 4.1 includes documentation contributions by the following people:</p> <ol> <li>Roger Sheen</li> <li>Jarno Elovirta</li> <li>Lief Erickson</li> <li>Darrenn Jackson</li> <li>Mark Giffin</li> </ol> <p>For the complete list of documentation changes since the previous release, see the changelog.</p>"},{"location":"resources/conref-task/","title":"Conref file for tasks","text":"<p>DITA-OT releases follow semantic versioning guidelines. Version numbers use the major.minor.patch syntax, where major versions may include incompatible API changes, minor versions add functionality in a backwards-compatible manner and patch versions are maintenance releases that include backwards-compatible bug fixes.</p> <p>Custom plug-ins developed for a previous major version may require changes to work correctly with recent toolkit versions. Most plug-ins should be compatible with subsequent minor and patch versions of the major release for which they were originally developed.</p> <ul> <li> <p>Standard Path / Directory Names</p> <p><code>*dita-ot-dir*</code></p> <p><code>dita</code></p> <p><code>*dita-ot-dir*/docsrc</code></p> <p><code>*dita-ot-dir*/docsrc/samples</code></p> <p><code>*/absolute/path/to/dita-ot-dir*/docsrc/samples</code></p> </li> <li> <p>Plug-In Info</p> <ul> <li><code>*&amp;lt;plug-in-id&amp;gt;*</code> is the unique ID of the plug-in, as defined in the plug-in\u2019s configuration file (<code>plugin.xml</code>).</li> <li><code>*plug-in-zip*</code> is the filename or URL of the plug-in\u2019s distribution ZIP file (optional).</li> <li>the optional <code>*&amp;lt;plug-in&amp;gt;*</code> argument is one of the following:<ul> <li>the unique ID of the plug-in as defined in the plug-in registry at dita-ot.org/plugins (or a local registry)</li> <li>the remote URL of the plug-in\u2019s distribution ZIP file</li> <li>the name of a local ZIP file</li> </ul> </li> <li>If no ID, URL, or file argument is provided, the installation process reloads the current set of plug-ins from the <code>plugins</code> directory (or any custom locations defined via the pluginsdir property in the <code>configuration.properties</code> file in the <code>config</code> directory). This approach can be used to add or remove multiple plug-ins at once, or any individual plug-ins you have already copied to (or removed from) the plug-in directories. Any plug-ins added or removed in the process will be listed by their plug-in ID.</li> <li> <p>Attention: The <code>uninstall</code> subcommand also removes the corresponding plug-in directory from the <code>plugins</code> folder.</p> </li> <li> <p>Note: In earlier versions of DITA-OT (2.4\u20133.4), use the double-hyphen option syntax <code>dita</code> --uninstall. In DITA-OT 2.0\u20132.3, use the single-hyphen form: <code>dita</code></p> </li> </ul> </li> <li> <p>Download the <code>dita-ot-4.1.2.zip</code> package from the project website at dita-ot.org/download.</p> </li> <li> <p>Open a command prompt or terminal session.</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> <li> <p>format is the output format (transformation type). This argument corresponds to the common parameter transtype. Use the same values as for the transtype build parameter, for example html5 or pdf.</p> </li> <li> <p>format is the output format (transformation type). This argument corresponds to the common parameter transtype. Use the same values as for the transtype build parameter, for example html5 or pdf.</p> <p>You can create plug-ins to add new output formats; by default, the following values are available:</p> <ul> <li>dita</li> <li>eclipsehelp</li> <li>html5</li> <li>htmlhelp</li> <li>markdown, markdown_gitbook, and markdown_github</li> <li>pdf</li> <li>xhtml Tip: See DITA-OT transformations (output formats) for sample command line syntax and more information on each transformation.</li> </ul> </li> <li> <p>[options] include the following optional build parameters:</p> <ul> <li> <p>--debug -d</p> <p>Debug logging prints considerably more additional information. The debug log includes all information from the verbose log, plus details on Java classes, additional Ant properties and overrides, preprocessing filters, parameters, and stages, and the complete build sequence. Debug logging requires additional resources and can slow down the build process, so it should only be enabled when further details are required to diagnose problems.</p> </li> <li> <p>--output=dir -o dir</p> <p>Specifies the path of the output directory; the path can be absolute or relative to the current directory.</p> <p>This option corresponds to the common parameter output.dir.</p> <p>By default, the output is written to the <code>out</code> subdirectory of the current directory.</p> </li> <li> <p>--filter=files</p> <p>Specifies filter file(s) used to include, exclude, or flag content. Relative paths are resolved against the current directory and internally converted to absolute paths.</p> <p>Note:</p> <p>To specify multiple filter files, use the system path separator character to delimit individual file paths (semicolon \u2018<code>;</code>\u2019 on Windows, and colon \u2018<code>:</code>\u2019 on macOS and Linux) and wrap the value in quotes:</p> <p><code>--filter=\"filter1.ditaval;filter2.ditaval;filter3.ditaval\"</code></p> <p>As of DITA-OT 3.6, the --filter option can also be passed multiple times:</p> <p><code>--filter=filter1.ditaval --filter=filter2.ditaval --filter=filter3.ditaval</code></p> <p>DITAVAL files are evaluated in the order specified, so conditions specified in the first file take precedence over matching conditions specified in later files, just as conditions at the start of a DITAVAL document take precedence over matching conditions later in the same document.</p> </li> <li> <p>--force</p> <p>Force-install an existing plug-in.</p> <p>Passed as an additional option to the installation subcommand: <code>dita install</code> plug-in-zip --force</p> </li> <li> <p>--help -h</p> <p>Print a list of available arguments, options, and subcommands.</p> </li> <li> <p>--logfile=file -l file</p> <p>Write logging messages to a file.</p> </li> <li> <p>--parameter=value __-D___parameter_=value</p> <p>Specify a value for a DITA-OT or Ant build parameter.</p> <p>The GNU-style --parameter=value form is only available for parameters that are configured in the plug-in configuration file; the Java-style -D form can also be used to specify additional non-configured parameters or set system properties.</p> <p>Parameters not implemented by the specified transformation type or referenced in a <code>.properties</code> file are ignored.</p> <p>Tip: If you are building in different environments where the location of the input files is not consistent, set args.input.dir with the <code>dita</code> command and reference its value with <code>${args.input.dir}</code> in your <code>.properties</code> file.</p> </li> <li> <p>--propertyfile=file</p> <p>Use build parameters defined in the referenced <code>.properties</code> file.</p> <p>Build parameters specified on the command line override those set in the <code>.properties</code> file.</p> </li> <li> <p>--repeat=N</p> <p>Repeat the transformation N number of times.</p> <p>This option can be used by plug-in developers to measure performance. To run a conversion five times, for example, use --repeat=5. The duration of each execution will appear in the console when the final transformation is complete.</p> <p><code>$ `dita` **--input**=`docsrc/samples/sequence.ditamap` **--format**=html5 \\        **--repeat**=5 1 11281ms 2 4132ms 3 3690ms 4 4337ms 5 3634ms</code></p> </li> <li> <p>--resource=file -r file</p> <p>Specifies resource files.</p> <p>This argument corresponds to the common parameter args.resources.</p> <p>Resource files can be used to convert partial documentation sets by processing input with additional information.</p> <p>For example, to process a single topic file with a map that contains key definitions, use a command like this:</p> <p><code>syntax-bash `dita` **--input**=`topic.dita` **--resource**=`keys.ditamap` **--format**=html5</code></p> <p>To convert a chapter map to HTML5 and insert related links from relationship tables in a separate map, use:</p> <p><code>syntax-bash `dita` **--input**=`chapter.ditamap` **--resource**=`reltables.ditamap` **--format**=html5</code></p> </li> <li> <p>--temp=dir -t dir</p> <p>Specifies the location of the temporary directory.</p> <p>This option corresponds to the common parameter dita.temp.dir.</p> <p>The temporary directory is where DITA-OT writes intermediate files that are generated during the transformation process.</p> </li> <li> <p>--verbose -v</p> <p>Verbose logging prints additional information to the console, including directory settings, effective values for Ant properties, input/output files, and informational messages to assist in troubleshooting.</p> </li> </ul> </li> </ul> <p>If processing is successful, nothing is printed in the terminal window. The built output is written to the specified output directory (by default, in the <code>out</code> subdirectory of the current directory).</p> </li> <li> <p>Extending pre-processing</p> <p>Tip: For maximum compatibility with future versions of DITA-OT, most plug-ins should use the extension points that run before or after pre-processing.</p> <p>CAUTION:</p> <p>The internal order of preprocessing steps is subject to change between versions of DITA-OT. New versions may remove, reorder, combine, or add steps to the process, so the extension points within the preprocessing stage should only be used if absolutely necessary.</p> </li> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> </ul> <p>Tip: Copy <code>*dita-ot-dir*/docsrc/samples``/properties/template.properties</code>; this template describes each of the properties you can set.</p> <p>Tip: If you are building in different environments where the location of the input files is not consistent, set args.input.dir with the <code>dita</code> command and reference its value with <code>${args.input.dir}</code> in your <code>.properties</code> file.</p> <ol> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol>"},{"location":"resources/reusable-components/","title":"Re-usable components","text":"<p>Warehouse topic used to store re-usable content for concept topics or other constructs that would not be valid in the existing warehouse task <code>conref-task.dita</code>.</p>"},{"location":"resources/reusable-components/#upgrade-stylesheets-to-xslt-20","title":"Upgrade stylesheets to XSLT 2.0","text":"<p>The Saxon project has announced plans to remove XSLT 1.0 support from the Saxon-HE library that ships with DITA-OT:</p> <p>\u2026we\u2019re dropping XSLT 1.0 backwards compatibility mode from Saxon-HE, and hope to eliminate it entirely in due course.</p> <p>https://www.xml.com/news/release-saxon-98/</p> <p>DITA-OT 3.0 and 3.0.1 included Saxon-HE 9.8.0.5, which rejects XSLT stylesheets that specify <code>version=\"1.0\"</code>. Plug-ins with XSLT templates specifying version 1.0 will fail with the message \u201c<code>XSLT 1.0 compatibility mode is not available in this configuration</code>.\u201d</p> <p>To resolve this issue, change any occurrences of <code>&lt;xsl:stylesheet version=\"1.0\"&gt;</code> in custom plug-in stylesheets to at least <code>&lt;xsl:stylesheet version=\"2.0\"&gt;</code>.</p> <p>Tip: DITA-OT 3.0.2 includes Saxon-HE 9.8.0.7, which restores XSLT 1.0 backwards-compatibility mode, but the DITA Open Toolkit project recommends upgrading all stylesheets to XSLT 2.0 to ensure plug-ins remain compatible with future versions of DITA-OT and Saxon-HE.</p>"},{"location":"resources/reusable-components/#validating-plug-ins","title":"Validating plug-ins","text":"<p>DITA-OT includes a RELAX\u00a0NG schema file that can be used to validate the <code>plugin.xml</code> files that define the capabilities of each plug-in.</p> <p>To ensure the syntax of your custom plug-in is correct, include an <code>xml-model</code> processing instruction at the beginning of the <code>plugin.xml</code> file, immediately after the XML prolog:</p> <p><code>xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"</code></p> <p>If your authoring environment does not apply this schema automatically, point your editor to <code>*dita-ot-dir*/resources/plugin.rnc</code> to associate the schema with your plug-in file.</p>"},{"location":"resources/reusable-components/#dita-for-print-a-dita-open-toolkit-workbook-second-edition-2017","title":"DITA for Print: A DITA Open Toolkit Workbook (Second Edition, 2017)","text":"<p>Authored by Leigh W. White, DITA Specialist at IXIASOFT, and published by XML Press, DITA for Print walks readers through developing a PDF customization from scratch.</p> <p>Here is an excerpt from the back cover:</p> <p>DITA for Print is for anyone who wants to learn how to create PDFs using the DITA Open Toolkit without learning everything there is to know about XSL-FO, XSLT, or XPath, or even about the DITA Open Toolkit itself. DITA for Print is written for non-programmers, by a non-programmer, and although it is written for people who have a good understanding of the DITA standard, you don\u2019t need a technical background to get custom PDFs up and running quickly.</p> <p>This is an excellent, long-needed resource that was initially developed in 2013 for DITA-OT 1.8.</p> <p>The second edition has been revised to cover DITA Open Toolkit Version 2, including customizing the DITA 1.3 troubleshooting topic type, localization strings, bookmarks, and the new back-cover functionality.</p> <p>Important:</p> <p>The first edition of DITA for Print recommended copying entire files from the PDF2 plug-in to your custom plug-in. The DITA-OT project \u2014 and the second edition of the book \u2014 do not recommend this practice.</p> <p>Instead, you should copy only the specific attribute sets and templates that you want to override. Following this practice will more cleanly isolate your customizations from the DITA-OT code, which will make it easier for you to update your plug-ins to work with future versions of DITA-OT.</p>"},{"location":"resources/reusable-components/#dita-for-practitioners-volume-1-architecture-and-technology-2012","title":"DITA for Practitioners: Volume 1, Architecture and Technology (2012)","text":"<p>Authored by Eliot Kimber and published by XML Press, this seminal resource contains a chapter dedicated to DITA Open Toolkit: \u201cRunning, Configuring, and Customizing the Open Toolkit\u201d. In addition to a robust overview of DITA-OT customization and extension, the chapter contains a detailed example of customizing a PDF plug-in to specify 7\" \u00d7 10\" paper size and custom fonts for body text and headers.</p> <p>The DITA-OT chapter in DITA for Practitioners: Volume 1 was written for DITA-OT 1.5.4, which was the latest stable version at the time it was written.</p>"},{"location":"resources/reusable-components/#supported-java-versions","title":"Supported Java versions","text":"<p>DITA-OT 4.1 is designed to run on Java version 17 or later and built and tested with the Open Java Development Kit (OpenJDK). Compatible Java distributions are available from multiple sources:</p> <ul> <li>You can download the Oracle JRE or JDK from oracle.com/java under commercial license.</li> <li>Eclipse Temurin is the free OpenJDK distribution available from adoptium.net.</li> <li>Free OpenJDK distributions are also provided by Amazon Corretto, Azul Zulu, and Red Hat.</li> </ul> <p>Note: The Java virtual machine is generally backwards compatible, so class files built with earlier versions should still run correctly with Java 17 and DITA-OT 4.1. If your DITA-OT installation contains plug-ins with custom Java code, you may need to recompile these with Java 17\u200a\u2014\u200abut in most cases, this step should not be necessary.</p>"},{"location":"resources/reusable-components/#limitations-of-map-first-pre-processing","title":"Limitations of map-first pre-processing","text":"<p>The internal extension points that run before or after individual steps in the original <code>preprocess</code> pipeline (<code>preprocess.*.pre/preprocess.*.post</code>) are not available in the newer map-first preprocessing pipeline (<code>preprocess2</code>), which is used in the PDF and HTML Help transformations as of DITA-OT 3.0.</p>"},{"location":"resources/reusable-components/#unbundled-plug-ins","title":"Unbundled plug-ins","text":"<p>Note: If necessary, legacy plug-ins may be re-installed from earlier DITA-OT distributions, but they are no longer actively maintained or supported by the core toolkit committers. The source code is available on GitHub for anyone interested in maintaining the plug-ins for use with future toolkit versions.</p>"},{"location":"resources/reusable-components/#new-subcommands-in-35","title":"New subcommands in 3.5","text":"<ul> <li> <p><code>dita deliverables</code></p> <p>Prints the list of deliverables in a project file</p> </li> <li> <p><code>dita install</code></p> <p>Installs or reloads plug-ins (replaces <code>dita</code> --install)</p> </li> <li> <p><code>dita plugins</code></p> <p>Prints a list of installed plug-ins (replaces <code>dita</code> --plugins)</p> </li> <li> <p><code>dita transtypes</code></p> <p>Prints a list of installed transformation types, or output formats (replaces <code>dita</code> --transtypes)</p> </li> <li> <p><code>dita uninstall</code></p> <p>Removes and deletes a plug-in (replaces <code>dita</code> --uninstall)</p> </li> <li> <p><code>dita version</code></p> <p>Prints version information and exits (replaces <code>dita</code> --version)</p> </li> </ul>"},{"location":"resources/reusable-components/#recommendations-for-upgrading-dita-ot-customizations","title":"Recommendations for upgrading DITA-OT customizations","text":"<p>When migrating customizations, identify the version of the toolkit you're currently using (base version) and the version of the toolkit you want to migrate to (target version). Then, review all of the migration changes described in all of the versions from the base through the target. For instance, if you're currently on 2.2 and want to move to 3.3, you should review all of the changes in 2.3 through 3.3. You may want to start at the oldest version and read forward so you can chronologically follow the changes, since it is possible that files or topics have had multiple changes.</p>"},{"location":"resources/reusable-components/#common-format-for-generated-text","title":"Common format for generated text","text":"<p>Prior to DITA-OT 3.7, there were two different XML structures for adding or modifying generated text (gentext). The base plug-in org.dita.base and any custom overrides defined via the dita.strings.xsl extension point used a root element <code>&lt;strings&gt;</code>, with individual strings in <code>&lt;str&gt;</code> elements with <code>@name</code> attributes. This format was previously used for HTML, and all other output formats except PDF.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;strings xml:lang=\"en-US\"&gt;\n  &lt;str name=\"String1\"&gt;English generated text&lt;/str&gt;\n&lt;/strings&gt;\n</code></pre> <p>The PDF plug-in org.dita.pdf2 used a root element <code>&lt;vars&gt;</code> with an XML namespace, and strings in <code>&lt;variable&gt;</code> elements with <code>@id</code> attributes.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;vars xmlns=\"http://www.idiominc.com/opentopic/vars\"&gt;\n  &lt;variable id=\"String1\"&gt;English generated text&lt;/variable&gt;\n&lt;/vars&gt;\n</code></pre> <p>Starting with DITA-OT 3.7, these structures have been deprecated and replaced with a new unified format. All files now use <code>&lt;variables&gt;</code> as the root element, with the <code>&lt;variable&gt;</code> elements previously used in PDF strings. The new format supports the XSL parameters used by the earlier PDF strings format to pass dynamic information such as chapter numbers or figure titles.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;variables&gt;\n  &lt;variable id=\"String1\"&gt;English generated text&lt;/variable&gt;\n&lt;/variables&gt;\n</code></pre> <p>The old formats are still supported, but plug-in developers should update any generated text files to reflect the new structure, as support for the old formats may be removed in a future release. #3817</p> <p>Tip: For details on the differences in Markdown formats, see Markdown DITA syntax, MDITA syntax, and Format comparison.</p>"},{"location":"resources/theme/Extending-themes/","title":"Extending themes","text":"<p>A theme can extend another theme using the <code>extends</code> key. The value of <code>extends</code> is a relative path from the current theme file to the theme being extended.</p> <p><code>base.yaml</code></p> <pre><code>brand:\n  primary-color: orange\npage:\n  size: A4\n</code></pre> <p><code>product/theme.yaml</code></p> <pre><code>extends: ../base.yaml\npage:\n  size: Letter\nstyle:\n  topic:\n    color: $brand-primary-color\n</code></pre>"},{"location":"resources/theme/Header-and-footer/","title":"Header and footer","text":"<p>The <code>content</code> key in <code>header</code> or <code>footer</code> can be used to add text to running header or footer content. Content can include static text, or reference variables using curly braces.</p> <p>The following variable fields are currently supported:</p> <ul> <li><code>title</code>: Map title</li> <li><code>chapter</code>: Map chapter title</li> <li><code>folio</code>: current page number</li> <li><code>folio-with-total</code>: current page number with total number of pages</li> <li><code>page-number</code>: current page number</li> <li><code>page-count</code>: total number of pages</li> <li><code>year</code>: current year</li> </ul> <pre><code>header:\n  content: '{title} \u2014 {chapter}'\n  border-after: solid 1pt black\n</code></pre> <p>To define separate headers or footers for recto (right) and verso (left) pages, use the <code>odd</code> and <code>even</code> keys.</p> <pre><code>header:\n  border-after: solid 1pt black\n  odd:\n    content: '{title}'\n    text-align: end\n  even:\n    content: '{chapter}'\n    text-align: start\n</code></pre>"},{"location":"resources/theme/Page-settings/","title":"Page settings","text":"<p>Page size and orientation can be set with the <code>size</code> and <code>orientation</code> keys. Page margins are set with the <code>top</code>, <code>outside</code>, <code>bottom</code>, and <code>inside</code> keys.</p> <pre><code>page:\n  size: A4\n  orientation: portrait\n  top: 20mm\n  outside: 20mm\n  bottom: 20mm\n  inside: 30mm\n  mirror-margins: true\n</code></pre> <p>The <code>size</code> key supports the following values:</p> <ul> <li><code>A3</code></li> <li><code>A4</code></li> <li><code>A5</code></li> <li><code>Executive</code></li> <li><code>JIS B5</code></li> <li><code>Tabloid</code></li> <li><code>Legal</code></li> <li><code>Letter</code></li> <li><code>PA4</code></li> </ul> <p>If a required page size is not supported, <code>height</code> and <code>width</code> keys can be used to define the page size.</p> <p>Use the <code>mirror-margins</code> key to set up facing pages for double-sided documents.</p> <p>When this key is set to <code>true</code>, the margins of the left page are a mirror image of those on the right page. The <code>inside</code> margins of left and right pages are the same, and the <code>outside</code> margins of left and right pages are identical.</p> <p>The mirror margins setting defaults to <code>false</code>.</p>"},{"location":"resources/theme/Styles/","title":"Styles","text":"<p>The presentation of various block and inline elements can be adjusted by setting <code>style</code> keys. Each category takes XSL-FO key definitions and keys specific to that style.</p> <p>While the style keys may look like CSS, the keys are XSL-FO properties and the underlying PDF2 plug-in does not use CSS compatibility properties.</p> <ul> <li>Instead of <code>padding-top</code>, use <code>padding-before</code>.</li> <li>Instead of <code>margin-left</code>, use <code>start-indent</code>. Note that these two keys do not have matching semantics, see XSL 1.1.</li> </ul> <p>There is no default theme that defines base key values. Instead, a theme extends the PDF2 default styling. If you want to define common settings, create a theme file for shared settings, and use the <code>extends</code> key in other themes to build on the common foundation.</p> <pre><code>style:\n  body:\n    font-family: serif\n    font-size: 12pt\n    space-after: 6pt\n    space-before: 6pt\n    start-indent: 25pt\n  topic:\n    font-family: sans-serif\n    font-size: 26pt\n  link:\n    color: blue\n    text-decoration: underline\n</code></pre>"},{"location":"resources/theme/Styles/#block-keys","title":"Block keys","text":""},{"location":"resources/theme/Styles/#body","title":"<code>body</code>","text":"<p>Default body text, for example <code>&lt;p&gt;</code> elements.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#shortdesc","title":"<code>shortdesc</code>","text":"<p>Shortdesc and abstract styles.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#h1","title":"<code>h1</code>","text":"<p>First-level topic titles.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>title-numbering = boolean</code></li> </ul>"},{"location":"resources/theme/Styles/#h2","title":"<code>h2</code>","text":"<p>Second-level topic titles.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>title-numbering = boolean</code></li> </ul>"},{"location":"resources/theme/Styles/#h3","title":"<code>h3</code>","text":"<p>Third-level topic titles.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>title-numbering = boolean</code></li> </ul>"},{"location":"resources/theme/Styles/#h4","title":"<code>h4</code>","text":"<p>Fourth-level topic titles.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>title-numbering = boolean</code></li> </ul>"},{"location":"resources/theme/Styles/#cover","title":"<code>cover</code>","text":"<p>Cover page.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#cover-title","title":"<code>cover-title</code>","text":"<p>Cover page title.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>content = content-template</code></li> </ul>"},{"location":"resources/theme/Styles/#section","title":"<code>section</code>","text":"<p>Section element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#section-title","title":"<code>section-title</code>","text":"<p>Section element title.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#dl","title":"<code>dl</code>","text":"<p>Definition list element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>dl-type = 'table' | 'list' | 'html'</code> \u2014 Style definition list as bulleted list or indented list.</li> </ul>"},{"location":"resources/theme/Styles/#example","title":"<code>example</code>","text":"<p>Example element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#example-title","title":"<code>example-title</code>","text":"<p>Example element title.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#fig","title":"<code>fig</code>","text":"<p>Figure element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>caption-number = 'chapter' | 'document'</code> \u2014 Number figures with chapter prefix or use whole document numbering.</li> <li><code>caption-position = 'before' | 'after'</code> \u2014 Place figure caption before or after figure.</li> </ul>"},{"location":"resources/theme/Styles/#fig-caption","title":"<code>fig-caption</code>","text":"<p>Figure caption.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>content</code>: Contents of figure caption. Supported fields are:<ul> <li><code>number</code>: caption number</li> <li><code>title</code>: caption contents</li> </ul> </li> </ul>"},{"location":"resources/theme/Styles/#note","title":"<code>note</code>","text":"<p>Note element with <code>@type</code> <code>note</code> or without <code>@type</code>.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#note-label","title":"<code>note-label</code>","text":"<p>Label for note elements.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p> <ul> <li><code>content</code> \u2014 Content template.</li> </ul>"},{"location":"resources/theme/Styles/#note-type","title":"<code>note-&lt;type&gt;</code>","text":"<p>Note element with <code>@type</code>. Type values are:</p> <ul> <li><code>note</code></li> <li><code>tip</code></li> <li><code>fastpath</code></li> <li><code>restriction</code></li> <li><code>important</code></li> <li><code>remember</code></li> <li><code>attention</code></li> <li><code>caution</code></li> <li><code>notice</code></li> <li><code>danger</code></li> <li><code>warning</code></li> <li><code>trouble</code></li> <li><code>other</code></li> </ul> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#note-type-label","title":"<code>note-&lt;type&gt;-label</code>","text":"<p>Label for note elements with <code>@type</code>.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p> <ul> <li><code>content</code> \u2014 Content template.</li> </ul>"},{"location":"resources/theme/Styles/#ol","title":"<code>ol</code>","text":"<p>Ordered list.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#ul","title":"<code>ul</code>","text":"<p>Unordered list.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#pre","title":"<code>pre</code>","text":"<p>Preformatted element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#codeblock","title":"<code>codeblock</code>","text":"<p>Code block element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>line-numbering = boolean</code> \u2014 Line numbering.</li> <li><code>show-whitespace = boolean</code> \u2014 Show whitespace characters.</li> </ul>"},{"location":"resources/theme/Styles/#table","title":"<code>table</code>","text":"<p>Table element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>caption-number = 'chapter' | 'document'</code> \u2014 Number figures with chapter prefix or use whole document numbering.</li> <li><code>caption-position = 'before' | 'after'</code> \u2014 Place figure caption before or after figure.</li> <li><code>table-continued = boolean</code> \u2014 Output \"table continued\" when table breaks across pages.</li> </ul>"},{"location":"resources/theme/Styles/#table-caption","title":"<code>table-caption</code>","text":"<p>Table caption.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p> <ul> <li><code>content = content-template</code> \u2014 Contents of table caption. Supported fields are:<ul> <li><code>number</code>: caption number</li> <li><code>title</code>: caption contents</li> </ul> </li> </ul>"},{"location":"resources/theme/Styles/#table-header","title":"<code>table-header</code>","text":"<p>Table header row</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#toc-1","title":"<code>toc-1</code>","text":"<p>First-level TOC entry.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#toc-2","title":"<code>toc-2</code>","text":"<p>Second-level TOC entry.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#toc-3","title":"<code>toc-3</code>","text":"<p>Third-level TOC entry.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#toc-4","title":"<code>toc-4</code>","text":"<p>Fourth-level TOC entry.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#parml","title":"<code>parml</code>","text":"<p>Parameter list element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#plentry","title":"<code>plentry</code>","text":"<p>Parameter list entry element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#pt","title":"<code>pt</code>","text":"<p>Parameter term element within a parameter list entry.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#pd","title":"<code>pd</code>","text":"<p>Parameter definition element within a parameter list entry.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#hazardstatement","title":"<code>hazardstatement</code>","text":"<p>Hazard statement element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#hazardstatement-label","title":"<code>hazardstatement-label</code>","text":"<p>Hazard statement label element.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#hazardstatement-type-label","title":"<code>hazardstatement-&lt;type&gt;-label</code>","text":"<p>Label for hazard statement elements with <code>@type</code>.</p> <p>The styling properties that can be used are listed in XSL fo:block.</p>"},{"location":"resources/theme/Styles/#inline-keys","title":"Inline keys","text":""},{"location":"resources/theme/Styles/#link","title":"<code>link</code>","text":"<p>Link elements.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p> <ul> <li><code>link-url = 'true' | 'false'</code> \u2014 Output URL for external links after explicitly defined link text. Defaults to <code>false</code>.</li> <li><code>link-page-number = 'true' | 'false'</code> \u2014 Generate page number reference after link text. Defaults to <code>true</code>.</li> <li><code>content = content-template</code> \u2014 Link text template. Supported fields are:<ul> <li><code>link-text</code>: link text</li> <li><code>pagenum</code>: page number reference</li> </ul> </li> </ul>"},{"location":"resources/theme/Styles/#link-external","title":"<code>link-external</code>","text":"<p>External link elements.</p> <ul> <li><code>content = content-template</code> \u2014 Link text template. Supported fields are:<ul> <li><code>link-text</code>: link text</li> <li><code>url</code>: link URL</li> </ul> </li> </ul>"},{"location":"resources/theme/Styles/#tm","title":"<code>tm</code>","text":"<p>Trademark element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p> <ul> <li><code>symbol-scope = 'always' | 'chapter' | 'never'</code> \u2014 Output trademark symbol always, once per chapter, or never.</li> </ul>"},{"location":"resources/theme/Styles/#keyword","title":"<code>keyword</code>","text":"<p>Keyword element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#term","title":"<code>term</code>","text":"<p>Term element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#codeph","title":"<code>codeph</code>","text":"<p>Code phrase element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#filepath","title":"<code>filepath</code>","text":"<p>File path element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#cmdname","title":"<code>cmdname</code>","text":"<p>Comment name element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#varname","title":"<code>varname</code>","text":"<p>Variable name element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#userinput","title":"<code>userinput</code>","text":"<p>User input element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#systemoutput","title":"<code>systemoutput</code>","text":"<p>System output element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#apiname","title":"<code>apiname</code>","text":"<p>API name element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#option","title":"<code>option</code>","text":"<p>Option element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#parmname","title":"<code>parmname</code>","text":"<p>Parameter name element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#synph","title":"<code>synph</code>","text":"<p>Syntax phrase element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#syntaxdiagram","title":"<code>syntaxdiagram</code>","text":"<p>Syntax diagram element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#groupseq","title":"<code>groupseq</code>","text":"<p>Group sequence element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#groupchoice","title":"<code>groupchoice</code>","text":"<p>Group choice element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#groupcomp","title":"<code>groupcomp</code>","text":"<p>Group composite element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#fragment","title":"<code>fragment</code>","text":"<p>Syntax fragment element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#fragref","title":"<code>fragref</code>","text":"<p>Syntax fragment reference element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#synblk","title":"<code>synblk</code>","text":"<p>Syntax block element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#synnote","title":"<code>synnote</code>","text":"<p>Syntax note element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#synnoteref","title":"<code>synnoteref</code>","text":"<p>Syntax note reference element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#kwd","title":"<code>kwd</code>","text":"<p>Syntax keyword element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#var","title":"<code>var</code>","text":"<p>Syntax variable element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#oper","title":"<code>oper</code>","text":"<p>Syntax operator element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#delim","title":"<code>delim</code>","text":"<p>Syntax delimiter character element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#sep","title":"<code>sep</code>","text":"<p>Syntax separator character element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#repsep","title":"<code>repsep</code>","text":"<p>Syntax repeat separator character element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#b","title":"<code>b</code>","text":"<p>Bold highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#i","title":"<code>i</code>","text":"<p>Italic highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#u","title":"<code>u</code>","text":"<p>Underline highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#tt","title":"<code>tt</code>","text":"<p>Teletype highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#sup","title":"<code>sup</code>","text":"<p>Superscript highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#sub","title":"<code>sub</code>","text":"<p>Subscript highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#line-through","title":"<code>line-through</code>","text":"<p>Strikethrough highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#overline","title":"<code>overline</code>","text":"<p>Overline highlighting element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#markupname","title":"<code>markupname</code>","text":"<p>Named markup token element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#uicontrol","title":"<code>uicontrol</code>","text":"<p>User interface control element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#wintitle","title":"<code>wintitle</code>","text":"<p>Window or dialog title element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#menucascade","title":"<code>menucascade</code>","text":"<p>Menu cascade element used to document a series of menu choices.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#shortcut","title":"<code>shortcut</code>","text":"<p>Keyboard shortcut element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#screen","title":"<code>screen</code>","text":"<p>Screen element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#filepath_1","title":"<code>filepath</code>","text":"<p>File path element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#xmlelement","title":"<code>xmlelement</code>","text":"<p>XML element element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#xmlatt","title":"<code>xmlatt</code>","text":"<p>XML attribute element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#textentity","title":"<code>textentity</code>","text":"<p>XML text entity element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#parameterentity","title":"<code>parameterentity</code>","text":"<p>XML parameter entity element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#numcharref","title":"<code>numcharref</code>","text":"<p>XML character reference element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#xmlnsname","title":"<code>xmlnsname</code>","text":"<p>XML namespace name element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Styles/#xmlpi","title":"<code>xmlpi</code>","text":"<p>XML processing instruction element.</p> <p>The styling properties that can be used are listed in XSL fo:inline.</p>"},{"location":"resources/theme/Syntactic-sugar/","title":"Syntactic sugar","text":"<p>Theme files can use syntactic sugar to make them easier to read and write. When theme files are read, any shorthand keys are \u201cdesugared\u201d to their more verbose equivalents before they are passed to the stylesheet generator.</p>"},{"location":"resources/theme/Syntactic-sugar/#content","title":"Content","text":"<p>The authoring format of the <code>content</code> key is a DSL that supports field and variable references mixed with text.</p> <p>You can reference DITA-OT variables by name by prefixing them with the number sign <code>#</code> and wrapping them in braces <code>{</code> <code>}.</code> For example:</p> <pre><code>content: '{#copyright} {year} ACME Corporation'\n</code></pre> <p>desugars to</p> <pre><code>content:\n  - kind: variable\n    value: copyright\n  - kind: text\n    value: ' '\n  - kind: field\n    value: year\n  - kind: text\n    value: ' ACME Corporation'\n</code></pre> <p>which would result in a line like this:</p> <p>\u00a9 2022 ACME Corporation</p>"},{"location":"resources/theme/Syntactic-sugar/#page-dimensions","title":"Page dimensions","text":"<p>When page dimensions are defined using the <code>size</code> and <code>orientation</code> keys, they are desugared to <code>width</code> and <code>height</code> keys using a mapping table for known page sizes.</p> <pre><code>page:\n  size: A4\n</code></pre> <p>desugars to</p> <pre><code>page:\n  width: 210mm\n  height: 297mm\n</code></pre>"},{"location":"resources/theme/Syntactic-sugar/#header-and-footer","title":"Header and footer","text":"<p>Style keys for <code>header</code> and <code>footer</code> are collected under the <code>odd</code> and <code>even</code> keys.</p> <pre><code>header:\n  color: silver\n  odd:\n    font-weight: bold\n</code></pre> <p>desugars to</p> <pre><code>header:\n  odd:\n    font-weight: bold\n    color: silver\n  even:\n    color: silver\n</code></pre>"},{"location":"resources/theme/Syntactic-sugar/#topic-titles","title":"Topic titles","text":"<p>Style keys <code>h1</code>, <code>h2</code>, <code>h3</code>, and <code>h4</code> are desugared to <code>topic</code>, <code>topic-topic</code>, <code>topic-topic-topic</code>, and <code>topic-topic-topic-topic</code>, respectively.</p> <pre><code>style:\n  h2:\n    font-weight: bold\n</code></pre> <p>desugars to</p> <pre><code>header:\n  topic-topic:\n    font-weight: bold\n</code></pre>"},{"location":"resources/theme/Variables/","title":"Variables","text":"<p>Theme key values can use variables to reference settings in other keys. Any previously defined key can be referenced in the value of another key.</p> <p>Variable references are text values that start with a dollar sign (<code>$</code>). Variable declarations are normal keys where the name of the key is a concatenated value of flattened key names separated with a hyphen.</p> <p>The example below shows how to set a custom color value and header font, and point to those values in <code>style</code> keys.</p> <pre><code>brand:\n  primary-color: orange\n  font:\n    header: Helvetica\nstyle:\n  topic:\n    color: $brand-primary-color\n    font-family: $brand-font-header\n</code></pre>"},{"location":"topics/adding-new-languages/","title":"Adding new languages","text":"<p>Extend the toolkit\u2019s generated text capabilities by adding new language files.</p> <ol> <li> <p>Copy this file to your plug-in.</p> <ul> <li>non-PDF output: <code>plugins/org.dita.base/xsl/common/strings.xml</code></li> <li>PDF output: <code>plugins/org.dita.pdf2/cfg/common/vars/strings.xml</code></li> <li>In your plug-in, edit <code>strings.xml</code> to contain references to the language files for which you are providing custom strings.</li> </ul> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!-- Provide new languages for Gaelic and Vietnamese. --&gt; &lt;langlist&gt;   &lt;lang xml:lang=\"ga\"     filename=\"strings-ga-ga.xml\"/&gt;   &lt;lang xml:lang=\"ga-GA\"  filename=\"strings-ga-ga.xml\"/&gt;   &lt;lang xml:lang=\"vi\"     filename=\"strings-vi-vn.xml\"/&gt;   &lt;lang xml:lang=\"vi-VN\"  filename=\"strings-vi-vn.xml\"/&gt; &lt;/langlist&gt;</code></p> </li> <li> <p>Copy this file to your plug-in into the same directory as step 1.</p> <ul> <li>non-PDF output: <code>plugins/org.dita.base/xsl/common/strings-en-us.xml</code></li> <li>PDF output: <code>plugins/org.dita.pdf2/cfg/common/vars/en.xml</code></li> <li>Rename the file to match the language you wish to add (for instance, <code>strings-vi-vn.xml</code>).</li> </ul> </li> <li> <p>Without changing the <code>@id</code> value, replace the generated text string for each variable.</p> <p><code>&lt;variables&gt;    &lt;variable id=\"Figure\"&gt;Hi\u0300nh&lt;/variable&gt;    &lt;variable id=\"Table\"&gt;Ba\u0309ng&lt;/variable&gt;    &lt;variable id=\"Next topic\"&gt;Chu\u0309 \u0111\u00ea\u0300 ti\u00ea\u0301p theo&lt;/variable&gt;      [...]    &lt;variable id=\"Copyright\"&gt;Ba\u0309n quy\u00ea\u0300n&lt;/variable&gt;    &lt;variable id=\"a11y.and-then\"/&gt; &lt;/variables&gt;</code></p> </li> <li> <p>Repeat step 3 to step 5 for each language.</p> </li> <li> <p>Update your <code>plugin.xml</code> file to extend the strings available.</p> <p><code>&lt;plugin id=\"com.example.your-plugin\"&gt;   &lt;feature extension=\"dita.xsl.strings\" file=\"xsl/common/strings.xml\"/&gt; &lt;/plugin&gt;</code></p> <p>Your custom language strings are available to your stylesheets. For example, if processing in a context where the <code>@xml:lang</code> value is <code>vi-VN</code>, the following call returns \u201cChu\u0309 \u0111\u00ea\u0300 ti\u00ea\u0301p theo\u201d because it was defined as the text for the variable with <code>@id</code> value of <code>Next topic</code> in step 5.</p> <p><code>&lt;xsl:call-template name=\"getVariable\"&gt;   &lt;xsl:with-param name=\"id\" select=\"'Next topic'\"/&gt; &lt;/xsl:call-template&gt;</code></p> </li> </ol> <p>Related information </p> <p>How to add or modify generated text strings</p>"},{"location":"topics/adding-new-strings/","title":"Adding new strings","text":"<p>Add new generated strings to your plug-in for the toolkit to include in your output.</p> <ol> <li> <p>Copy this file to your plug-in.</p> <ul> <li>non-PDF output: <code>plugins/org.dita.base/xsl/common/strings.xml</code></li> <li>PDF output: <code>plugins/org.dita.pdf2/cfg/common/vars/strings.xml</code></li> <li>In your plug-in, edit <code>strings.xml</code> to contain references to the language files for which you are providing custom strings.</li> </ul> <p>The <code>en-US</code> language must be present; other language files are optional.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!-- Provide strings for my plug-in; this plug-in supports      English, Icelandic, and Russian. --&gt; &lt;langlist&gt;   &lt;lang xml:lang=\"en\"     filename=\"my-added-strings-en-us.xml\"/&gt;   &lt;lang xml:lang=\"en-US\"  filename=\"my-added-strings-en-us.xml\"/&gt;   &lt;lang xml:lang=\"is\"     filename=\"my-added-strings-is-is.xml\"/&gt;   &lt;lang xml:lang=\"is-IS\"  filename=\"my-added-strings-is-is.xml\"/&gt;   &lt;lang xml:lang=\"ru\"     filename=\"my-added-strings-ru-ru.xml\"/&gt;   &lt;lang xml:lang=\"ru-RU\"  filename=\"my-added-strings-ru-ru.xml\"/&gt; &lt;/langlist&gt;</code></p> </li> <li> <p>In <code>xsl/common</code> or <code>cfg/common/vars</code>, create a new file called <code>my-added-strings-en-us.xml</code>.</p> <p>``` &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  <p> ```</p> <li> <p>For each new string you want, add a <code>&lt;variable&gt;</code> element with an <code>@id</code> attribute and the text you want the toolkit to use.</p> <p>The <code>@id</code> attribute value must be unique in the file and should reflect the purpose of the generated text.</p> <p>The toolkit uses the text found inside the element when inserting generated text.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;variables&gt;   &lt;variable id=\"String1\"&gt;English generated text&lt;/variable&gt;   &lt;variable id=\"Another String\"&gt;Another string in English&lt;/variable&gt; &lt;/variables&gt;</code></p> </li> <li> <p>Repeat step 3 and step 4 for each language.</p> </li> <li> <p>Update your <code>plugin.xml</code> file to extend the strings available.</p> <p><code>&lt;plugin id=\"com.example.your-plugin\"&gt;   &lt;feature extension=\"dita.xsl.strings\" file=\"xsl/common/strings.xml\"/&gt; &lt;/plugin&gt;</code></p> <p>Your custom strings are available to your stylesheets. For example, if processing in a context where the <code>@xml:lang</code> value is <code>en-US</code>, the following call returns \u201cAnother string in English\u201d because it was defined as the text for the variable with <code>@id</code> value of <code>Another String</code> in step 4.</p> <p><code>&lt;xsl:call-template name=\"getVariable\"&gt;   &lt;xsl:with-param name=\"id\" select=\"'Another String'\"/&gt; &lt;/xsl:call-template&gt;</code></p> <p>You can also use the same strings in multiple languages by assigning a file with common strings to each language in addition to the language-specific custom strings files.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;langlist&gt;   &lt;lang xml:lang=\"en\"     filename=\"my-added-strings-en-us.xml\"/&gt;   &lt;lang xml:lang=\"en-US\"  filename=\"my-added-strings-en-us.xml\"/&gt;   **&amp;lt;lang xml:lang=\"en\"     filename=\"my-added-strings-mul.xml\"/&amp;gt;**   **&amp;lt;lang xml:lang=\"en-US\"  filename=\"my-added-strings-mul.xml\"/&amp;gt;**   &lt;lang xml:lang=\"is\"     filename=\"my-added-strings-is-is.xml\"/&gt;   &lt;lang xml:lang=\"is-IS\"  filename=\"my-added-strings-is-is.xml\"/&gt;   **&amp;lt;lang xml:lang=\"is\"     filename=\"my-added-strings-mul.xml\"/&amp;gt;**   **&amp;lt;lang xml:lang=\"is-IS\"  filename=\"my-added-strings-mul.xml\"/&amp;gt;**   &lt;lang xml:lang=\"ru\"     filename=\"my-added-strings-ru-ru.xml\"/&gt;   &lt;lang xml:lang=\"ru-RU\"  filename=\"my-added-strings-ru-ru.xml\"/&gt;   **&amp;lt;lang xml:lang=\"ru\"     filename=\"my-added-strings-mul.xml\"/&amp;gt;**   **&amp;lt;lang xml:lang=\"ru-RU\"  filename=\"my-added-strings-mul.xml\"/&amp;gt;** &lt;/langlist&gt;</code></p> </li> <p>Related information </p> <p>How to add or modify generated text strings</p>"},{"location":"topics/adding-plugins/","title":"Adding and removing plug-ins","text":"<p>You can extend DITA-OT with additional plug-ins to change the default output types in various ways, add entirely new kinds of output formats, or implement DITA specializations. A variety of open source plug-ins are available from the plug-in registry at dita-ot.org/plugins.</p>"},{"location":"topics/ant/","title":"Ant","text":"<p>Ant is a Java-based, open-source tool that is provided by the Apache Foundation. It can be used to declare a sequence of build actions. It is well suited for both development and document builds. The toolkit ships with a copy of Ant.</p> <p>DITA-OT uses Ant to manage the XSLT scripts that are used to perform the various transformation; it also uses Ant to manage intermediate steps that are written in Java.</p> <p>The most important Ant script is the <code>build.xml</code> file. This script defines and combines common pre-processing and output transformation routines; it also defines the DITA-OT extension points.</p> <p>Related information </p> <p>Migrating Ant builds to use the dita command</p> <p>Building output using Ant</p> <p>Creating an Ant build script</p> <p>DITA-OT parameters</p> <p>Apache Ant documentation</p>"},{"location":"topics/build-using-dita-command/","title":"Building output using the <code>dita</code> command","text":"<p>You can generate output using the <code>dita</code> command-line tool. Build parameters can be specified on the command line or with <code>.properties</code> files.</p> <ol> <li> <p>At the command-line prompt, enter the following command:</p> <p><code>syntax-bash ``dita`` **--input**=*input-file* **--format**=*format* \\[*options*\\]</code></p> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> <li> <p>format is the output format (transformation type). This argument corresponds to the common parameter transtype. Use the same values as for the transtype build parameter, for example html5 or pdf.</p> <p>You can create plug-ins to add new output formats; by default, the following values are available:</p> <ul> <li>dita</li> <li>eclipsehelp</li> <li>html5</li> <li>htmlhelp</li> <li>markdown, markdown_gitbook, and markdown_github</li> <li>pdf</li> <li>xhtml Tip: See DITA-OT transformations (output formats) for sample command line syntax and more information on each transformation.</li> </ul> </li> <li> <p>[options] include the following optional build parameters:</p> <ul> <li> <p>--debug -d</p> <p>Debug logging prints considerably more additional information. The debug log includes all information from the verbose log, plus details on Java classes, additional Ant properties and overrides, preprocessing filters, parameters, and stages, and the complete build sequence. Debug logging requires additional resources and can slow down the build process, so it should only be enabled when further details are required to diagnose problems.</p> </li> <li> <p>--output=dir -o dir</p> <p>Specifies the path of the output directory; the path can be absolute or relative to the current directory.</p> <p>This option corresponds to the common parameter output.dir.</p> <p>By default, the output is written to the <code>out</code> subdirectory of the current directory.</p> </li> <li> <p>--filter=files</p> <p>Specifies filter file(s) used to include, exclude, or flag content. Relative paths are resolved against the current directory and internally converted to absolute paths.</p> <p>Note:</p> <p>To specify multiple filter files, use the system path separator character to delimit individual file paths (semicolon \u2018<code>;</code>\u2019 on Windows, and colon \u2018<code>:</code>\u2019 on macOS and Linux) and wrap the value in quotes:</p> <p><code>--filter=\"filter1.ditaval;filter2.ditaval;filter3.ditaval\"</code></p> <p>As of DITA-OT 3.6, the --filter option can also be passed multiple times:</p> <p><code>--filter=filter1.ditaval --filter=filter2.ditaval --filter=filter3.ditaval</code></p> <p>DITAVAL files are evaluated in the order specified, so conditions specified in the first file take precedence over matching conditions specified in later files, just as conditions at the start of a DITAVAL document take precedence over matching conditions later in the same document.</p> </li> <li> <p>--force</p> <p>Force-install an existing plug-in.</p> <p>Passed as an additional option to the installation subcommand: <code>dita install</code> plug-in-zip --force</p> </li> <li> <p>--help -h</p> <p>Print a list of available arguments, options, and subcommands.</p> </li> <li> <p>--logfile=file -l file</p> <p>Write logging messages to a file.</p> </li> <li> <p>--parameter=value __-D___parameter_=value</p> <p>Specify a value for a DITA-OT or Ant build parameter.</p> <p>The GNU-style --parameter=value form is only available for parameters that are configured in the plug-in configuration file; the Java-style -D form can also be used to specify additional non-configured parameters or set system properties.</p> <p>Parameters not implemented by the specified transformation type or referenced in a <code>.properties</code> file are ignored.</p> <p>Tip: If you are building in different environments where the location of the input files is not consistent, set args.input.dir with the <code>dita</code> command and reference its value with <code>${args.input.dir}</code> in your <code>.properties</code> file.</p> </li> <li> <p>--propertyfile=file</p> <p>Use build parameters defined in the referenced <code>.properties</code> file.</p> <p>Build parameters specified on the command line override those set in the <code>.properties</code> file.</p> </li> <li> <p>--repeat=N</p> <p>Repeat the transformation N number of times.</p> <p>This option can be used by plug-in developers to measure performance. To run a conversion five times, for example, use --repeat=5. The duration of each execution will appear in the console when the final transformation is complete.</p> <p><code>$ `dita` **--input**=`docsrc/samples/sequence.ditamap` **--format**=html5 \\        **--repeat**=5 1 11281ms 2 4132ms 3 3690ms 4 4337ms 5 3634ms</code></p> </li> <li> <p>--resource=file -r file</p> <p>Specifies resource files.</p> <p>This argument corresponds to the common parameter args.resources.</p> <p>Resource files can be used to convert partial documentation sets by processing input with additional information.</p> <p>For example, to process a single topic file with a map that contains key definitions, use a command like this:</p> <p><code>syntax-bash `dita` **--input**=`topic.dita` **--resource**=`keys.ditamap` **--format**=html5</code></p> <p>To convert a chapter map to HTML5 and insert related links from relationship tables in a separate map, use:</p> <p><code>syntax-bash `dita` **--input**=`chapter.ditamap` **--resource**=`reltables.ditamap` **--format**=html5</code></p> </li> <li> <p>--temp=dir -t dir</p> <p>Specifies the location of the temporary directory.</p> <p>This option corresponds to the common parameter dita.temp.dir.</p> <p>The temporary directory is where DITA-OT writes intermediate files that are generated during the transformation process.</p> </li> <li> <p>--verbose -v</p> <p>Verbose logging prints additional information to the console, including directory settings, effective values for Ant properties, input/output files, and informational messages to assist in troubleshooting.</p> </li> </ul> </li> </ul> <p>If processing is successful, nothing is printed in the terminal window. The built output is written to the specified output directory (by default, in the <code>out</code> subdirectory of the current directory).</p> </li> </ol> <p>For example, from <code>*dita-ot-dir*/docsrc/samples</code>, run:</p> <pre><code>`dita` **--input**=`sequence.ditamap` **--format**=html5 \\\n     **--output**=`output/sequence` \\\n     **--args.input.dir**=`*/absolute/path/to/dita-ot-dir*/docsrc/samples` \\\n     **--propertyfile**=`properties/sequence-html5.properties`\n</code></pre> <p>This builds <code>sequence.ditamap</code> to HTML5 output in <code>output/sequence</code> using the following additional parameters specified in the <code>properties/sequence-html5.properties</code> file:</p> <pre><code># Directory that contains the custom .css file:\nargs.cssroot = ${args.input.dir}/css/\n\n# Custom .css file used to style output:\nargs.css = style.css\n\n# Copy the custom .css file to the output directory:\nargs.copycss = yes\n\n# Location of the copied .css file relative to the output:\nargs.csspath = branding\n\n# Generate a full navigation TOC in topic pages:\nnav-toc = full\n</code></pre> <p>Usually, you will want to specify a set of reusable build parameters in a <code>.properties</code> file.</p> <p>Related information </p> <p>Arguments and options for the dita command</p> <p>Accessing help for the dita command</p> <p>DITA-OT parameters</p> <p>Internal Ant properties</p> <p>Why \"startcmd\" is not your friend</p>"},{"location":"topics/building-output/","title":"Building output","text":"<p>You can use the <code>dita</code> command-line tool, Ant, or the Java API to transform DITA content to the various output formats that DITA Open Toolkit supports.</p> <p>Related information </p> <p>How to run DITA-OT</p>"},{"location":"topics/building-with-ant/","title":"Building output using Ant","text":"<p>You can build output by using an Ant build script to provide the DITA-OT parameters.</p> <ol> <li> <p>Open a command prompt or terminal session.</p> </li> <li> <p>Issue the following command:</p> <pre><code>|**Linux or macOS\u00a0**|`bin/ant` -f `*build-script* *target*`|\n</code></pre> <p>|Windows|<code>bin\\ant</code> -f <code>*build-script* *target*</code>|</p> <p>where:</p> <ul> <li>build-script is name of the Ant build script.</li> <li> <p>target is an optional switch that specifies the name of the Ant target that you want to run.</p> <p>If you do not specify a target, the value of the <code>@default</code> attribute for the Ant project is used.</p> </li> </ul> </li> </ol> <p>Related information </p> <p>Migrating Ant builds to use the dita command</p> <p>Ant</p> <p>DITA-OT parameters</p> <p>Apache Ant documentation</p>"},{"location":"topics/creating-an-ant-build-script/","title":"Creating an Ant build script","text":"<p>Instead of typing the DITA-OT parameters at the command prompt, you might want to create an Ant build script that contains all of the parameters.</p> <ol> <li> <p>Create an XML file that contains the following content:</p> <p>``` &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;  <p></p> <p> </p> <p> ```</p> <p>You will replace the placeholder content (indicated by the % signs) with content applicable to your environment.</p> <li> <p>Specify project information:</p> <ol> <li> <p>Set the value of the <code>@name</code> attribute to the name of your project.</p> </li> <li> <p>Set the value of the <code>@default</code> attribute to the name of a target in the build script.</p> <p>If the build script is invoked without specifying a target, this target will be run.</p> </li> </ol> </li> <li> <p>Set the value of the dita.dir property to the location of the DITA-OT installation.</p> <p>This can be a fully qualified path, or you can specify it relative to the location of the Ant build script that you are writing.</p> </li> <li> <p>Create the Ant target:</p> <ol> <li> <p>Set the value of the <code>@name</code> attribute.</p> </li> <li> <p>Specify the value for the args.input property.</p> </li> <li> <p>Specify the value of the transtype property.</p> </li> </ol> </li> <li> <p>Save the build script.</p> </li> <p>The following Ant build script generates CHM and PDF output for the sample DITA maps.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project name=\"build-chm-pdf\" default=\"all\" basedir=\".\"&gt;\n  &lt;property name=\"dita.dir\" location=\"${basedir}/../../..\"/&gt;\n  &lt;target name=\"all\" description=\"build CHM and PDF\" depends=\"chm,pdf\"/&gt;\n  &lt;target name=\"chm\" description=\"build CHM\"&gt;\n    &lt;ant antfile=\"${dita.dir}/build.xml\"&gt;\n      &lt;property name=\"args.input\" location=\"../sequence.ditamap\"/&gt;\n      &lt;property name=\"transtype\" value=\"htmlhelp\"/&gt;\n      &lt;property name=\"output.dir\" location=\"../out/chm\"/&gt;\n      &lt;property name=\"args.gen.task.lbl\" value=\"YES\"/&gt;\n    &lt;/ant&gt;\n  &lt;/target&gt;\n  &lt;target name=\"pdf\" description=\"build PDF\"&gt;\n    &lt;ant antfile=\"${dita.dir}/build.xml\"&gt;\n      &lt;property name=\"args.input\" location=\"../taskbook.ditamap\"/&gt;\n      &lt;property name=\"transtype\" value=\"pdf\"/&gt;\n      &lt;property name=\"output.dir\" location=\"../out/pdf\"/&gt;\n      &lt;property name=\"args.gen.task.lbl\" value=\"YES\"/&gt;\n      &lt;property name=\"args.rellinks\" value=\"nofamily\"/&gt;\n    &lt;/ant&gt;\n  &lt;/target&gt;\n&lt;/project&gt;\n</code></pre> <p>In addition to the mandatory parameters (args.input and transtype), the <code>chm</code> and <code>pdf</code> targets each specify some optional parameters:</p> <ul> <li>The args.gen.task.lbl property is set to YES, which ensures that headings are automatically generated for the sections of task topics.</li> <li>The output.dir property specifies where DITA-OT writes the output of the transformations.</li> </ul> <p>The pdf target also specifies that related links should be generated in the PDF, but only those links that are created by relationship tables and <code>&lt;link&gt;</code> elements.</p> <p>Finally, the all target simply specifies that both the chm and pdf target should be run.</p> <p>Another resource for learning about Ant scripts are the files in the <code>*dita-ot-dir*/docsrc/samples``/ant_sample/</code> directory. This directory contains sample Ant build files for common output formats, as well as templates that you can use to create your own Ant scripts.</p> <p>Related information </p> <p>Migrating Ant builds to use the dita command</p> <p>Ant</p> <p>DITA-OT parameters</p> <p>Apache Ant documentation</p>"},{"location":"topics/creating-docker-images/","title":"Installing plug-ins in a Docker image","text":"<p>To install custom plug-ins or make other changes based on the DITA-OT parent image, you can create your own <code>Dockerfile</code> and specify the official DITA-OT image as the basis for your image.</p> <p>Each subsequent declaration in the Dockerfile modifies this parent image, so you can start with the official image, and add custom plug-ins or other commands as required to create a custom Docker image that includes everything you need to publish your content.</p> <ol> <li> <p>Create a new <code>Dockerfile</code> and specify the official DITA-OT image in the <code>FROM</code> directive.</p> <p>```</p> </li> <li> <p>You can extend your image with a <code>RUN</code> declaration that runs the <code>dita</code> command from the container to install a custom plug-in, and specify the filename or URL of the plug-in\u2019s distribution ZIP file.</p> <p>```</p> </li> <li> <p>You can also install custom plug-ins from the main DITA-OT plug-in registry at dita-ot.org/plugins, or from your company plug-in registry.</p> <p>```</p> </li> </ol> <p>The <code>docsrc/samples</code> folder in the DITA-OT installation directory contains a complete example:</p> <pre><code># Use the latest DITA-OT image \u2193 as parent:\nFROM ghcr.io/dita-ot/dita-ot:4.1.2\n\n# Install a custom plug-in from a remote location:\nRUN dita --install https://github.com/infotexture/dita-bootstrap/archive/master.zip\n\n# Install from the registry at dita-ot.org/plugins:\nRUN dita --install org.dita-community.pdf-page-break\n</code></pre>"},{"location":"topics/creating-docker-images/#use-the-latest-dita-ot-image-as-parent","title":"Use the latest DITA-OT image \u2193 as parent:","text":"<p>FROM ghcr.io/dita-ot/dita-ot:4.1.2 ```</p>"},{"location":"topics/creating-docker-images/#install-a-custom-plug-in-from-a-remote-location","title":"Install a custom plug-in from a remote location:","text":"<p>RUN dita --install https://github.com/infotexture/dita-bootstrap/archive/master.zip ```</p>"},{"location":"topics/creating-docker-images/#install-from-the-registry-at-dita-otorgplugins","title":"Install from the registry at dita-ot.org/plugins:","text":"<p>RUN dita --install org.dita-community.pdf-page-break ```</p>"},{"location":"topics/creating-docker-images/#building-a-new-image","title":"Building a new image","text":"<p>You can build a Docker image from this example by running the following command from the <code>*dita-ot-dir*/docsrc/samples</code> directory:</p> <pre><code>$ `docker` image build -t sample-docker-image:1.0 docker/\n[+] Building 81.5s (4/6)                                                                                                                                                           \n =&gt; [internal] load build definition from Dockerfile                                                                                                                          0.0s\n =&gt; =&gt; transferring dockerfile: 367B                                                                                                                                          0.0s\n =&gt; [internal] load .dockerignore                                                                                                                                             0.0s\n =&gt; =&gt; transferring context: 2B                                                                                                                                               0.0s\n =&gt; [internal] load metadata for ghcr.io/dita-ot/dita-ot:4.1.2\n =&gt; [1/3] FROM ghcr.io/dita-ot/dita-ot:4.1.2@sha256:*&amp;lt;hash&amp;gt;*\n =&gt; =&gt; resolve ghcr.io/dita-ot/dita-ot:4.1.2@sha256:*&amp;lt;hash&amp;gt;*\nStep 2/3 : RUN dita --install https://github.com/infotexture/dita-bootstrap/archive/master.zip\n ---&gt; Running in d510f874cae0\nAdded net.infotexture.dita-bootstrap\nRemoving intermediate container d510f874cae0\n ---&gt; 63deb8e15b5b\nStep 3/3 : RUN dita --install org.dita-community.pdf-page-break\n ---&gt; Running in b4ef2fcad916\nAdded org.dita-community.pdf-page-break\nRemoving intermediate container b4ef2fcad916\n ---&gt; 402885636b7f\nSuccessfully built 402885636b7f\nSuccessfully tagged sample-docker-image:1.0\n\n</code></pre> <p>Docker steps through each instruction in the Dockerfile to build the sample image. In this case, the <code>dita</code> command provides feedback on each installed plug-in.</p>"},{"location":"topics/creating-docker-images/#running-the-new-container","title":"Running the new container","text":"<p>You can then start a container based on your new image:</p> <pre><code>$ `docker` container run -it \\\n  -v /path/to/dita-ot-dir/docsrc:/src sample-docker-image:1.0 \\\n  -i /src/userguide.ditamap \\\n  -o /src/out/dita-bootstrap \\\n  -f html5-bootstrap -v\n</code></pre> <p>This command sequence specifies the following options:</p> <ul> <li>-v mounts the <code>docsrc</code> subfolder of the DITA-OT directory on your host machine and binds it to the <code>/src</code> volume in the container</li> <li>-i specifies <code>*dita-ot-dir*/docsrc``/userguide.ditamap</code> as the input map file</li> <li>-o writes the output to <code>*dita-ot-dir*/docsrc``/out/dita-bootstrap</code></li> <li>-f sets the output format to the Bootstrap template, and</li> <li>-v displays build progress messages with verbose logging</li> </ul> <p>When the build is finished, you should find a copy of the DITA-OT documentation under <code>*dita-ot-dir*/docsrc``/out/dita-bootstrap</code>, styled with the basic Bootstrap template from the custom plug-in.</p>"},{"location":"topics/custom-plugins/","title":"Creating custom plug-ins","text":"<p>In addition to adding plug-ins from the plug-in registry at dita-ot.org/plugins, you can create custom DITA-OT plug-ins of your own to modify the default output, add new output formats, support new languages, or implement DITA topic specializations.</p> <p>A plug-in consists of a directory, typically stored within the <code>plugins/</code> subdirectory of the DITA-OT installation. Every plug-in is controlled by a file named <code>plugin.xml</code>, which is located in the root directory of the plug-in.</p> <p>Related information </p> <p>Step by step implementation of a DITA Open Toolkit plugin</p>"},{"location":"topics/determining-version-of-ditaot/","title":"Checking the DITA-OT version number","text":"<p>You can determine the DITA Open Toolkit version number from a command prompt.</p> <ol> <li> <p>Open a command prompt or terminal session.</p> </li> <li> <p>Issue the following command:</p> <p><code>``dita`` **--version**</code></p> </li> </ol> <p>The DITA-OT version number appears on the console:</p> <pre><code>`DITA-OT version 4.1.2`\n</code></pre>"},{"location":"topics/dita-and-dita-ot-resources/","title":"DITA and DITA-OT resources","text":"<p>In addition to the DITA Open Toolkit documentation, there are other resources about DITA and DITA-OT that you might find helpful.</p>"},{"location":"topics/dita-command-help/","title":"Accessing help for the dita command","text":"<p>You can access a list of subcommands and supported parameters for the <code>dita</code> command by passing the --help option on the command line.</p> <ol> <li> <p>Open a command prompt or terminal session.</p> </li> <li> <p>Issue the following command:</p> <p><code>``dita`` **--help**</code></p> </li> <li> <p>For details on the arguments and options available for each subcommand, pass the --help option after the subcommand name.</p> <p>For example: <code>dita install</code> --help.</p> </li> </ol> <p>A brief usage summary appears in the command-line window, along with a list of subcommands, arguments, and options.</p> <p>Related information </p> <p>Building output using the dita command</p> <p>DITA-OT parameters</p> <p>Internal Ant properties</p> <p>Arguments and options for the dita command</p>"},{"location":"topics/dita-ot-day-videos-intro-2014/","title":"DITA-OT Day Conference \u2013 Munich 2014","text":"<p>November 20, 2014 in Munich, Germany.</p>"},{"location":"topics/dita-ot-day-videos-intro-2015/","title":"DITA-OT Day Conference \u2013 Munich 2015","text":"<p>November 15, 2015 in Munich, Germany.</p>"},{"location":"topics/dita-ot-day-videos-intro-2016/","title":"DITA-OT Day Conference \u2013 Munich 2016","text":"<p>November 13, 2016 in Munich, Germany.</p>"},{"location":"topics/dita-ot-day-videos-intro-2017/","title":"DITA-OT Day Conference \u2013 Berlin 2017","text":"<p>October 29, 2017 in Berlin, Germany.</p>"},{"location":"topics/dita-ot-day-videos-intro-2018/","title":"DITA-OT Day Conference \u2013 Rotterdam 2018","text":"<p>November 4, 2018 in Rotterdam, Netherlands.</p>"},{"location":"topics/dita-ot-day-videos-intro-2019/","title":"DITA-OT Day Conference \u2013 Brussels 2019","text":"<p>November 9, 2019 in Brussels, Belgium.</p>"},{"location":"topics/dita-ot-day-videos-intro-2022/","title":"DITA-OT Day Conference \u2013 Rotterdam 2022","text":"<p>November 13, 2022 in Rotterdam, Netherlands. DITA-OT Day was not held in 2020 or 2021.</p>"},{"location":"topics/dita-ot-day-videos/","title":"DITA-OT Day conference recordings","text":"<p>All video recordings from each DITA-OT Day conference from 2014 onward.</p>"},{"location":"topics/dita-xml-input/","title":"Standard DITA XML","text":"<p>DITA Open Toolkit supports all released versions of the OASIS DITA specification, including 1.0, 1.1, 1.2, and 1.3. As of release 4.1, DITA-OT also provides an initial preview of features for the latest draft of the upcoming DITA 2.0 standard.</p> <p>The DITA specification \u201cdefines a set of document types for authoring and organizing topic-oriented information, as well as a set of mechanisms for combining, extending, and constraining document types.\u201d The DITA 1.3 specification is the authoritative source of information on authoring DITA content in XML.</p> <p>Tip: For details on how DITA Open Toolkit processes DITA XML content, see DITA specification support.</p>"},{"location":"topics/dita2dita/","title":"Normalized DITA","text":"<p>The <code>dita</code> transformation generates normalized topics and maps from DITA input. The normalized output includes the results of DITA Open Toolkit pre-processing operations, which resolve map references, keys, content references, code references and push metadata back and forth between maps and topics.</p> <p>In comparison to the source DITA files, the normalized DITA files are modified in the following ways:</p> <ul> <li>References from one DITA map to another are resolved</li> <li>Map-based links, such as those generated by map hierarchy and relationship tables, are added to the topics.</li> <li>Link text is resolved.</li> <li>Map attributes that cascade are made explicit on child elements.</li> <li>Map metadata such as index entries and copyrights are pushed into topics.</li> <li>Topic metadata such as navigation titles, link text and short descriptions are pulled from topics into the map.</li> <li>XML comments are removed.</li> </ul>"},{"location":"topics/dita2dita/#applications","title":"Applications","text":"<p>Normalized output may be useful in situations where post-processing of DITA content is required, but the downstream systems are limited in their ability to resolve DITA references.</p> <p>Tip: You can also use the normalized DITA transformation to convert Markdown or Lightweight DITA formats to DITA XML. You can then copy the generated DITA files from the output folder to your project and replace references to the lightweight topics with their XML equivalents.</p>"},{"location":"topics/dita2dita/#generating-normalized-dita-output","title":"Generating normalized DITA output","text":"<p>Run the <code>dita</code> command and set the value of the output --format option to dita:</p> <pre><code>``dita`` **--input**=*input-file* **--format**=dita\n</code></pre> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> </ul> <p>Related information </p> <p>The use-cases for a \"DITA to resolved DITA\" transformation</p> <p>Common parameters</p>"},{"location":"topics/dita2eclipsehelp/","title":"Eclipse help","text":"<p>The eclipsehelp transformation generates XHTML output, CSS files, and the control files that are needed for Eclipse help.</p> <p>In addition to the XHTML output and CSS files, this transformation returns the following files, where mapname is the name of the root map.</p> File name Description <code>plugin.xml</code> Control file for the Eclipse plug-in <code>*mapname*.xml</code> Table of contents <code>index.xml</code> Index file <code>plugin.properties</code> <code>META-INF/MANIFEST.MF</code> <p>To run the Eclipse help transformation, set the transtype parameter to eclipsehelp, or pass the --format=eclipsehelp option to the <code>dita</code> command line.</p> <pre><code>``dita`` **--input**=*input-file* **--format**=eclipsehelp\n</code></pre> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> </ul> <p>Related information </p> <p>Publishing DITA Content Re-Used in Different Context in EPUB and Eclipse Infocenter by Using DITA-OT</p> <p>Common parameters</p> <p>HTML-based output parameters</p> <p>Eclipse Help parameters</p> <p>Handling content outside the map directory</p> <p>Official Eclipse website</p>"},{"location":"topics/dita2html5/","title":"HTML5","text":"<p>The html5 transformation generates HTML5 output and a table of contents (TOC) file.</p> <p>The HTML5 output is always associated with the default DITA-OT CSS file (<code>commonltr.css</code> or <code>commonrtl.css</code> for right-to-left languages). You can use toolkit parameters to add a custom style sheet that overrides the default styles, or generate a <code>&lt;nav&gt;</code> element with a navigation TOC in topic pages.</p> <p>To run the HTML5 transformation, set the transtype parameter to html5, or pass the --format=html5 option to the <code>dita</code> command line.</p> <pre><code>``dita`` **--input**=*input-file* **--format**=html5\n</code></pre> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> </ul> <p>Related information </p> <p>Setting parameters for custom HTML</p> <p>Common parameters</p> <p>HTML-based output parameters</p> <p>HTML5 parameters</p> <p>Handling content outside the map directory</p>"},{"location":"topics/dita2htmlhelp/","title":"HTML Help","text":"<p>The htmlhelp transformation generates HTML output, CSS files, and the control files that are needed to produce a Microsoft Compiled HTML Help (.chm) file.</p> <p>In addition to the HTML output and CSS files, this transformation returns the following files, where mapname is the name of the root map.</p> File name Description <code>*mapname*.hhc</code> Table of contents <code>*mapname*.hhk</code> Sorted index <code>*mapname*.hhp</code> HTML Help project file <code>*mapname*.chm</code> Compiled HTML Help file <p>Note: The compiled file is only generated if the HTML Help Workshop is installed on the build system.</p> <p>|</p> <p>To run the HTML Help transformation, set the transtype parameter to htmlhelp, or pass the --format=htmlhelp option to the <code>dita</code> command line.</p> <pre><code>``dita`` **--input**=*input-file* **--format**=htmlhelp\n</code></pre> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> </ul> <p>Related information </p> <p>Common parameters</p> <p>HTML-based output parameters</p> <p>Microsoft Compiled HTML Help parameters</p> <p>Handling content outside the map directory</p>"},{"location":"topics/dita2markdown/","title":"Generating Markdown output","text":"<p>Along with Markdown input, DITA-OT provides three transformation types to convert DITA content to Markdown, including the original syntax, GitHub-Flavored Markdown, and GitBook.</p> <p>The new output formats can be used to feed DITA content into Markdown-based publishing systems or other workflows that lack the ability to process DITA XML.</p> <p>Markdown output can be generated by passing one of the following transformation types to the <code>dita</code> command with the --format option:</p> <ul> <li> <p>To publish Markdown DITA files, use the markdown transtype.</p> </li> <li> <p>To generate GitHub-Flavored Markdown files, use the markdown_github transtype.</p> <p>Note: Since the GitHub format does not support definition lists, they are converted to unordered lists with bold terms. Attribute blocks with IDs, class names, and other custom attributes are also omitted, as GitHub does not support Pandoc header attributes or PHP Markdown Extra special attributes.</p> </li> <li> <p>To publish GitHub-Flavored Markdown and generate a <code>SUMMARY.md</code> table of contents file for publication via GitBook or mdBook, use the markdown_gitbook transtype.</p> </li> </ul> <p>Run the <code>dita</code> command and set the value of the output --format option to the desired format, for example:</p> <pre><code>``dita`` **--input**=*input-file* **--format**=markdown\n</code></pre> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> </ul> <p>Attention: The MDITA format is not yet supported when generating output. To publish DITA content to Markdown, use one of the formats listed above.</p> <p>Related information </p> <p>Markdown input</p> <p>Markdown support inside-out</p> <p>Markdown plugin</p> <p>Common parameters</p>"},{"location":"topics/dita2pdf/","title":"PDF","text":"<p>The pdf transformation generates output in Portable Document Format.</p> <p>This transformation was originally created as a plug-in and maintained outside of the main toolkit code. It was created as a more robust alternative to the demo PDF transformation in the original toolkit, and thus was known as PDF2. The plug-in was bundled into the default toolkit distribution with release 1.4.3.</p> <p>To run the PDF transformation, set the transtype parameter to pdf, or pass the --format=pdf option to the <code>dita</code> command line.</p> <pre><code>``dita`` **--input**=*input-file* **--format**=pdf\n</code></pre> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> </ul> <p>Related information </p> <p>Common parameters</p> <p>PDF parameters</p> <p>Generating revision bars</p>"},{"location":"topics/dita2xhtml/","title":"XHTML","text":"<p>The xhtml transformation generates XHTML output and a table of contents (TOC) file. This was the first transformation created for DITA Open Toolkit, and originally served as the basis for all HTML-based transformations.</p> <p>The XHTML output is always associated with the default DITA-OT CSS file (<code>commonltr.css</code> or <code>commonrtl.css</code> for right-to-left languages). You can use toolkit parameters to add a custom style sheet to override the default styles.</p> <p>To run the XHTML transformation, set the transtype parameter to xhtml, or pass the --format=xhtml option to the <code>dita</code> command line.</p> <pre><code>``dita`` **--input**=*input-file* **--format**=xhtml\n</code></pre> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> </ul> <p>Related information </p> <p>Setting parameters for custom HTML</p> <p>Common parameters</p> <p>HTML-based output parameters</p> <p>XHTML parameters</p> <p>Handling content outside the map directory</p>"},{"location":"topics/enabling-debug-mode/","title":"Enabling debug mode","text":"<p>Debug logging prints considerably more additional information. The debug log includes all information from the verbose log, plus details on Java classes, additional Ant properties and overrides, preprocessing filters, parameters, and stages, and the complete build sequence. The debug log can help you determine the root cause of a problem.</p> <ol> <li> <p>From the command prompt, add the following parameters:</p> Application Parameters <code>dita</code> command --debug, -debug, or -d Ant <code>-v -Dargs.debug=yes</code> <p>You also can add a <code>&lt;property&gt;</code> element to an Ant target in your build file, for example:</p> <p><code>language-xml &lt;property name=\"args.debug\" value=\"yes\"/&gt;</code></p> <p>Attention: Debug logging requires additional resources and can slow down the build process, so it should only be enabled when further details are required to diagnose problems.</p> </li> </ol>"},{"location":"topics/error-messages-details/","title":"DITA-OT error messages","text":"<p>This topic lists each error message generated by the toolkit and provides additional information that might be helpful in understanding and resolving the error condition. If your toolkit installation includes custom plug-ins that define additional messages, you can add to this list by rebuilding the DITA-OT documentation.</p> <p>Each message ID is composed of a message prefix, a message number, and a letter that indicates the severity level (I, W, E, or F).</p> <p>The toolkit uses the following severity scale:</p> <ul> <li> <p>Info (I)</p> <p>Informational messages highlight the progress of transformation and call attention to conditions of which you should be aware. For example, draft comments are enabled and will be rendered in the output.</p> </li> <li> <p>Warning (W)</p> <p>The toolkit encountered a problem that should be corrected. Processing will continue, but the output might not be as expected.</p> </li> <li> <p>Error (E)</p> <p>The toolkit encountered a more severe problem, and the output is affected. For example, some content is missing or invalid, or the content is not rendered in the output</p> </li> <li> <p>Fatal (F)</p> <p>The toolkit encountered a severe condition, processing stopped, and no output is generated.</p> </li> </ul> <p>Plug-ins may be used to add additional messages to the toolkit; for more information, see Rebuilding the DITA-OT documentation.</p> <p>|Individual cells in this table may be used to push additional explanations for any existing error message into the generated message topic <code>error-messages.xml</code>.| |----------------------------------------------------------------------------------------------------------------------------------------------------------------| |To add additional explanation to any message, add the explanation to this table in a single cell, and set the following attributes on the <code>&lt;stentry&gt;</code> tag: -   <code>conkeyref=\"error-messages/MESSAGEID-extra\"</code> -- for example, use the following to add additional info to message DOTX001F: <code>conkeyref=\"error-messages/DOTX001F-extra\"</code> -   <code>conaction=\"pushreplace\"</code></p> <p>| |Default transformation types that ship with the toolkit include dita, eclipsehelp, html5, htmlhelp, markdown variants, pdf (or pdf2), and xhtml. Additional transformation types may be available if toolkit plug-ins are installed.| |The input parameter was not specified, so there is no DITA or DITAMAP file to transform. Ensure the parameter is set properly; see DITA-OT common parameters (args.input) if you are unsure how to specify the input file.| |An alternate stylesheet was specified to run in place of the default XSLT output process, but that stylesheet could not be loaded. Please correct the parameter to specify a valid stylesheet.| |This optional parameter is used to set an extension for DITA topic documents in the temporary processing directory. Only \"dita\", \".dita\", \"xml\", or \".xml\" are allowed.| |If the CSSPATH uses an absolute path, it should be one that can still be accessed after the files are moved to another system (such as <code>http://www.example.org/</code>). Absolute paths on the local file system will be broken if the content is moved to a new system.| |The running footer file, which contains content to be added to the bottom of each XHTML output topic, cannot be located or read. This is usually caused by a typo in the parameter value. You should also ensure that the value is not specified with \"file:\" as a prefix.| |The running header file, which contains content to be added to the top of each XHTML output topic, cannot be located or read. This is usually caused by a typo in the parameter value. You should also ensure that the value is not specified with \"file:\" as a prefix.| |The running heading file, which contains content to be added to the <code>&lt;head&gt;</code> section of each HTML output topic, cannot be located or read. This is usually caused by a typo in the parameter value. You should also ensure that the value is not specified with \"file:\" as a prefix.| |An alternate stylesheet was specified to run in place of the default XSL-FO output process, but that stylesheet could not be loaded. Please correct the parameter to specify a valid stylesheet.| |According to the OASIS DITA Specification, the <code>&lt;index-see&gt;</code> element should be ignored if the parent <code>&lt;indexterm&gt;</code> contains other <code>&lt;indexterm&gt;</code> children.| |According to the OASIS DITA Specification, the <code>&lt;index-see-also&gt;</code> element should be ignored if the parent <code>&lt;indexterm&gt;</code> contains other <code>&lt;indexterm&gt;</code> children.| |Please ensure that the input file path and file name were entered correctly.| |\u00a0| |The transform was unable to create files properly during the transform; results may not be as expected.| |This message may indicate an invalid input file (such as accidentally specifying a PDF file as input rather than a DITA map file), an input file that uses elements which are not allowed, are not part or a DITA file that has errors and cannot be parsed as XML. You could also be using a specialized DITA document type that needs external plug-ins in order to be parsed correctly. The message issued by the XML parser should provide additional information to help diagnose the cause.| |This message may indicate a reference to an invalid file (such as accidentally referencing a PDF or unknown XML file as if it was DITA), a referenced file that uses elements which are not allowed, or a referenced DITA file that has errors and cannot be parsed as XML. You could also be using a specialized DITA document type that needs external plug-ins in order to be parsed correctly. The message issued by the XML parser should provide additional information to help diagnose the cause.| |An empty <code>&lt;indexterm&gt;</code> element was found, and will appear in the index as ***. This index term should be removed from the source.| |This will appear when one installed plug-in requires another in order to function correctly, but the required plug-in is not found. The installed plug-in will be ignored.| |This may appear if filter conditions on the root element of a topic cause the entire topic to be filtered out. To remove this message, you could place any filter conditions on the reference to this file, which will prevent the build from accessing this file.| |Either the input file or the ditaval file should change, otherwise your build is explicitly excluding all content.| |Check whether the image exists in the source location or already exists in the output directory.| |This message should only appear in the following cases: -   Errors earlier in the transform prevented this step of the transform from running; correct any errors and try the build again. -   An Ant build or plug-in is directly calling the toolkit\u2019s topic merge module, and is doing so improperly; in this case the Ant build or plug-in needs to be fixed. -   In the past, problems have been encountered when calling this module with an absolute path; this should no longer be an issue, but may be fixed in older releases by updating the Ant build or plug-in.</p> <p>| |This message should only appear if an Ant build or plug-in is directly calling the toolkit\u2019s topic merge module, or if earlier errors resulted in problems with some of the content. If the topic merge module is called correctly, then this indicates a program error that should be reported to the DITA-OT development team via the GitHub issues tracker.| |When referencing a non-DITA file, the format attribute should indicate the type of file referenced (such as \"html\" for HTML topics or \"pdf\" for PDF files). Otherwise, the transform may attempt to parse the referenced document as a DITA topic.| |The domains attribute is used in specialized DITA documents to help determine which domain elements are legal. This message will only appear if a DITA specialization was not defined properly.| |All specialized DITA elements must define a class attribute to provide ancestry information. This message will only appear if a specialized DITA element did not define a class attribute, or if non-DITA elements are included in a DITA context.| |This informational message is intended to help you catch filter conditions that may have been specified improperly; if the value is correct, no action is needed.| |\u00a0| |DITA processing is based on class attributes defined for every element. Usually these are defaulted in the DTD or Schema; if no DTD or Schema is used, the class attributes must be explicitly included in the map or topic.| |This will appear when a topic is outside the scope of the map; for example, if the main input map references <code>\"../other-directory/some.dita\"</code>. The result would cause an output file to be created outside of the output directory. See DITA-OT common parameters (outer.control and generate.copy.outer) for details.| |This will appear when a topic is outside the scope of the map; for example, if the main input map references <code>\"../other-directory/some.dita\"</code>. The result would cause an output file to be created outside of the output directory. If you do not want to see the warning message, please use the Ant parameter 'outer.control', and set the value to \"quiet\". Otherwise, move the referenced file into the input dita/map directory. See DITA-OT common parameters (outer.control and generate.copy.outer) for details.| |DITA processing is based on class attributes defined for every element. Usually these are defaulted in the DTD or Schema; if validation against the DTD or Schema is turned off, the class attributes must be explicitly included in the map or topic.| |This appears to indicate an error in creating specialized metadata elements. Please verify that the document type you are using is complete and complies with DITA Specialization rules.| |Please see the topic on Conref Push in the DITA specification for details on expected syntax for this function.| |Please see the topic on Conref Push in the DITA specification for details on expected syntax for this function.| |The conref attribute must be a URI reference to a DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax.| |The conref push function was used to replace a single element with two or more alternatives. Only one element may directly replace another using conref push. See Conref Push in the DITA specification for more information about the conref push \"replace\" function.| |The target for a conref push action does not exist; please make sure that the syntax is correct and that the target exists. See the topic on URI-based addressing in the DITA specification for details on the expected syntax. If the syntax is correct, it is possible that the target was filtered out of your build using a DITAVAL file.| |Please see the topic on Conref Push in the DITA specification for details on expected syntax for this function.| |This informational message is intended to help you catch catch duplicate key definitions; if the keys are defined as expected, no action is needed.| |See the conkeyref definition for details on expected syntax and usage.| |This message is intended to help you locate incorrectly specified keys; if the key was specified correctly, this message may be ignored.| |A DITA Subject Scheme map was used to limit values that are available to the specified attribute. Please correct the attribute so that it uses one of the allowed values.| |The Eclipse index will contain a value such as \"See also otherEntry\", but otherEntry does not exist in this index. The index reference will be broken unless this plug-in is always loaded into Eclipse with another plug-in that defines otherEntry as an index term.| |The target for a coderef element, which specifies an external text-based file, could not be located or loaded. Please verify that the reference is correct. Note that for security reasons, references to code samples outside of the scope of the map directory are not supported by default, as this could allow a reference to access and display any restricted or hidden file on the system. If you are certain that the path is valid and the file should be loaded, the current workaround is to set a parameter to allow these references. See DITA-OT common parameters (outer.control and generate.copy.outer) for details.</p> <p>| |DITA-OT supports a special syntax on coderef elements to specify the character set of the target document. See Extended codeblock processing for details on the expected syntax.| |By default, DITA-OT supports the extensions \"dita\" and \"xml\" for DITA topics, as mandated by the DITA specification. Please verify that your topics use one of these extensions, or configure the toolkit to allow additional extensions.| |This message indicates that the <code>@href</code> value specified in %1 does not use proper URI syntax. This may occur when <code>@href</code> includes characters that should be escaped (such as the space character, which should be <code>%20</code> when in a URI). In strict processing mode this will cause a build failure; in other processing modes the build will continue using the value in %2.| |A conref \"mark\" action has been used to mark a target element without a corresponding content reference target. This may occur when the order of the \"mark\" element and the pushed element is reversed.| |A circular reference was found in key definitions: a series of key references where the last key references the first.</p> <p>This may occur if a <code>&lt;topicref&gt;</code> element contains both a key name in the <code>@keys</code> attribute and a reference to the same key in the <code>@keyref</code> attribute, or if a <code>@keyref</code> attribute points to a key that refers back to the referencing element.</p> <p>To resolve this issue, change the target of the <code>@keyref</code> so the key is defined by pointing to a resource other than itself.</p> <p>| |When a <code>@class</code> attribute does not use the expected syntax, this usually indicates that <code>@class</code> has been explicitly set on a DITA element. The attribute should be removed from the document so that the expected default value can be automatically used.</p> <p>If this is a non-DITA element, it needs to be placed inside a <code>&lt;foreign&gt;</code> element so that is not validated against DITA rules.</p> <p>| |Ensure that the DITAVAL file exists. If more than one DITAVAL file is specified, ensure that the paths are delimited using the file path separator character appropriate for your operating system (semicolon \u2018<code>;</code>\u2019 on Windows, or colon \u2018<code>:</code>\u2019 on macOS or Linux).| |This build uses generated text, such as the phrase \"Related information\" (which is generated above many link groups). The toolkit was unable to locate the string %1 for your specified language, so the string will appear in the default language. This generally indicates that the toolkit\u2019s strings need to be updated to support your language, or that your language setting is incorrect.| |The Eclipse help system requires a title in the project files generated from your map. Please add a title to your input map to get valid Eclipse help output.| |Eclipse uses anchor references to connect with other TOC files. For this to work in content generated from a DITA map, the anchorref element must reference either an existing Eclipse TOC XML file, or another DITA map (which will presumably also be converted to an Eclipse TOC).| |Eclipse builds use DITA\u2019s <code>&lt;navref&gt;</code> element to pull in other Eclipse TOC files. The build found a <code>&lt;navref&gt;</code> element that does not reference any other file; the element will be ignored.| |To remove this message, provide a navigation title for the referenced object in the map or topic, or ensure that you are referencing a valid local DITA target.| |Set the format attribute to identify the format of the file. If the reference is to a DITA document, ensure that the document uses a valid DITA extension (default supported extensions are \"dita\" and \"xml\").| |The HTML Help compiler will only include some types of information in the compiled CHM file; the current reference will not be included.| |Ensure that the file exists and can be read. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |To fix the table of contents, specify a navigation title in your map or ensure that the referenced file is local and can be accessed. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |No title was found in the specified topic, so the table of contents will use the indicated fallback value for this topic.| |The conref attribute must be a URI reference to an existing DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original. If the target element exists in your source file, check to make sure it is not filtered out of the build with a DITAVAL file (which will remove the target before conref processing runs).</p> <p>| |When pulling content with a conref attribute, you may only pull from a single element, but the target ID appears twice in the referenced topic. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |This message is deprecated and should no longer appear in any logs.| |This may appear if (for example) you have a <code>&lt;ph&gt;</code> element that references another phrase, but that phrase itself contains a reference to the original. This will result in an infinite loop. The toolkit will stop following the conref trail when this is detected; you will need to correct the reference in your source files. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |The conref attribute must be a URI reference to a DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax.| |The conref attribute must be a URI reference to a DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |This warning is intended to catch instances where a non-DITA format setting unexpectedly cascades to a DITA topic, which will prevent the topic from being processed. To remove this message, set the format attribute directly on the indicated reference. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |Found a value such as &lt;xref href=\"\"&gt;link text&lt;/xref&gt;. The empty href attribute is not serving a purpose and has caused problems with some tools in the past; you should remove the attribute entirely or specify a value.| |The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the type attribute lists a more general type than what is actually found. This is not an error but may result in unexpected sorting for links to this topic.| |The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the specified type value does not match the target, which may cause your links to sort inappropriately.| |DITA-OT is only able to dynamically retrieve titles when the target is a local (not peer or external) DITA resource.| |DITA-OT is only able to dynamically retrieve titles when the target is a local DITA resource.| |The build was unable to get a title from the referenced topic; instead, a navigation title will be created based on the specified <code>&lt;linktext&gt;</code> element inside of <code>&lt;topicmeta&gt;</code>.| |If the target is a local DITA topic, ensure the reference is correct and the topic is available. Otherwise, provide a navigation title, and ensure the scope and format attributes are set appropriately.| |DITA-OT is only able to dynamically retrieve titles and link text when the target is a local (not peer or external) DITA resource.| |DITA-OT is only able to dynamically retrieve titles when the target is a local DITA resource.| |The referenc to this document did not specify any link text for generated map-based links; the navigation title will be used as fallback.| |The referenced file did not specify any link text for generated map-based links, and no fallback text could be located. Any links generated from this reference will have incorrect link text.| |The link or cross reference has no target specified and will not generate a link.| |The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the type attribute lists a more general type than what is actually found. This is not an error but may result in unexpected sorting for links to this topic.| |The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the specified type value does not match the target, which may cause your links to sort inappropriately.| |The build attempted to access the specified file in order to retrive a title or short description, but the file could not be found. If the file exists, it is possible that a DITAVAL file was used to remove the file\u2019s contents from the build. Be aware that the path information above may not match the link in your topic.| |When a link or cross reference does not have content, the build will attempt to pull the target\u2019s title for use as link text. If the target is unavailable, be sure to set the scope attribute to an appropriate value. If the target does not have a title (such as when linking to a paragraph), be sure to provide link text inside the cross reference.| |An <code>&lt;xref&gt;</code> element specifies type=\"li\", which indicates a link to a list item, but the item number could not be determined to use as link text. Please specify link text inside the reference, or ensure that you are referencing an available list item.| |The cross reference goes to a list item in an unordered list. The process could not automatically generate link text because the list item is not numbered. Please provide link text within the cross reference.| |An <code>&lt;xref&gt;</code> element specifies type=\"fn\", which indicates a link to a footnote, but the footnote number could not be determined to use as link text. Please specify link text inside the reference, or ensure that you are referencing an available footnote.| |An <code>&lt;xref&gt;</code> element specifies type=\"dlentry\", which indicates a link to a definition list entry, but the term could not be located to use as link text. Please specify link text inside the reference, or ensure that you are referencing an available definition list entry| |No title was found for the current document, so the HTML output file will set the <code>&lt;title&gt;</code> to \"***\". This value generally appears in the title bar at the top of a browser.| |The <code>&lt;object&gt;</code> element in HTML does not support using longdescref for accessibility. To make the object accessible, you may need to add text before or after the element. You may also be able to handle it with a <code>&lt;param&gt;</code> element inside the object.| |This message is generated when creating draft output in order to help you locate all topics that need to be cleaned up; the cleanup items will appear in your output with styling that makes it stand out. The content will be hidden when the draft parameter is not active.| |This message is generated when creating draft output in order to help you locate all topics that have draft comments. Each comment will appear in your HTML output; the comments will be hidden when the draft parameter is not active.| |Because of the way XML and DITA are defined, it is generally not possible to prohibit adding a second title to a section during editing (or to force that title to come first). However, the DITA specification states that only one title should be used in a section. When multiple titles are found, only the first one will appear in the output.| |If it is important to flag this piece of information, try placing a flag on the block element that contains your phrase. If you just want to have an image next to the phrase, you may place an image directly into the document.| |DITA-OT is able to remove duplicate links in most cases. However, if two links to the same resource use different attributes or link text, it is possible for them to appear together. For example, if the same link shows up with role=\"next\" and again with no specified role, it may show up as both the \"Next topic\" link and as a related link. Note that links generated from a <code>&lt;reltable&gt;</code> in a DITA map will have the role attribute set to \"friend\".| |The <code>&lt;area&gt;</code> element in an image map must provide a link target for the specified area. Please add an <code>&lt;xref&gt;</code> element as a child of <code>&lt;area&gt;</code> and ensure that it specifies a link target.| |Cross reference text inside the <code>&lt;area&gt;</code> element is used to provide accessibility for screen readers that can identify different areas of an image map. If text cannot be retrieved automatically by referencing a DITA element, it should be specified directly in the cross reference.| |The specified value was passed as-is through to the <code>&lt;area&gt;</code> element in the HTML.| |The area element is intended to define a region in an image map; coordinates must be specified in order to define that region.| |The build will not look for peer or external topics before compiling your CHM file, so they may not be included. If you are referencing an actual HTML file that will not be available, it cannot be included in the project, and you should set the toc attribute to \"no\" on your topicref element. Otherwise, check to be sure your HTML file was included in the CHM; if it was not, you will need to place it in the correct location with your other output files and recompile.| |The PDF, ODT, and RTF output processes cannot automatically convert non-DITA content into DITA in order to merge it with the rest of your content. The referenced items are ignored.| |Eclipse requires that an ID be specified when creating an Eclipse Help project; the toolkit expects to locate that ID on the root element of your input map.| |The toolkit is attempting to add generated text, such as the string \"Related information\" that appears above links. The requested string could not be found in any language. Your output may contain a meaningful string, or it may contain a code that was intended to map to a string. This likely indicates an error in a plug-in or XSL override; either the string was requested incorrectly, or you will need to provide a mapping for the string in all of the languages you require.| |This will occur if a map references another map, and then that second map (or another further nested map) references the original map. The result is an infinite nesting of maps; please correct the chain of map references to remove circular reference.| |This will occur when a DITAVAL file contains multiple styling rules that apply to the same element.| |The \"flagit\" named template was deprecated in DITA-OT version 1.4, when the OASIS standard formalized the DITAVAL syntax. The template is removed in DITA-OT 1.6. Stylesheets that used this template need to be updated.| |The build attempted to access the specified file in order to retrive a title or short description, but the file could not be found. If the file exists, it is possible that a DITAVAL file was used to remove the file\u2019s contents from the build. Another possibility is that the file is located outside of the scope of the main input directory, and was not available because the onlytopic.in.map parameter was specified. Be aware that the path information above may not match the link in your topic.| |The link appears to use valid syntax to reference a DITA element, but that element cannot be found. Please verify that the element exists, and is not removed from the build by DITAVAL based filtering.| |Processing for terms, acronyms, or abbreviated forms will associate the key from the element\u2019s keyref attribute with a glossentry (glossary entry) topic. This message will appear if the key was defined, but was not associated with a glossentry topic. The process will try to use the best available fallback (usually the title of the referenced topic).| |Processing for abbreviated form elements will associate the key from the element\u2019s keyref attribute with a glossentry (glossary entry) topic. This message will appear if the key was defined, but was not associated with a glossentry topic. This element is only supported with keys that are associated with glossary topics; the element will not generate any output. Please correct the reference, or use a different element to reference your topic.| |According to the DITA Specification, references from maps should either go to DITA Maps, DITA Topics, or any non-DITA resource. References below the topic level should only be made from cross references (using <code>&lt;xref&gt;</code> or similar) inside of a topic. For details, see the href attribute description in the OASIS standard\u2019s definition of the topicref element.| |This will appear when generating PDF or ODT output that includes a link to a local topic, but the referenced topic is not part of the map itself. This will result in a broken link. You should include the topic in your map or remove the link from the build.| |The copy-to attribute is used to copy a topic over a document that already exists. Please make sure that any copy-to attributes use a unique name so that the copy will not overwrite existing content.| |Two different topics are copied to the same location using copy-to; as a result, one of these files would be over-written. Only the first instance of this copy-to value will be recognized. Please correct the use of copy-to attributes.| |This message indicates that your custom XSLT or plug-ins rely on templates that will be removed in an upcoming release. Typically this occurs when a named template has been converted to a mode template; any code that uses the deprecated template should be updated.| |This PDF build uses generated text, such as the phrase \"Related information\" (which is generated above many link groups). The toolkit was unable to locate the string %1 for your specified language, so the string will appear in the default language. This generally indicates that the toolkit\u2019s strings need to be updated to support your language, or that your language setting is incorrect.|</p>"},{"location":"topics/error-messages-details/#additional-explanation-for-messages-in-the-orgditapdf2-plugin","title":"Additional explanation for messages in the <code>org.dita.pdf2</code> plugin","text":"<p>|The PDF index process relies on pre-defined letter headings when sorting terms. The specified term does not begin with a character that can be mapped to an existing heading. Typically this term would be placed in a \"Special characters\" group, but the current language did not specify such a group when setting up the index sort process.| |The PDF index process relies on pre-defined letter headings when sorting terms. The specified term does not begin with a character that can be mapped to an existing heading, so it has been placed under a heading for terms that begin with special characters such as punctuation. If this term should be sorted under a new or existing letter heading, please open an issue with DITA-OT to correct the sort.| |Found an <code>&lt;index-see&gt;</code> element as a child of a term that also exists as a standalone index term, or as a term that also uses <code>&lt;index-see-also&gt;</code>. When using <code>&lt;index-see&gt;</code> with an index term, that term should not be used to create page references and should not reference additional terms. Treating the <code>&lt;index-see&gt;</code> as <code>&lt;index-see-also&gt;</code>.| ||</p>"},{"location":"topics/error-messages/","title":"DITA-OT error messages","text":"<p>This topic lists each error message generated by the toolkit and provides additional information that might be helpful in understanding and resolving the error condition. If your toolkit installation includes custom plug-ins that define additional messages, you can add to this list by rebuilding the DITA-OT documentation.</p> <p>Each message ID is composed of a message prefix, a message number, and a letter that indicates the severity level (I, W, E, or F).</p> <p>The toolkit uses the following severity scale:</p> <ul> <li> <p>Info (I)</p> <p>Informational messages highlight the progress of transformation and call attention to conditions of which you should be aware. For example, draft comments are enabled and will be rendered in the output.</p> </li> <li> <p>Warning (W)</p> <p>The toolkit encountered a problem that should be corrected. Processing will continue, but the output might not be as expected.</p> </li> <li> <p>Error (E)</p> <p>The toolkit encountered a more severe problem, and the output is affected. For example, some content is missing or invalid, or the content is not rendered in the output</p> </li> <li> <p>Fatal (F)</p> <p>The toolkit encountered a severe condition, processing stopped, and no output is generated.</p> </li> </ul> <p>Plug-ins may be used to add additional messages to the toolkit; for more information, see Rebuilding the DITA-OT documentation.</p> Message\u00a0ID Severity Message text Additional details DOTA001F Fatal \"%1\" is not a recognized transformation type. Supported transformation types are dita, eclipsehelp, html5, htmlhelp, markdown, markdown_gitbook, markdown_github, org.dita-ot.html, pdf, pdf2, xhtml. Default transformation types that ship with the toolkit include dita, eclipsehelp, html5, htmlhelp, markdown variants, pdf (or pdf2), and xhtml. Additional transformation types may be available if toolkit plug-ins are installed. DOTA002F Fatal Input file is not specified, or is specified using the wrong parameter. The input parameter was not specified, so there is no DITA or DITAMAP file to transform. Ensure the parameter is set properly; see DITA-OT common parameters (args.input) if you are unsure how to specify the input file. DOTA003F Fatal Cannot find the user specified XSLT stylesheet '%1'. An alternate stylesheet was specified to run in place of the default XSLT output process, but that stylesheet could not be loaded. Please correct the parameter to specify a valid stylesheet. DOTA004F Fatal Invalid DITA topic extension '%1'. Supported values are '.dita' and '.xml'. This optional parameter is used to set an extension for DITA topic documents in the temporary processing directory. Only \"dita\", \".dita\", \"xml\", or \".xml\" are allowed. DOTA006W Warning Absolute paths on the local file system are not supported for the CSSPATH parameter. Please use a relative path or full URI instead. If the CSSPATH uses an absolute path, it should be one that can still be accessed after the files are moved to another system (such as <code>http://www.example.org/</code>). Absolute paths on the local file system will be broken if the content is moved to a new system. DOTA007E Error Cannot find the running-footer file \"%1\". Please double check the value to ensure it is specified correctly. The running footer file, which contains content to be added to the bottom of each XHTML output topic, cannot be located or read. This is usually caused by a typo in the parameter value. You should also ensure that the value is not specified with \"file:\" as a prefix. DOTA008E Error Cannot find the running-header file \"%1\". Please double check the value to ensure it is specified correctly. The running header file, which contains content to be added to the top of each XHTML output topic, cannot be located or read. This is usually caused by a typo in the parameter value. You should also ensure that the value is not specified with \"file:\" as a prefix. DOTA009E Error Cannot find the specified heading file \"%1\". Please double check the value to ensure it is specified correctly. The running heading file, which contains content to be added to the <code>&lt;head&gt;</code> section of each HTML output topic, cannot be located or read. This is usually caused by a typo in the parameter value. You should also ensure that the value is not specified with \"file:\" as a prefix. DOTA011W Warning Argument \"%1\" is deprecated. This argument is no longer supported in the toolkit. DOTA012W Warning Argument \"%1\" is deprecated. Please use the argument \"%2\" instead. DOTA013F Fatal Cannot find the specified DITAVAL '%1'. DOTA014W Warning Attribute @%1 is deprecated. Use attribute @%2 instead. DOTA015F Fatal Internal property %1 may not be set directly. Use property %2 instead. DOTA066F Fatal Cannot find the user specified XSLT stylesheet '%1'. An alternate stylesheet was specified to run in place of the default XSL-FO output process, but that stylesheet could not be loaded. Please correct the parameter to specify a valid stylesheet. DOTA067W Warning Ignoring index-see '%1' inside parent index entry '%2' because the parent indexterm contains indexterm children. According to the OASIS DITA Specification, the <code>&lt;index-see&gt;</code> element should be ignored if the parent <code>&lt;indexterm&gt;</code> contains other <code>&lt;indexterm&gt;</code> children. DOTA068W Warning Ignoring index-see-also '%1' inside parent index entry '%2' because the parent indexterm contains indexterm children. According to the OASIS DITA Specification, the <code>&lt;index-see-also&gt;</code> element should be ignored if the parent <code>&lt;indexterm&gt;</code> contains other <code>&lt;indexterm&gt;</code> children. DOTA069F Fatal Input file '%1' cannot be located or read. Ensure that file was specified properly and that you have permission to access it. Please ensure that the input file path and file name were entered correctly. DOTA069W Warning Target \"%1\" is deprecated. Remove references to this target from your custom XSLT or plug-ins. DOTJ005F Fatal Failed to create new instance for '%1'. Please ensure that '%1' exists and that you have permission to access it. DOTJ007E Error Duplicate condition in filter file for rule '%1'. The first encountered condition will be used. DOTJ007I Info Duplicate condition in filter file for rule '%1'. The first encountered condition will be used. DOTJ007W Warning Duplicate condition in filter file for rule '%1'. The first encountered condition will be used. DOTJ009E Error Cannot overwrite file '%1' with file '%2'. The modified result may not be consumed by the following steps in the transform pipeline. Check to see whether the file is locked by some other application during the transformation process. The transform was unable to create files properly during the transform; results may not be as expected. DOTJ012F Fatal Failed to parse the input file '%1'. This message may indicate an invalid input file (such as accidentally specifying a PDF file as input rather than a DITA map file), an input file that uses elements which are not allowed, are not part or a DITA file that has errors and cannot be parsed as XML. You could also be using a specialized DITA document type that needs external plug-ins in order to be parsed correctly. The message issued by the XML parser should provide additional information to help diagnose the cause. DOTJ013E Error Failed to parse the referenced file '%1'. This message may indicate a reference to an invalid file (such as accidentally referencing a PDF or unknown XML file as if it was DITA), a referenced file that uses elements which are not allowed, or a referenced DITA file that has errors and cannot be parsed as XML. You could also be using a specialized DITA document type that needs external plug-ins in order to be parsed correctly. The message issued by the XML parser should provide additional information to help diagnose the cause. DOTJ014W Warning Found an indexterm element with no content. Setting the term to ***. An empty <code>&lt;indexterm&gt;</code> element was found, and will appear in the index as ***. This index term should be removed from the source. DOTJ018I Info Log file '%1' was generated successfully in directory '%2'. Any messages from the transformation process are available in the log file; additional details about each message are available in the DITA-OT documentation. DOTJ020W Warning At least one plug-in in '%1' is required by plug-in '%2'. Plug-in '%2' cannot be loaded. Check and see whether all prerequisite plug-ins are installed in toolkit. This will appear when one installed plug-in requires another in order to function correctly, but the required plug-in is not found. The installed plug-in will be ignored. DOTJ021E Error File '%1' will not generate output because because all content has been filtered out by DITAVAL \"exclude\" conditions, or because the file is not valid DITA. DOTJ021W Warning File '%1' will not generate output since it is invalid or all of its content has been filtered out by the ditaval file. Please check the file '%1' and the ditaval file to see if this is the intended result. This may appear if filter conditions on the root element of a topic cause the entire topic to be filtered out. To remove this message, you could place any filter conditions on the reference to this file, which will prevent the build from accessing this file. DOTJ022F Fatal Failed to parse the input file '%1' because all of its content has been filtered out. This will happen if the input file has filter conditions on the root element, and a ditaval excludes all content based on those conditions. Either the input file or the ditaval file should change, otherwise your build is explicitly excluding all content. DOTJ023E Error Failed to get the specified image file '%1', so it will not be included with your output. Check whether the image exists in the source location or already exists in the output directory. DOTJ025E Error The input to the \"topic merge\" transform process could not be found. Correct any earlier transform errors and try the build again, or see the DITA-OT documentation for additional causes. This message should only appear in the following cases: -   Errors earlier in the transform prevented this step of the transform from running; correct any errors and try the build again. -   An Ant build or plug-in is directly calling the toolkit\u2019s topic merge module, and is doing so improperly; in this case the Ant build or plug-in needs to be fixed. -   In the past, problems have been encountered when calling this module with an absolute path; this should no longer be an issue, but may be fixed in older releases by updating the Ant build or plug-in. <p>| |DOTJ026E|Error|The \"topic merge\" did not generate any output. Correct any earlier transform errors and try the build again, or see the DITA-OT documentation for additional causes.|This message should only appear if an Ant build or plug-in is directly calling the toolkit\u2019s topic merge module, or if earlier errors resulted in problems with some of the content. If the topic merge module is called correctly, then this indicates a program error that should be reported to the DITA-OT development team via the GitHub issues tracker.| |DOTJ028E|Error|No format attribute was found on a reference to file '%1', which does not appear to be a DITA file. If this is not a DITA file, set the format attribute to an appropriate value, otherwise set the format attribute to \"dita\".|When referencing a non-DITA file, the format attribute should indicate the type of file referenced (such as \"html\" for HTML topics or \"pdf\" for PDF files). Otherwise, the transform may attempt to parse the referenced document as a DITA topic.| |DOTJ029I|Info|No 'domains' attribute was found for element '&lt;%1&gt;'. This generally indicates that your DTD or Schema was not developed properly according to the DITA specification.|The domains attribute is used in specialized DITA documents to help determine which domain elements are legal. This message will only appear if a DITA specialization was not defined properly.| |DOTJ030I|Info|No 'class' attribute for was found for element '&lt;%1&gt;'. The element will be processed as an unknown or non-DITA element.|All specialized DITA elements must define a class attribute to provide ancestry information. This message will only appear if a specialized DITA element did not define a class attribute, or if non-DITA elements are included in a DITA context.| |DOTJ031I|Info|No specified rule for '%1' was found in the ditaval file. This value will use the default action, or a parent prop action if specified. To remove this message, you can specify a rule for '%1' in the ditaval file.|This informational message is intended to help you catch filter conditions that may have been specified improperly; if the value is correct, no action is needed.| |DOTJ033E|Error|No valid content is found in topicref '%1' during chunk processing. Please specify an existing and valid topic for the topicref.|\u00a0| |DOTJ034F|Fatal|Failed to parse the input file '%1' (the content of the file is not valid). If the input file '%1' does not have a DOCTYPE declaration, please make sure that all class attributes are present in the file.|DITA processing is based on class attributes defined for every element. Usually these are defaulted in the DTD or Schema; if no DTD or Schema is used, the class attributes must be explicitly included in the map or topic.| |DOTJ035F|Fatal|The file \"%1\" is outside the scope of the input dita/map directory. If you want to lower the severity level, please use the Ant parameter 'outer.control', and set the value to \"warn\" or \"quiet\". Otherwise, move the referenced file \"%1\" into the input dita/map directory.|This will appear when a topic is outside the scope of the map; for example, if the main input map references <code>\"../other-directory/some.dita\"</code>. The result would cause an output file to be created outside of the output directory. See DITA-OT common parameters (outer.control and generate.copy.outer) for details.| |DOTJ036W|Warning|The file \"%1\" is outside the scope of the input dita/map directory.|This will appear when a topic is outside the scope of the map; for example, if the main input map references <code>\"../other-directory/some.dita\"</code>. The result would cause an output file to be created outside of the output directory. If you do not want to see the warning message, please use the Ant parameter 'outer.control', and set the value to \"quiet\". Otherwise, move the referenced file into the input dita/map directory. See DITA-OT common parameters (outer.control and generate.copy.outer) for details.| |DOTJ037W|Warning|The XML schema and DTD validation function of the parser is turned off. Please make sure the input is normalized DITA with class attributes included, otherwise it will not be processed correctly.|DITA processing is based on class attributes defined for every element. Usually these are defaulted in the DTD or Schema; if validation against the DTD or Schema is turned off, the class attributes must be explicitly included in the map or topic.| |DOTJ038E|Error|The tag \"%1\" is specialized from unrecognized metadata. Please make sure that tag \"%1\" is specialized from an existing metadata tag in the core DITA vocabulary.|This appears to indicate an error in creating specialized metadata elements. Please verify that the document type you are using is complete and complies with DITA Specialization rules.| |DOTJ039E|Error|There is no target specified for conref push action \"pushafter\". Please add &lt;elementname conref=\"pushtarget\" conaction=\"mark\"&gt; before current element.|Please see the topic on Conref Push in the DITA specification for details on expected syntax for this function.| |DOTJ040E|Error|An element uses the attribute conaction=\"replace\", but a conref attribute is not found in the expected location.|Please see the topic on Conref Push in the DITA specification for details on expected syntax for this function.| |DOTJ041E|Error|The attribute conref=\"%1\" uses invalid syntax. The value should contain '#' followed by a topic or map ID, optionally followed by '/elemID' for a sub-topic element.|The conref attribute must be a URI reference to a DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax.| |DOTJ042E|Error|Two elements both use conref push to replace the target \"%1\". Please delete one of the duplicate \"replace\" actions.|The conref push function was used to replace a single element with two or more alternatives. Only one element may directly replace another using conref push. See Conref Push in the DITA specification for more information about the conref push \"replace\" function.| |DOTJ043W|Warning|The conref push function is trying to replace an element that does not exist (element \"%1\" in file \"%2\").|The target for a conref push action does not exist; please make sure that the syntax is correct and that the target exists. See the topic on URI-based addressing in the DITA specification for details on the expected syntax. If the syntax is correct, it is possible that the target was filtered out of your build using a DITAVAL file.| |DOTJ044W|Warning|There is a redundant conref action \"pushbefore\". Please make sure that \"mark\" and \"pushbefore\" occur in pairs.|Please see the topic on Conref Push in the DITA specification for details on expected syntax for this function.| |DOTJ045I|Info|The key \"%1\" is defined more than once in the same map file.|This informational message is intended to help you catch catch duplicate key definitions; if the keys are defined as expected, no action is needed.| |DOTJ046E|Error|Conkeyref=\"%1\" can not be resolved because it does not contain a key or the key is not defined. The build will use the conref attribute for fallback, if one exists.|See the conkeyref definition for details on expected syntax and usage.| |DOTJ047I|Info|Unable to find key definition for key reference \"%1\" in root scope. The href attribute may be used as fallback if it exists|This message is intended to help you locate incorrectly specified keys; if the key was specified correctly, this message may be ignored.| |DOTJ048I|Info|Unable to find key definition for key reference \"%1\" in scope \"%2\". The href attribute may be used as fallback if it exists|\u00a0| |DOTJ049W|Warning|The attribute value %1=\"%3\" on element \"%2\" does not comply with the specified subject scheme. According to the subject scheme map, the following values are valid for the %1 attribute: %4|A DITA Subject Scheme map was used to limit values that are available to the specified attribute. Please correct the attribute so that it uses one of the allowed values.| |DOTJ050W|Warning|Found an &lt;index-see&gt; or &lt;index-see-also&gt; reference to the term '%1', but that term is not defined in the index.|The Eclipse index will contain a value such as \"See also otherEntry\", but otherEntry does not exist in this index. The index reference will be broken unless this plug-in is always loaded into Eclipse with another plug-in that defines otherEntry as an index term.| |DOTJ051E|Error|Unable to load target for coderef \"%1\".|The target for a coderef element, which specifies an external text-based file, could not be located or loaded. Please verify that the reference is correct. Note that for security reasons, references to code samples outside of the scope of the map directory are not supported by default, as this could allow a reference to access and display any restricted or hidden file on the system. If you are certain that the path is valid and the file should be loaded, the current workaround is to set a parameter to allow these references. See DITA-OT common parameters (outer.control and generate.copy.outer) for details.</p> <p>| |DOTJ052E|Error|Code reference charset \"%1\" not supported. See the DITA-OT documentation for supported charset values on the format attribute.|DITA-OT supports a special syntax on coderef elements to specify the character set of the target document. See Extended codeblock processing for details on the expected syntax.| |DOTJ053W|Warning|Input file '%1' is not valid DITA file name. Please check '%1' to see if it is correct. The extensions \".dita\" or \".xml\" are supported for DITA topics.|By default, DITA-OT supports the extensions \"dita\" and \"xml\" for DITA topics, as mandated by the DITA specification. Please verify that your topics use one of these extensions, or configure the toolkit to allow additional extensions.| |DOTJ054E|Error|Unable to parse invalid %1 attribute value \"%2\"|This message indicates that the <code>@href</code> value specified in %1 does not use proper URI syntax. This may occur when <code>@href</code> includes characters that should be escaped (such as the space character, which should be <code>%20</code> when in a URI). In strict processing mode this will cause a build failure; in other processing modes the build will continue using the value in %2.| |DOTJ055E|Error|Invalid key name \"%1\".|\u00a0| |DOTJ056E|Error|Invalid xml:lang \"%1\".|\u00a0| |DOTJ057E|Error|The id attribute value \"%1\" is not unique within the topic that contains it.|\u00a0| |DOTJ058E|Error|Both %1 and %2 attributes defined. A single element may not contain both generalized and specialized values for the same attribute.|\u00a0| |DOTJ059E|Error|Invalid key scope name \"%1\".|\u00a0| |DOTJ060W|Warning|Key \"%1\" was used in conkeyref but is not bound to a DITA topic or map. Cannot resolve conkeyref value \"%2\" as a valid conref reference.|\u00a0| |DOTJ061E|Error|Topic reference target is a DITA map but format attribute has not been set. Set format attribute value to \"ditamap\".|\u00a0| |DOTJ062E|Error|Invalid %1 attribute value \"%2\".|\u00a0| |DOTJ063E|Error|The cols attribute is \"%1\" but number of colspec elements was %2.|\u00a0| |DOTJ064W|Warning|Chunk attribute uses both \"to-content\" and \"by-topic\" that conflict with each other. Ignoring \"by-topic\" token.|\u00a0| |DOTJ065I|Info|Branch filter generated topic %1 used more than once. Renaming %1 to %2.|\u00a0| |DOTJ066E|Error|No id attribute on topic type element %1. Using generated id %2.|\u00a0| |DOTJ067E|Error|No id attribute on topic type element %1.|\u00a0| |DOTJ068E|Error|Conref action \"mark\" without conref target.|A conref \"mark\" action has been used to mark a target element without a corresponding content reference target. This may occur when the order of the \"mark\" element and the pushed element is reversed.| |DOTJ069E|Error|Circular key definition %1.|A circular reference was found in key definitions: a series of key references where the last key references the first.</p> <p>This may occur if a <code>&lt;topicref&gt;</code> element contains both a key name in the <code>@keys</code> attribute and a reference to the same key in the <code>@keyref</code> attribute, or if a <code>@keyref</code> attribute points to a key that refers back to the referencing element.</p> <p>To resolve this issue, change the target of the <code>@keyref</code> so the key is defined by pointing to a resource other than itself.</p> <p>| |DOTJ070I|Info|Invalid 'class' attribute '%1' for was found for element '&lt;%2&gt;'. The element will be processed as an unknown or non-DITA element.|When a <code>@class</code> attribute does not use the expected syntax, this usually indicates that <code>@class</code> has been explicitly set on a DITA element. The attribute should be removed from the document so that the expected default value can be automatically used.</p> <p>If this is a non-DITA element, it needs to be placed inside a <code>&lt;foreign&gt;</code> element so that is not validated against DITA rules.</p> <p>| |DOTJ071E|Error|Cannot find the specified DITAVAL '%1'.|Ensure that the DITAVAL file exists. If more than one DITAVAL file is specified, ensure that the paths are delimited using the file path separator character appropriate for your operating system (semicolon \u2018<code>;</code>\u2019 on Windows, or colon \u2018<code>:</code>\u2019 on macOS or Linux).| |DOTJ072E|Error|Email link without correct 'format' attribute. Using 'format' attribute value 'email'.|\u00a0| |DOTJ073E|Error|Email link without correct 'scope' attribute. Using 'scope' attribute value 'external'.|\u00a0| |DOTJ074W|Warning|Rev attribute cannot be used with prop filter.|\u00a0| |DOTJ075W|Warning|Absolute link '%1' without correct 'scope' attribute. Using 'scope' attribute value 'external'.|\u00a0| |DOTJ076W|Warning|Absolute link '%1' without correct 'scope' attribute.|\u00a0| |DOTJ077F|Fatal|Invalid action attribute '%1' on DITAVAL property.|\u00a0| |DOTJ078F|Fatal|Input file '%1' could not be loaded. Ensure that grammar files for this document type are referenced and installed properly.|\u00a0| |DOTJ079E|Error|File '%1' could not be loaded. Ensure that grammar files for this document type are referenced and installed properly.|\u00a0| |DOTJ080W|Warning|Integrator configuration '%1' has been deprecated. Use plugin configuration '%1' instead.|\u00a0| |DOTJ081W|Warning|Ignoring empty conref attribute conref=\"\".|\u00a0| |DOTJ082E|Error|Processing table cell failed.|\u00a0| |DOTJ083E|Error|The resource referenced as %1 is capitalized differently on disk|\u00a0| |DOTJ084E|Error|Couldn\u2019t read '%1' with the %2 character set. Save the file with %2 encoding.|\u00a0| |DOTJ085E|Error|The '%1' parameter cannot be set with 'param' in project files. Use '%2' instead.|\u00a0| |DOTJ086W|Warning|Split chunk attribute found on '&lt;%1&gt;' element that does not reference a topic. Ignoring chunk operation.|\u00a0| |DOTJ087W|Warning|Found chunk attribute with value '%1' inside combine chunk. Ignoring chunk operation.|\u00a0| |DOTX001W|Warning|No string named '%1' was found for language '%2'. Using the default language '%3'. Add a mapping between default language and desired language for the string '%1'.|This build uses generated text, such as the phrase \"Related information\" (which is generated above many link groups). The toolkit was unable to locate the string %1 for your specified language, so the string will appear in the default language. This generally indicates that the toolkit\u2019s strings need to be updated to support your language, or that your language setting is incorrect.| |DOTX002W|Warning|The title element or attribute in the ditamap is required for Eclipse output.|The Eclipse help system requires a title in the project files generated from your map. Please add a title to your input map to get valid Eclipse help output.| |DOTX003I|Info|The anchorref attribute should either reference another dita map or an Eclipse XML TOC file. The value '%1' does not appear to reference either.|Eclipse uses anchor references to connect with other TOC files. For this to work in content generated from a DITA map, the anchorref element must reference either an existing Eclipse TOC XML file, or another DITA map (which will presumably also be converted to an Eclipse TOC).| |DOTX004I|Info|Found a navref element that does not reference anything. The navref element should either reference another dita map or an Eclipse XML file.|Eclipse builds use DITA\u2019s <code>&lt;navref&gt;</code> element to pull in other Eclipse TOC files. The build found a <code>&lt;navref&gt;</code> element that does not reference any other file; the element will be ignored.| |DOTX005E|Error|Unable to find navigation title for reference to '%1'. The build will use '%1' as the title in the Eclipse Table of Contents.|To remove this message, provide a navigation title for the referenced object in the map or topic, or ensure that you are referencing a valid local DITA target.| |DOTX006E|Error|Unknown file extension in href=\"%1\". References to non-DITA resources should set the format attribute to match the resource (for example, 'txt', 'pdf', or 'html').|Set the format attribute to identify the format of the file. If the reference is to a DITA document, ensure that the document uses a valid DITA extension (default supported extensions are \"dita\" and \"xml\").| |DOTX007I|Info|Only DITA topics, HTML files, and images may be included in your compiled CHM file. The reference to \"%1\" will be ignored. To remove this message, you can set the toc=\"no\" or processing-role=\"resource-only\" attribute on your topicref.|The HTML Help compiler will only include some types of information in the compiled CHM file; the current reference will not be included.| |DOTX008E|Error|File '%1' does not exist or cannot be loaded.|Ensure that the file exists and can be read. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |DOTX008W|Warning|File '%1' cannot be loaded, and no navigation title is specified for the table of contents.|To fix the table of contents, specify a navigation title in your map or ensure that the referenced file is local and can be accessed. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |DOTX009W|Warning|Could not retrieve a title from '%1'. Using '%2' instead.|No title was found in the specified topic, so the table of contents will use the indicated fallback value for this topic.| |DOTX010E|Error|Unable to find target for conref=\"%1\".|The conref attribute must be a URI reference to an existing DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original. If the target element exists in your source file, check to make sure it is not filtered out of the build with a DITAVAL file (which will remove the target before conref processing runs).</p> <p>| |DOTX011W|Warning|There is more than one possible target for the reference conref=\"%1\". Only the first will be used. Remove the duplicate id in the referenced file.|When pulling content with a conref attribute, you may only pull from a single element, but the target ID appears twice in the referenced topic. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |DOTX012W|Warning|When you conref another topic or an item in another topic, the domains attribute of the target topic must be equal to or a subset of the current topic's domains attribute. Put your target under an appropriate domain. You can see the messages guide for more help.|This message is deprecated and should no longer appear in any logs.| |DOTX013E|Error|A element with attribute conref=\"%1\" indirectly includes itself, which results in an infinite loop.|This may appear if (for example) you have a <code>&lt;ph&gt;</code> element that references another phrase, but that phrase itself contains a reference to the original. This will result in an infinite loop. The toolkit will stop following the conref trail when this is detected; you will need to correct the reference in your source files. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |DOTX014E|Error|The attribute conref=\"%1\" uses invalid syntax. Conref references to a map element should contain '#' followed by an ID, such as mymap.ditamap#mytopicrefid.|The conref attribute must be a URI reference to a DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax.| |DOTX015E|Error|The attribute conref=\"%1\" uses invalid syntax. The value should contain '#' followed by a topic or map ID, optionally followed by '/elemID' for a sub-topic element.|The conref attribute must be a URI reference to a DITA element. Please see the topic on URI-based addressing in the DITA specification for details on the expected syntax. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |DOTX016W|Warning|A reference to \"%2\" appears to reference a DITA document, but the format attribute has inherited a value of \"%1\". The document will not be processed as DITA.|This warning is intended to catch instances where a non-DITA format setting unexpectedly cascades to a DITA topic, which will prevent the topic from being processed. To remove this message, set the format attribute directly on the indicated reference. Note that the name of the file in this message may have be changed to use a standard dita topic file extension ('.dita' or '.xml'), instead of the original extension used by the file; it may also include a path to the temporary directory rather than to the original.| |DOTX017E|Error|Found a link or cross reference with an empty href attribute (href=\"\"). Remove the empty href attribute or provide a value.|Found a value such as &lt;xref href=\"\"&gt;link text&lt;/xref&gt;. The empty href attribute is not serving a purpose and has caused problems with some tools in the past; you should remove the attribute entirely or specify a value.| |DOTX018I|Info|The type attribute on a topicref was set to '%1', but the topicref references a more specific '%2' topic. Note that the type attribute cascades in maps, so the value '%1' may come from an ancestor topicref.|The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the type attribute lists a more general type than what is actually found. This is not an error but may result in unexpected sorting for links to this topic.| |DOTX019W|Warning|The type attribute on a topicref was set to '%1', but the topicref references a '%2' topic. This may cause your links to sort incorrectly in the output. Note that the type attribute cascades in maps, so the value '%1' may come from an ancestor topicref.|The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the specified type value does not match the target, which may cause your links to sort inappropriately.| |DOTX020E|Error|Missing navtitle attribute or element for peer topic \"%1\". References must provide a local navigation title when the target is not a local DITA resource.|DITA-OT is only able to dynamically retrieve titles when the target is a local (not peer or external) DITA resource.| |DOTX021E|Error|Missing navtitle attribute or element for non-DITA resource \"%1\". References must provide a local navigation title when the target is not a local DITA resource.|DITA-OT is only able to dynamically retrieve titles when the target is a local DITA resource.| |DOTX022W|Warning|Unable to retrieve navtitle from target: '%1'. Using linktext (specified in topicmeta) as the navigation title.|The build was unable to get a title from the referenced topic; instead, a navigation title will be created based on the specified <code>&lt;linktext&gt;</code> element inside of <code>&lt;topicmeta&gt;</code>.| |DOTX023W|Warning|Unable to retrieve navtitle from target: '%1'.|If the target is a local DITA topic, ensure the reference is correct and the topic is available. Otherwise, provide a navigation title, and ensure the scope and format attributes are set appropriately.| |DOTX024E|Error|Missing linktext and navtitle for peer topic \"%1\". References must provide a local navigation title when the target is not a local DITA resource.|DITA-OT is only able to dynamically retrieve titles and link text when the target is a local (not peer or external) DITA resource.| |DOTX025E|Error|Missing linktext and navtitle for non-DITA resource \"%1\". References must provide a local navigation title when the target is not a local DITA resource.|DITA-OT is only able to dynamically retrieve titles when the target is a local DITA resource.| |DOTX026W|Warning|Unable to retrieve linktext from target: '%1'. Using navigation title as fallback.|The referenc to this document did not specify any link text for generated map-based links; the navigation title will be used as fallback.| |DOTX027W|Warning|Unable to retrieve linktext from target: '%1'.|The referenced file did not specify any link text for generated map-based links, and no fallback text could be located. Any links generated from this reference will have incorrect link text.| |DOTX028E|Error|Link or cross reference must contain a valid href or keyref attribute; no link target is specified.|The link or cross reference has no target specified and will not generate a link.| |DOTX029I|Info|The type attribute on a %1 element was set to %3, but the reference is to a more specific %4 %2. This may cause your links to sort incorrectly in the output.|The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the type attribute lists a more general type than what is actually found. This is not an error but may result in unexpected sorting for links to this topic.| |DOTX030W|Warning|The type attribute on a %1 element was set to %3, but the reference is to a %4 %2. This may cause your links to sort incorrectly in the output.|The type attribute in DITA is intended to describe the type of the target; for example, a reference to a concept topic may use type=\"concept\". Generally, this attribute is optional, and the DITA-OT build will automatically determine the value during processing. In this case, the specified type value does not match the target, which may cause your links to sort inappropriately.| |DOTX031E|Error|The file %1 is not available to resolve link information.|The build attempted to access the specified file in order to retrive a title or short description, but the file could not be found. If the file exists, it is possible that a DITAVAL file was used to remove the file\u2019s contents from the build. Be aware that the path information above may not match the link in your topic.| |DOTX032E|Error|Unable to retrieve link text from target: '%1'. If the target is not accessible at build time, or does not have a title, provide the link text inside the reference.|When a link or cross reference does not have content, the build will attempt to pull the target\u2019s title for use as link text. If the target is unavailable, be sure to set the scope attribute to an appropriate value. If the target does not have a title (such as when linking to a paragraph), be sure to provide link text inside the cross reference.| |DOTX033E|Error|Unable to generate link text for a cross reference to a list item: '%1'|An <code>&lt;xref&gt;</code> element specifies type=\"li\", which indicates a link to a list item, but the item number could not be determined to use as link text. Please specify link text inside the reference, or ensure that you are referencing an available list item.| |DOTX034E|Error|Unable to generate link text for a cross reference to an unordered list item: '%1'|The cross reference goes to a list item in an unordered list. The process could not automatically generate link text because the list item is not numbered. Please provide link text within the cross reference.| |DOTX035E|Error|Unable to generate the correct number for a cross reference to a footnote: '%1'|An <code>&lt;xref&gt;</code> element specifies type=\"fn\", which indicates a link to a footnote, but the footnote number could not be determined to use as link text. Please specify link text inside the reference, or ensure that you are referencing an available footnote.| |DOTX036E|Error|Unable to generate link text for a cross reference to a dlentry (the dlentry or term could not be found): '%1'|An <code>&lt;xref&gt;</code> element specifies type=\"dlentry\", which indicates a link to a definition list entry, but the term could not be located to use as link text. Please specify link text inside the reference, or ensure that you are referencing an available definition list entry| |DOTX037W|Warning|No title found for this document; using \"***\" as HTML page title.|No title was found for the current document, so the HTML output file will set the <code>&lt;title&gt;</code> to \"***\". This value generally appears in the title bar at the top of a browser.| |DOTX038I|Info|The longdescref attribute on tag '%1' will be ignored. Accessibility for object elements needs to be handled another way.|The <code>&lt;object&gt;</code> element in HTML does not support using longdescref for accessibility. To make the object accessible, you may need to add text before or after the element. You may also be able to handle it with a <code>&lt;param&gt;</code> element inside the object.| |DOTX039W|Warning|Required cleanup area found. To remove this message and hide the content, build your content without using the DRAFT parameter.|This message is generated when creating draft output in order to help you locate all topics that need to be cleaned up; the cleanup items will appear in your output with styling that makes it stand out. The content will be hidden when the draft parameter is not active.| |DOTX040I|Info|Draft comment area found. To remove this message and hide the comments, build your content without using the DRAFT parameter.|This message is generated when creating draft output in order to help you locate all topics that have draft comments. Each comment will appear in your HTML output; the comments will be hidden when the draft parameter is not active.| |DOTX041W|Warning|Found more than one title element in a %1 element. Using the first one for the %1's title.|Because of the way XML and DITA are defined, it is generally not possible to prohibit adding a second title to a section during editing (or to force that title to come first). However, the DITA specification states that only one title should be used in a section. When multiple titles are found, only the first one will appear in the output.| |DOTX042I|Info|DITAVAL based flagging is not currently supported for inline phrases in XHTML; ignoring flag value on '%1' attribute.|If it is important to flag this piece of information, try placing a flag on the block element that contains your phrase. If you just want to have an image next to the phrase, you may place an image directly into the document.| |DOTX043I|Info|The link to '%1' may appear more than once in '%2'.|DITA-OT is able to remove duplicate links in most cases. However, if two links to the same resource use different attributes or link text, it is possible for them to appear together. For example, if the same link shows up with role=\"next\" and again with no specified role, it may show up as both the \"Next topic\" link and as a related link. Note that links generated from a <code>&lt;reltable&gt;</code> in a DITA map will have the role attribute set to \"friend\".| |DOTX044E|Error|The area element in an image map does not specify a link target. Please add an xref element with a link target to the area element.|The <code>&lt;area&gt;</code> element in an image map must provide a link target for the specified area. Please add an <code>&lt;xref&gt;</code> element as a child of <code>&lt;area&gt;</code> and ensure that it specifies a link target.| |DOTX045W|Warning|The area element in an image map should specify link text for greater accessibility. Link text should be specified directly when the target is not a local DITA resource.|Cross reference text inside the <code>&lt;area&gt;</code> element is used to provide accessibility for screen readers that can identify different areas of an image map. If text cannot be retrieved automatically by referencing a DITA element, it should be specified directly in the cross reference.| |DOTX046W|Warning|Area shape should be: default, rect, circle, poly, or blank (no value). The value '%1' is not recognized.|The specified value was passed as-is through to the <code>&lt;area&gt;</code> element in the HTML.| |DOTX047W|Warning|Area coordinates are blank. Coordinate points for the shape need to be specified.|The area element is intended to define a region in an image map; coordinates must be specified in order to define that region.| |DOTX048I|Info|In order to include peer or external topic '%1' in your help file, you may need to recompile the CHM file after making the file available.|The build will not look for peer or external topics before compiling your CHM file, so they may not be included. If you are referencing an actual HTML file that will not be available, it cannot be included in the project, and you should set the toc attribute to \"no\" on your topicref element. Otherwise, check to be sure your HTML file was included in the CHM; if it was not, you will need to place it in the correct location with your other output files and recompile.| |DOTX049I|Info|References to non-dita files will be ignored by the PDF, ODT, and RTF output transforms.|The PDF, ODT, and RTF output processes cannot automatically convert non-DITA content into DITA in order to merge it with the rest of your content. The referenced items are ignored.| |DOTX050W|Warning|Default id \"org.sample.help.doc\" is used for Eclipse plug-in. If you want to use your own plug-in id, please specify it using the id attribute on your map.|Eclipse requires that an ID be specified when creating an Eclipse Help project; the toolkit expects to locate that ID on the root element of your input map.| |DOTX052W|Warning|No string named '%1' was found when creating generated text; using the value '%1' in your output file.|The toolkit is attempting to add generated text, such as the string \"Related information\" that appears above links. The requested string could not be found in any language. Your output may contain a meaningful string, or it may contain a code that was intended to map to a string. This likely indicates an error in a plug-in or XSL override; either the string was requested incorrectly, or you will need to provide a mapping for the string in all of the languages you require.| |DOTX053E|Error|A element that references another map indirectly includes itself, which results in an infinite loop. The original map reference is to '%1'.|This will occur if a map references another map, and then that second map (or another further nested map) references the original map. The result is an infinite nesting of maps; please correct the chain of map references to remove circular reference.| |DOTX054W|Warning|Conflict text style is applied on the current element based on DITAVAL flagging rules. Please check ditaval and dita source to make sure there is no style conflict on the element which needs to be flagged.|This will occur when a DITAVAL file contains multiple styling rules that apply to the same element.| |DOTX055W|Warning|Customized stylesheet uses deprecated template \"flagit\". Conditional processing is no longer supported using this template. Please update your stylesheet to use template \"start-flagit\" instead of deprecated template \"flagit\".|The \"flagit\" named template was deprecated in DITA-OT version 1.4, when the OASIS standard formalized the DITAVAL syntax. The template is removed in DITA-OT 1.6. Stylesheets that used this template need to be updated.| |DOTX056W|Warning|The file '%1' is not available to resolve link information.|The build attempted to access the specified file in order to retrive a title or short description, but the file could not be found. If the file exists, it is possible that a DITAVAL file was used to remove the file\u2019s contents from the build. Another possibility is that the file is located outside of the scope of the main input directory, and was not available because the onlytopic.in.map parameter was specified. Be aware that the path information above may not match the link in your topic.| |DOTX057W|Warning|The link or cross reference target '%1' cannot be found, which may cause errors creating links or cross references in your output file.|The link appears to use valid syntax to reference a DITA element, but that element cannot be found. Please verify that the element exists, and is not removed from the build by DITAVAL based filtering.| |DOTX058W|Warning|No glossary entry was found associated with key '%1' on %2 element. The build will try to determine the best display text and hover text for terms and abbreviations.|Processing for terms, acronyms, or abbreviated forms will associate the key from the element\u2019s keyref attribute with a glossentry (glossary entry) topic. This message will appear if the key was defined, but was not associated with a glossentry topic. The process will try to use the best available fallback (usually the title of the referenced topic).| |DOTX060W|Warning|Key '%1' was used in an abbreviated-form element, but the key is not associated with a glossary entry. Abbreviated-form should ONLY be used to reference to a glossary entry.|Processing for abbreviated form elements will associate the key from the element\u2019s keyref attribute with a glossentry (glossary entry) topic. This message will appear if the key was defined, but was not associated with a glossentry topic. This element is only supported with keys that are associated with glossary topics; the element will not generate any output. Please correct the reference, or use a different element to reference your topic.| |DOTX061W|Warning|ID '%1' was used in topicref tag but did not reference a topic element. The href attribute on a topicref element should only reference topic level elements.|According to the DITA Specification, references from maps should either go to DITA Maps, DITA Topics, or any non-DITA resource. References below the topic level should only be made from cross references (using <code>&lt;xref&gt;</code> or similar) inside of a topic. For details, see the href attribute description in the OASIS standard\u2019s definition of the topicref element.| |DOTX062I|Info|It appears that this document uses constraints, but the conref processor cannot validate that the target of a conref is valid. To enable constraint checking, please upgrade to an XSLT 2.0 processor.|\u00a0| |DOTX063W|Warning|The dita document '%1' is linked to from your content, but is not referenced by a topicref tag in the ditamap file. Include the topic in your map to avoid a broken link.|This will appear when generating PDF or ODT output that includes a link to a local topic, but the referenced topic is not part of the map itself. This will result in a broken link. You should include the topic in your map or remove the link from the build.| |DOTX064W|Warning|The copy-to attribute [copy-to=\"%1\"] uses the name of a file that already exists, so this attribute is ignored.|The copy-to attribute is used to copy a topic over a document that already exists. Please make sure that any copy-to attributes use a unique name so that the copy will not overwrite existing content.| |DOTX065W|Warning|Two unique source files each specify copy-to=\"%2\", which results in a collision. The value associated with href=\"%1\" is ignored.|Two different topics are copied to the same location using copy-to; as a result, one of these files would be over-written. Only the first instance of this copy-to value will be recognized. Please correct the use of copy-to attributes.| |DOTX066W|Warning|Template \"%1\" is deprecated. Remove references to this template from your custom XSLT or plug-ins.|This message indicates that your custom XSLT or plug-ins rely on templates that will be removed in an upcoming release. Typically this occurs when a named template has been converted to a mode template; any code that uses the deprecated template should be updated.| |DOTX067E|Error|No string named '%1' was found for language '%2'. Add a mapping for the string '%1'.|This PDF build uses generated text, such as the phrase \"Related information\" (which is generated above many link groups). The toolkit was unable to locate the string %1 for your specified language, so the string will appear in the default language. This generally indicates that the toolkit\u2019s strings need to be updated to support your language, or that your language setting is incorrect.| |DOTX068W|Warning|A topicref element that references a map contains child topicref elements. Child topicref elements are ignored.|\u00a0| |DOTX069W|Warning|Template mode \"%1\" is deprecated. Remove references to this template mode from your custom XSLT or plug-ins.|\u00a0| |DOTX070W|Warning|Target \"%1\" is deprecated. Remove references to this target from your custom Ant files.|\u00a0| |DOTX071E|Error|Conref range: Unable to find conref range end element with ID \"%1\".|\u00a0| |DOTX071W|Warning|Parameter \"%1\" on template \"%2\" is deprecated. Use parameter \"%3\" instead.|\u00a0| |DOTX072I|Info|Ignoring navtitle within topicgroup.|| |DOTX073I|Info|Removing broken link to \"%1\".|\u00a0| |DOTX074W|Warning|No formatting defined for unknown class attribute value \"%1\".|\u00a0| |DOTX075W|Warning|A content reference in a constrained document type is pulling content from an unconstrained document type. The reference will resolve, but may result in content that violates one of the document constraints in \"%1\".|\u00a0| |DOTX076E|Error|A content reference in a constrained document type cannot be resolved because it would violate one of the document constraints \"%1\". The current constrained document may only reuse content from documents with equivalent constraints.|\u00a0| |DOTX077I|Info|Resolving content references results in duplicate ID '%1'. Rewriting resolved version to '%2'.|\u00a0| |INDX001I|Info|Index entry '%1' will be sorted under the \"Special characters\" heading.|\u00a0| |INDX002E|Error|The PDF indexing process cannot find the proper sort location for '%1', so the term has been dropped from the index.|\u00a0| |INDX003E|Error|The build failed due to problems encountered when sorting the PDF index.|\u00a0| |PDFJ001E|Error|The PDF indexing process could not find the proper sort location for '%1', so the term has been dropped from the index.|\u00a0| |PDFJ002E|Error|The build failed due to problems encountered when sorting the PDF index. Please address any messages located earlier in the log.|The PDF index process relies on pre-defined letter headings when sorting terms. The specified term does not begin with a character that can be mapped to an existing heading. Typically this term would be placed in a \"Special characters\" group, but the current language did not specify such a group when setting up the index sort process.| |PDFJ003I|Info|Index entry '%1' will be sorted under the \"Special characters\" heading.|The PDF index process relies on pre-defined letter headings when sorting terms. The specified term does not begin with a character that can be mapped to an existing heading, so it has been placed under a heading for terms that begin with special characters such as punctuation. If this term should be sorted under a new or existing letter heading, please open an issue with DITA-OT to correct the sort.| |PDFX001W|Warning|There is an index term specified with start=\"%1\", but there is no matching end for this term. Add an index term in a valid location with end=\"%1\".|\u00a0| |PDFX002W|Warning|There are multiple index terms specified with start=\"%1\", but there is only one term to end this range, or the ranges for this term overlap. Ensure that each term with this start value has a matching end value, and that the specified ranges for this value do not overlap|\u00a0| |PDFX003W|Warning|There are multiple index entries found to close the index range for \"%1\". Ensure that any index term with start=\"%1\" has only one matching end term with end=\"%1\".|\u00a0| |PDFX004F|Error|A topic reference was found with href=\"\". Please specify a target or remove the href attribute.|\u00a0| |PDFX005F|Error|The topic reference href=\"%1\" could not be found. Please correct the reference, or set the scope or format attribute if the target is not a local DITA topic.|\u00a0| |PDFX007W|Warning|Found an index term with end=\"%1\", but no starting term was found for this entry.|\u00a0| |PDFX008W|Warning|Font definition not found for the logical name or alias '%1'.|\u00a0| |PDFX009E|Error|Attribute set reflection cannot handle XSLT element %1.|\u00a0| |PDFX011E|Error|The index term '%2' uses both an index-see element and %1 element. Convert the index-see element to index-see-also.|Found an <code>&lt;index-see&gt;</code> element as a child of a term that also exists as a standalone index term, or as a term that also uses <code>&lt;index-see-also&gt;</code>. When using <code>&lt;index-see&gt;</code> with an index term, that term should not be used to create page references and should not reference additional terms. Treating the <code>&lt;index-see&gt;</code> as <code>&lt;index-see-also&gt;</code>.| |PDFX012E|Error|Found a table row with more entries than allowed.|\u00a0| |PDFX013F|Fatal|The PDF file '%1' could not be generated.|\u00a0| |XEPJ001W|Warning|%1|\u00a0| |XEPJ002E|Error|%1|\u00a0| |XEPJ003E|Error|%1|\u00a0|</p> <p>Related information </p> <p>Rebuilding the DITA-OT documentation</p>"},{"location":"topics/first-build-using-dita-command/","title":"Building output using the <code>dita</code> command","text":"<p>You can generate output using the <code>dita</code> command-line tool. Build parameters can be specified on the command line or with <code>.properties</code> files.</p> <p>The DITA-OT client is a command-line tool with no graphical user interface. To verify that your installation works correctly, you can build output using the sample files included in the distribution package.</p> <ol> <li> <p>Open a terminal window by typing the following in the search bar:</p> <pre><code>|**Linux or macOS\u00a0**|Type `Terminal`.|\n</code></pre> <p>|Windows|Type <code>Command Prompt</code>.|</p> </li> <li> <p>At the command-line prompt, enter the following command:</p> <p><code>syntax-bash ``dita`` **--input**=*input-file* **--format**=*format*</code></p> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> <li>format is the output format (transformation type). This argument corresponds to the common parameter transtype. Use the same values as for the transtype build parameter, for example html5 or pdf.</li> </ul> <p>If processing is successful, nothing is printed in the terminal window. The built output is written to the specified output directory (by default, in the <code>out</code> subdirectory of the current directory).</p> </li> </ol> <p>Run from <code>*dita-ot-dir*/docsrc/samples</code>, the following command generates HTML5 output for the <code>sequence.ditamap</code> file:</p> <pre><code>``dita`` **--input**=`sequence.ditamap` **--format**=html5\n</code></pre> <p>Most builds require you to specify more options than are described in this topic.</p> <p>Related information </p> <p>More information about building output with the <code>dita</code> command</p>"},{"location":"topics/globalization-languages/","title":"Supported languages","text":"<p>The following languages are supported for PDF and HTML-based output.</p> <p>Note: While language codes listed below use the conventional capitalization style of \"aa-BB\" and \"aa-Script-BB\", DITA-OT processing is not case sensitive when reading these values from the <code>@xml:lang</code> attribute.</p> Language Language\u00a0code Notes \u0627\u0644\u0639\u0631\u0628\u064a\u0629 (Arabic) ar or ar-EG Defaults to right-to-left presentation. \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (Belarusian) be or be-BY Bosanski (Bosnian) bs or bs-BA \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 (Bulgarian) bg or bg-BG Catal\u00e0 (Catalan) ca-ES \u7b80\u4f53\u4e2d\u6587 (Simplified Chinese) zh-CN or zh-Hans PDF index is not properly collated by default. \u7e41\u9ad4\u4e2d\u6587 (Traditional Chinese) zh-TW or zh-Hant PDF index is not properly collated by default. Hrvatski (Croatian) hr or hr-HR \u010ce\u0161tina (Czech) cs or cs-CZ Dansk (Danish) da or da-DK Nederlands (Dutch) nl or nl-NL Subset of generated text also available for Belgian Dutch (nl-BE) English (US) en or en-US Subset of generated text also available for British English (en-GB) and Canadian English (en-CA) Eesti (Estonian) et or et-EE Suomi (Finnish) fi or fi-FI Fran\u00e7ais (French) fr or fr-FR Subset of generated text also available for Belgian French (fr-BE), Canadian French (fr-CA), and Swiss French (fr-CH) Deutsch (German) de or de-DE Subset of generated text also available for Swiss German (de-CH) \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac (Greek) el or el-GR \u05e2\u05d1\u05e8\u05d9\u05ea (Hebrew) he or he-IL Defaults to right-to-left presentation. \u0939\u093f\u0928\u094d\u0926\u0940 (Hindi) hi or hi-HI Magyar (Hungarian) hu or hu-HU \u00cdslenska (Icelandic) is or is-IS Bahasa Indonesia (Indonesian) id or id-ID Italiano (Italian) it or it-IT Subset of generated text also available for Swiss Italian (it-CH) \u65e5\u672c\u8a9e (Japanese) ja or ja-JP PDF index is not properly collated by default. \u049a\u0430\u0437\u0430\u049b\u0448\u0430 (Kazakh) kk or kk-KZ \ud55c\uad6d\uc5b4 (Korean) ko or ko-KR Latvie\u0161u (Latvian) lv or lv-LV Lietuvi\u0173 (Lithuanian) lt or lt-LT \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 (Macedonian) mk or mk-MK Bahasa Melayu (Malay) ms or ms-MY Crnogorski (Montenegrin) sr-Latn-ME Norsk (Norwegian) no or no-NO Polski (Polish) pl or pl-PL Portugu\u00eas (Portuguese) pt or pt-PT Portugu\u00eas do Brasil (Brazilian Portuguese) pt-BR Rom\u00e2n\u0103 (Romanian) ro or ro-RO \u0420\u0443\u0441\u0441\u043a\u0438\u0439 (Russian) ru or ru-RU \u0421\u0440\u043f\u0441\u043a\u0438 (Serbian - Cyrillic script) sr, sr-CS, sr-RS, or sr-SP Srpski (Serbian - Latin script) sr-Latn-RS Sloven\u010dina (Slovak) sk or sk-SK Sloven\u0161\u010dina (Slovenian) sl or sl-SI Espa\u00f1ol (Spanish) es or es-ES Also supported using es-419 (Latin American Spanish). Svenska (Swedish) sv or sv-SE \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 (Thai) th or th-TH T\u00fcrk\u00e7e (Turkish) tr or tr-TR \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 (Ukrainian) uk or uk-UA \u0627\u0631\u062f\u0648 (Urdu) ur or ur-PK Defaults to right-to-left presentation. Ti\u1ebfng Vi\u1ec7t (Vietnamese) vi or vi-VN <p>Related information </p> <p>How to add or modify generated text strings</p>"},{"location":"topics/globalization-support/","title":"Globalization support","text":"<p>DITA Open Toolkit supports globalization with generated text strings, index sorting, and bi-directional text.</p> <ul> <li> <p>Generated text</p> <p>Generated text is text that is rendered automatically in the output that is generated by DITA-OT; this text is not located in the DITA source files. The following are examples of generated text:</p> <ul> <li>The word \u201cChapter\u201d in a PDF file.</li> <li>The phrases \u201cRelated concepts\u201d, \u201cRelated tasks\u201d, and \u201cRelated reference\u201d in HTML output.</li> <li>Index sorting</li> </ul> <p>DITA-OT can use only a single language to sort indexes.</p> </li> <li> <p>Bi-directional text</p> <p>DITA-OT contains style sheets (CSS files) that support both left-to-right (LTR) and right-to-left (RTL) languages in HTML-based transformations. PDF supports both LTR and RTL rendering based on the document language. The <code>@dir</code> attribute can be used to override the default rendering direction.</p> </li> </ul> <p>When DITA-OT generates output, it takes the first value that it encounters for the <code>@xml:lang</code> attribute, and uses that value to create generated text, sort index entries, and determine which default CSS file is used. If no value for the <code>@xml:lang</code> attribute is found, the toolkit defaults to U.S. English. You can use the Configuration properties to change the default language.</p>"},{"location":"topics/globalization/","title":"Globalizing DITA content","text":"<p>The DITA standard supports content that is written in or translated to any language. In general, DITA Open Toolkit passes content through to the output format unchanged. DITA-OT uses the values for the <code>@xml:lang</code> and <code>@dir</code> attributes that are set in the source content to provide globalization support. You can create custom plug-ins to support additional languages.</p> <p>Related information </p> <p>Locale-Aware Sorting and Text Handling in the Open Toolkit</p> <p>Internationalization and the DITA-OT: Who does what?</p> <p>Localization overview in the OASIS DITA standard</p>"},{"location":"topics/html-customization-css/","title":"Adding custom CSS","text":"<p>To modify the appearance of the default HTML output that DITA Open Toolkit generates, you can reference a custom Cascading Style Sheet (CSS) file with the typography, colors, and other presentation aspects that define your corporate identity.</p> <p>You can use this approach when you need to adjust the look and feel of the default output for a single project, but don\u2019t want to create a custom DITA-OT plug-in.</p> <p>You can version the CSS file along with the DITA source files in your project, so stylesheet changes can be tracked along with modifications to topic content.</p> <p>You may also find this approach useful as you develop a custom stylesheet. Once the CSS rules stabilize, you can bundle the CSS file in a custom DITA-OT plug-in to ensure consistent HTML output across projects.</p> <ol> <li> <p>Create a custom CSS file and store it in your project along with your DITA source files.</p> <p>Note: As a starting point, you can use the CSS file that is used for the DITA-OT documentation. This file is available in the installation folder under <code>docsrc/resources/dita-ot-doc.css</code>.</p> </li> <li> <p>Set the args.css parameter to the name of your custom CSS file.</p> <p>The value of this parameter should be only the file name. You can specify the absolute path to the file with args.cssroot.</p> </li> <li> <p>Set the args.copycss parameter to yes.</p> <p>This setting ensures that your custom CSS file will be copied to the output directory.</p> </li> <li> <p>Set args.cssroot to the absolute path of the folder that contains your custom CSS file.</p> </li> <li> <p>Set args.csspath to specify the location of the CSS file in the output folder.</p> <p>If args.csspath is not set, the custom CSS file will be copied to the root level of the output folder. To copy the CSS file to a subfolder named <code>css</code>, set args.csspath to css.</p> </li> </ol> <p>Tip: For an example of HTML output generated using this method, see the HTML5 version of the DITA-OT documentation included in the installation folder under <code>doc/index.html</code>.</p> <p>Related information </p> <p>Bundling CSS in a custom HTML plug-in</p>"},{"location":"topics/html-customization-header/","title":"Adding custom headers and footers","text":"<p>You add a custom header to include a publication title, company logo, or other common branding elements in HTML output. A custom footer can also be added with copyright information, legal boilerplate, or other fine print.</p> <p>In HTML5 output, the contents of the header file will be wrapped in an HTML5 <code>&lt;header&gt;</code> element with the <code>@role</code> attribute set to banner. The footer file contents are wrapped in an HTML5 <code>&lt;footer&gt;</code> element with the <code>@role</code> attribute set to contentinfo.</p> <p>For example, the DITA-OT documentation includes a simple header banner with the publication title and a horizontal rule to separate the header from the generated topic content:</p> <pre><code>&lt;div class=\"header\"&gt;\n  &lt;p&gt;DITA Open Toolkit&lt;/p&gt;\n  &lt;hr/&gt;\n&lt;/div&gt;\n</code></pre> <p>Note: Header and footer files should be specified using absolute paths and must contain valid XML. A common practice is to place all content into a <code>&lt;div&gt;</code> element.</p> <ol> <li> <p>Set args.hdr to include an XML file as a running header that appears above the page content.</p> </li> <li> <p>Set args.ftr to include an XML file as a running footer that appears below the page content.</p> </li> <li> <p>Add custom CSS rules to style headers and/or footers.</p> <p>For example, the DITA-OT documentation stylesheet includes the following header rules:</p> <p>``` .header {   margin-bottom: 1rem;   padding: 0 12px; }</p> <p>.header p {   color: var(--headings-color);   font-size: 1.5rem;   margin: 0 0 16px; }</p> <p>.header hr {   border: 0;   border-bottom: 1px solid var(--secondary-light);   height: 0; } ```</p> </li> </ol> <p>Tip: For an example of HTML output generated using this method, see the HTML5 version of the DITA-OT documentation included in the installation folder under <code>doc/index.html</code>.</p>"},{"location":"topics/html-customization-navigation/","title":"Adding navigation to topics","text":"<p>In HTML5 output, you can set a parameter to include table-of-contents navigation in the <code>&lt;nav&gt;</code> element of each page. The navigation can be rendered in a sidebar or menu via CSS.</p> <p>Earlier versions of DITA-OT used the TocJS transformation to render a JavaScript-based table of contents in an XHTML frameset for topic navigation. Recent toolkit versions provide a modern HTML5 navigation alternative.</p> <p>As of DITA-OT 2.2, the nav-toc parameter can be used in HTML5 transformations to embed navigation directly in topics using native HTML5 elements without JavaScript or framesets.</p> <ol> <li> <p>Set the nav-toc parameter to one of the following options:</p> <ul> <li>The partial option creates a table of contents with the portion of the navigation hierarchy that contains the current topic (along with its parents, siblings and children).</li> <li>The full option embeds the complete navigation for the entire map in each topic.</li> <li>Add custom CSS rules to style the navigation.</li> </ul> <p>For example, the DITA-OT documentation stylesheet includes the following rules to place the table of contents on the left side of the browser viewport and highlight the current topic in bold:</p> <p>``` / Style ToC nav as sidebar on desktop / @media screen and (min-width: 992px) {   nav.toc {     float: left;     width: 300px;   } }</p> <p>nav.toc li.active &gt; a {   font-weight: var(--font-weight-bold); } ```</p> </li> </ol> <p>Tip: For an example of HTML output generated using this method, see the HTML5 version of the DITA-OT documentation included in the installation folder under <code>doc/index.html</code>.</p>"},{"location":"topics/html-customization-parameters/","title":"Setting parameters for custom HTML","text":"<p>For simple branded HTML pages, you can adjust the look and feel of the default output to match your company style by setting parameters to include custom CSS, header branding, or table-of-contents navigation in topics. (These changes do not require a custom plug-in.)</p> <p>Related information </p> <p>XHTML transformation</p> <p>Common parameters</p> <p>HTML-based output parameters</p> <p>XHTML parameters</p> <p>HTML5 transformation</p> <p>HTML5 parameters</p>"},{"location":"topics/html-customization-plugin-bundle-css/","title":"Bundling CSS in a custom HTML plug-in","text":"<p>You can create a DITA-OT plug-in that provides a custom stylesheet with the typography and colors that define your corporate identity. Coworkers can install this plug-in to ensure consistent HTML output across projects without having to copy the stylesheet to each project.</p> <p>This scenario walks through the process of creating a very simple plug-in (<code>com.example.html5-custom-css</code>) that creates a new transformation type: html5-custom-css.</p> <p>The html5-custom-css transformation includes a custom CSS file and sets four parameters to integrate the custom stylesheet in the generated HTML5 output. These parameter settings make the following changes:</p> <ul> <li> <p>Specify the <code>css</code> subfolder of the plug-in as the source directory for custom CSS with args.cssroot.</p> </li> <li> <p>Specify the name of the custom CSS file with args.css.</p> <p>The value of this parameter tells DITA-OT to use the <code>custom.css</code> file provided by the plug-in.</p> </li> <li> <p>Ensure that the CSS file is copied to the output directory by setting args.copycss to yes.</p> </li> <li> <p>Set the destination path for CSS files in the output folder with args.csspath.</p> <p>CSS files are copied to the root level of the output folder by default. Setting this parameter places CSS files in a dedicated <code>css</code> subfolder.</p> </li> </ul> <p>All four parameters are set in the Ant script (<code>build_html5-custom-css.xml</code>).</p> <ol> <li> <p>In the <code>plugins</code> directory, create a directory named <code>com.example.html5-custom-css</code>.</p> </li> <li> <p>In the new <code>com.example.html5-custom-css</code> directory, create a plug-in configuration file (<code>plugin.xml</code>) that declares the new html5-custom-css transformation and its dependencies.</p> <p>``` &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;?xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;</p> <p>  ```</p> <p>Note: This plug-in will extend the default HTML5 transformation, so the <code>&lt;require&gt;</code> element explicitly defines <code>org.dita.html5</code> as a dependency.</p> </li> <li> <p>In the <code>com.example.html5-custom-css</code> directory, create a subdirectory named <code>css</code>.</p> </li> <li> <p>In the new <code>css</code> subdirectory, create a file named <code>custom.css</code> with your custom CSS rules.</p> <p>``` / These custom styles extend or override DITA Open Toolkit default styles. /</p> <p>body {   color: #F00; } ```</p> <p>Tip: When you first create the plug-in, you may want to include a rule in your custom stylesheet that makes it readily apparent when the custom styles are applied (the example above will change body text to \u201cred\u201d). Once you have verified that the plug-in works as intended, replace the placeholder rule with your own custom styles.</p> </li> <li> <p>In the <code>com.example.html5-custom-css</code> root directory, add an Ant script (<code>build_html5-custom-css.xml</code>) to define the transformation type.</p> <p>``` &lt;?xml version='1.0' encoding='UTF-8'?&gt;</p> <p>  ```</p> </li> </ol> <p>Tip: The files for this sample plug-in are included in the DITA-OT installation directory under <code>docsrc/samples/plugins/com.example.html5-custom-css/</code> and on GitHub.</p> <p>The plug-in directory has the following layout and files:</p> <pre><code>com.example.html5-custom-css\n\u251c\u2500\u2500 build_html5-custom-css.xml\n\u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 custom.css\n\u2514\u2500\u2500 plugin.xml\n</code></pre> <ol> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> <li> <p>Build output with the new transformation type to verify that the plug-in works as intended.</p> <p><code>``dita`` **--input**=*my.ditamap* **--format**=html5-custom-css</code></p> </li> <li> <p>Refine the styles in your <code>custom.css</code> file as necessary.</p> </li> </ol> <p>Related information </p> <p>HTML-based output parameters</p> <p>Adding custom CSS</p>"},{"location":"topics/html-customization-plugin-javascript/","title":"Inserting JavaScript in generated HTML","text":"<p>JavaScript code can be bundled in a custom plug-in and automatically inserted into the generated HTML pages to enable web analytics or dynamic content delivery.</p> <p>This scenario walks through the process of creating a very simple plug-in (<code>com.example.html5-javascript</code>) that creates a new transformation type: html5-javascript.</p> <p>The html5-javascript transformation includes a custom page footer file with a JavaScript tracking snippet and sets the args.ftr parameter to integrate the script content in the HTML5 <code>&lt;footer&gt;</code> element of the generated pages.</p> <p>Note: This example inserts a tracking snippet for Google Analytics, but the basic approach is the same for other analytics platforms or similar use cases that require custom JavaScript.</p> <ol> <li> <p>In the <code>plugins</code> directory, create a directory named <code>com.example.html5-javascript</code>.</p> </li> <li> <p>In the new <code>com.example.html5-javascript</code> directory, create a plug-in configuration file (<code>plugin.xml</code>) that declares the new html5-javascript transformation and its dependencies.</p> <p>``` &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;?xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;</p> <p>  ```</p> <p>Note: This plug-in will extend the default HTML5 transformation, so the <code>&lt;require&gt;</code> element explicitly defines <code>org.dita.html5</code> as a dependency.</p> </li> <li> <p>In the <code>com.example.html5-javascript</code> directory, create a subdirectory named <code>include</code>.</p> </li> <li> <p>In the new <code>include</code> subdirectory, create a file named <code>javascript.ftr.xml</code> with your custom JavaScript code.</p> <p>```   ```</p> <p>The division wrapper will be discarded when generating HTML files, and the contents will be inserted into the <code>&lt;footer&gt;</code> element of each page.</p> <p>The file contents must be well-formed XML. If your JavaScript snippets include attributes without values (such as the <code>async</code> script attribute), use valid XML syntax to define the empty attribute:</p> <p>Instead of:</p> <p><code>&lt;script&gt;   &lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt; &lt;/script&gt;</code></p> <p>use:</p> <p><code>&lt;script&gt;   &lt;script id=\"MathJax-script\" **async=\"\"** src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt; &lt;/script&gt;</code></p> </li> <li> <p>In the <code>com.example.html5-javascript</code> root directory, add an Ant script (<code>build_html5-javascript.xml</code>) to define the transformation type and set the path to the JavaScript footer file created in the previous step.</p> <p>``` &lt;?xml version='1.0' encoding='UTF-8'?&gt;</p> <p>  ```</p> <p>Note: When defining the path to the footer file from the Ant script, use the plug-in directory property with the plugin-id as shown in the example above: <code>${dita.plugin.*plugin-id*.dir}</code>.</p> </li> </ol> <p>Tip: The files for this sample plug-in are included in the DITA-OT installation directory under <code>docsrc/samples/plugins/com.example.html5-javascript/</code> and on GitHub.</p> <p>The plug-in directory has the following layout and files:</p> <pre><code>com.example.html5-javascript\n\u251c\u2500\u2500 build_html5-javascript.xml\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 javascript.ftr.xml\n\u2514\u2500\u2500 plugin.xml\n</code></pre> <ol> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> <li> <p>Build output with the new transformation type to verify that the plug-in works as intended.</p> <p><code>``dita`` **--input**=*my.ditamap* **--format**=html5-javascript</code></p> </li> <li> <p>Open one of the generated HTML topic files in a modern web browser and check the JavaScript Console. When the page is loaded, <code>Adding Google Analytics tracker</code> will appear on the console to verify that the sample script is loaded.</p> </li> <li>Remove the <code>console.log</code> debugging message from the sample JavaScript code, and replace the <code>'UA-XXXXX-Y'</code> placeholder string with the tracking ID of the Google Analytics property you wish to track.</li> </ol> <p>Tip: This example places the JavaScript code in the page footer to ensure that page display is not delayed while the script is loaded. If your JavaScript code supports pre-loading and your application targets modern browsers that recognize the <code>async</code> script attribute, you may prefer to insert the JavaScript snippet in the <code>&lt;head&gt;</code> element of the generated HTML files using the args.hdf parameter instead.</p> <p>Related information </p> <p>HTML-based output parameters</p>"},{"location":"topics/html-customization-plugin-webfont/","title":"Embedding web fonts in HTML output","text":"<p>A custom plug-in can be created to generate HTML output that uses custom fonts for enhanced typographic features, extended character sets or a unique corporate identity.</p> <p>This scenario walks through the process of creating a very simple plug-in (<code>com.example.html5-webfont</code>) that creates a new transformation type: html5-webfont.</p> <p>The html5-webfont transformation includes a custom CSS file and sets five parameters to integrate font links and a custom stylesheet in the generated HTML5 output. These parameter settings make the following changes:</p> <ul> <li> <p>Specify a file that links to the font from the document head with args.hdf.</p> </li> <li> <p>Specify the <code>css</code> subfolder of the plug-in as the source directory for custom CSS with args.cssroot.</p> </li> <li> <p>Specify the name of the custom CSS file with args.css.</p> <p>The value of this parameter tells DITA-OT to use the <code>custom.css</code> file provided by the plug-in.</p> </li> <li> <p>Ensure that the CSS file is copied to the output directory by setting args.copycss to yes.</p> </li> <li> <p>Set the destination path for CSS files in the output folder with args.csspath.</p> <p>CSS files are copied to the root level of the output folder by default. Setting this parameter places CSS files in a dedicated <code>css</code> subfolder.</p> </li> </ul> <p>All five parameters are set in the Ant script (<code>build_html5-webfont.xml</code>).</p> <ol> <li> <p>In the <code>plugins</code> directory, create a directory named <code>com.example.html5-webfont</code>.</p> </li> <li> <p>In the new <code>com.example.html5-webfont</code> directory, create a plug-in configuration file (<code>plugin.xml</code>) that declares the new html5-webfont transformation and its dependencies.</p> <p>``` &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;?xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;</p> <p>  ```</p> <p>Note: This plug-in will extend the default HTML5 transformation, so the <code>&lt;require&gt;</code> element explicitly defines <code>org.dita.html5</code> as a dependency.</p> </li> <li> <p>In the <code>com.example.html5-webfont</code> directory, create a subdirectory named <code>include</code>.</p> </li> <li> <p>In the new <code>include</code> subdirectory, create a file named <code>webfont.hdf.xml</code> with your custom font links.</p> <p><code>&lt;div&gt;   &lt;link href=\"https://fonts.googleapis.com/css?family=Noto+Sans\" rel=\"stylesheet\"/&gt; &lt;/div&gt;</code></p> <p>This example uses the Noto Sans font. You can use multiple fonts by creating additional <code>&lt;link&gt;</code> references in this file. The division wrapper will be discarded when generating HTML files, and the contents will be inserted into the <code>&lt;head&gt;</code> element of each page.</p> </li> <li> <p>In the <code>com.example.html5-webfont</code> directory, create a subdirectory named <code>css</code>.</p> </li> <li> <p>In the new <code>css</code> subdirectory, create a file named <code>custom.css</code> with the stylesheet rules that apply the custom <code>font-family</code> to the desired elements.</p> <p><code>body {   font-family: 'Noto Sans', sans-serif; }</code></p> <p>This example uses Noto Sans for all body content. In practice, you would normally use different fonts for headings, body content, tables, etc. by creating additional rules in your CSS file.</p> </li> <li> <p>In the <code>com.example.html5-webfont</code> root directory, add an Ant script (<code>build_html5-webfont.xml</code>) to define the transformation type.</p> <p>``` &lt;?xml version='1.0' encoding='UTF-8'?&gt;</p> <p>  ```</p> </li> </ol> <p>Tip: The files for this sample plug-in are included in the DITA-OT installation directory under <code>docsrc/samples/plugins/com.example.html5-webfont/</code> and on GitHub.</p> <p>The plug-in directory has the following layout and files:</p> <pre><code>com.example.html5-webfont\n\u251c\u2500\u2500 build_html5-webfont.xml\n\u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 custom.css\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 webfont.hdf.xml\n\u2514\u2500\u2500 plugin.xml\n</code></pre> <ol> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> <li> <p>Build output with the new transformation type to verify that the plug-in works as intended.</p> <p><code>``dita`` **--input**=*my.ditamap* **--format**=html5-webfont</code></p> </li> <li> <p>Refine the styles in your <code>custom.css</code> file to adjust the font usage as necessary.</p> </li> </ol> <p>Related information </p> <p>HTML-based output parameters</p>"},{"location":"topics/html-customization-plugins/","title":"Custom HTML plug-ins","text":"<p>In addition to the basic modifications that can be made with parameter settings and property files, you can create custom HTML plug-ins that bundle custom fonts, JavaScript, and stylesheets; modify the HTML markup, or override other aspects of HTML processing.</p> <p>Note: These examples are not intended to be used as-is, but illustrate basic techniques you can use in your own plug-ins. In practise, custom plug-ins often combine several of these approaches.</p> <p>Related information </p> <p>Customizing HTML output</p> <p>Plug-in coding conventions</p>"},{"location":"topics/html-customization-properties-file/","title":"Customizing HTML with a <code>.properties</code> file","text":"<p>You can also use a <code>.properties</code> file to reference a set of build parameters when building output with the <code>dita</code> command. The DITA-OT documentation uses a <code>.properties</code> file to include custom CSS, header branding, and table-of-contents navigation in the HTML5 output.</p> <ol> <li> <p>Create a <code>.properties</code> file to store the parameter settings for your customization.</p> <p>Tip: You can use one of the sample <code>.properties</code> files from the DITA-OT documentation as a starting point for your own customizations. These files are available in the installation folder under <code>docsrc/samples/properties/</code>.</p> <p>For example:</p> <p>```</p> </li> <li> <p>Reference your <code>.properties</code> file with the <code>dita</code> command when building your output.</p> <p><code>syntax-bash `dita` **--input**=*my.ditamap* **--format**=html5 **--propertyfile**=*my.properties*</code></p> </li> </ol> <p>Note: For an example of HTML output generated using this method, see the HTML5 version of the DITA-OT documentation included in the installation folder under <code>doc/index.html</code>.</p>"},{"location":"topics/html-customization-properties-file/#directory-that-contains-the-custom-css-file","title":"Directory that contains the custom .css file:","text":"<p>args.cssroot = ${args.input.dir}/css/</p>"},{"location":"topics/html-customization-properties-file/#custom-css-file-used-to-style-output","title":"Custom .css file used to style output:","text":"<p>args.css = style.css</p>"},{"location":"topics/html-customization-properties-file/#copy-the-custom-css-file-to-the-output-directory","title":"Copy the custom .css file to the output directory:","text":"<p>args.copycss = yes</p>"},{"location":"topics/html-customization-properties-file/#location-of-the-copied-css-file-relative-to-the-output","title":"Location of the copied .css file relative to the output:","text":"<p>args.csspath = branding</p>"},{"location":"topics/html-customization-properties-file/#generate-a-full-navigation-toc-in-topic-pages","title":"Generate a full navigation TOC in topic pages:","text":"<p>nav-toc = full ```</p>"},{"location":"topics/html-customization/","title":"Customizing HTML output","text":"<p>You can modify the look and feel of your HTML output by changing parameter settings to include custom CSS, headers and footers, or table-of-contents navigation in topics.</p> <p>Related information </p> <p>Custom HTML plug-ins</p> <p>Bootstrapping DITA - Customizing HTML output for modern web frameworks</p>"},{"location":"topics/implement-saxon-collation-uri-resolvers/","title":"Implementing custom Saxon collation URI resolvers","text":"<p>Plug-ins can provide custom URI resolvers that provide collators for specific collation URIs.</p> <p>To do custom sorting and grouping in XSLT, you identify collators using URIs that Saxon resolves to collator implementations. You implement the mapping from collation URIs to collators through custom collation URI resolvers.</p> <p>For example, the DITA Community I18N plugin provides a custom collator for doing dictionary-based sorting and grouping of Simplified Chinese.</p> <p>To allow multiple plug-ins to contribute collation URI resolvers, DITA-OT defines a superinterface of Saxon\u2019s <code>CollationUriResolver</code> interface, <code>org.dita.dost.module.saxon.DelegatingCollationUriResolver</code>, that takes a base resolver.</p> <p>Implementations of <code>DelegatingCollationUriResolver</code> should delegate to their base resolver if they do not resolve the URI specified on the resolve request. When multiple plug-ins provide resolvers it results in a chain of resolvers, ending with the built-in Saxon default resolver.</p> <p>Note: The order in which plug-ins will be processed during collation URI resolver configuration is variable, so two plug-ins should not try to resolve the same collation URI. In that case the first one configured will be used at run time.</p> <p>A typical delegating collation URI resolver looks like this:</p> <pre><code>public class DCI18nCollationUriResolver implements DelegatingCollationUriResolver {\n\n  public static final String DITA_COMMUNITY_I18N_ZH_CNAWARE_COLLATOR =\n      \"http://org.dita-community.i18n.zhCNawareCollator\";\n  public static final String LANG_URI_PARAM = \"lang\";\n\n  private CollationURIResolver baseResolver;\n\n  public DCI18nCollationUriResolver() {\n      super();\n      this.baseResolver = StandardCollationURIResolver.getInstance();\n  }\n\n\n  public net.sf.saxon.lib.StringCollator resolve(String uri, Configuration configuration) \n          throws XPathException {\n      ZhCnAwareCollator collator = resolveToZhCnAwareCollator(uri, null, configuration);\n      if (null == collator) {\n          return baseResolver.resolve(uri, configuration);\n      }\n      return (StringCollator) collator;\n  }\n\n\n  @Override\n  public void setBaseResolver(CollationURIResolver baseResolver) {\n    this.baseResolver = baseResolver;\n  }\n\n  /* ... Code to evaluate the collation URI and provide the appropriate collator goes here */\n}\n</code></pre> <p>To implement a custom collation URI resolver:</p> <ol> <li>Add your plugin\u2019s JAR file in the DITA-OT class path as described in Adding a Java library to the classpath.</li> <li>Implement an instance of <code>org.dita.dost.module.saxon.DelegatingCollationUriResolver</code> as described above.</li> <li> <p>Include a file named <code>org.dita.dost.module.saxon.DelegatingCollationUriResolver</code> in the directory <code>META-INF/services</code> in the compiled JAR that your plug-in provides. Each line of the file must be the name of a class that implements <code>org.dita.dost.module.saxon.DelegatingCollationUriResolver</code>:</p> <p><code>org.example.i18n.saxon.MyCollationUriResolver</code></p> <p>You can create the services file using <code>&lt;service&gt;</code> elements in an Ant <code>&lt;jar&gt;</code> task:</p> <p><code>language-xml &lt;jar destfile=\"${basedir}/target/lib/example-saxon.jar\"&gt;   [...]   &lt;service type=\"org.dita.dost.module.saxon.DelegatingCollationUriResolver\"&gt;     &lt;provider classname=\"org.example.i18n.saxon.MyCollationUriResolver\"/&gt;   &lt;/service&gt;   [...] &lt;/jar&gt;</code></p> </li> <li> <p>To use the collator in XSLT style sheets, specify the collation URI on <code>@xsl:sort</code> elements (or anywhere a collator URI can be specified):</p> <p><code>language-xml &lt;xsl:apply-templates select=\"word\"&gt;   &lt;xsl:sort collation=\"http://org.example.i18n.MyCollator\"/&gt; &lt;/xsl:apply-templates&gt;</code></p> </li> </ol> <p>Related information </p> <p>DITA Community</p>"},{"location":"topics/implement-saxon-customizations/","title":"Adding Saxon customizations","text":"<p>Plug-ins can contribute XSLT extension functions and collation URI resolvers. These customizations are automatically configured to work with Saxon when transformations are run using the DITA-OT <code>&lt;pipeline&gt;</code> task with custom XSLT.</p> <p>Plug-ins can provide the following Saxon extensions:</p> <ul> <li>Extension functions</li> <li>Collation URI resolvers</li> </ul> <p>Extensions are declared in plug-in-provided JAR files using the Java ServiceLoader feature that looks for service-declaring files in JAR files and loads classes. This requires adding one or more files in the <code>META-INF/services</code> directory in plug-in-provided JAR files.</p> <p>You can create the file manually or generate it dynamically using <code>&lt;service&gt;</code> elements in Ant <code>&lt;jar&gt;</code> tasks. See the topics for the different extension types for details.</p> <p>These extensions use the DITA Open Toolkit Ant <code>&lt;pipeline&gt;</code> element to wrap <code>&lt;xslt&gt;</code> elements. You can do this in plug-ins as shown in this excerpt from the DITA Community I18N plugin\u2019s <code>build.xml</code> file:</p> <pre><code>&lt;target name=\"org.dita-community.i18n-saxon-extension-test\"&gt;\n  &lt;pipeline message=\"Test the DITA Community i18n Saxon extension functions\"\n            taskname=\"i18n-extension-function-test\"&gt;\n    &lt;xslt\n      in=\"${dita.plugin.org.dita-community.i18n.dir}/test/xsl/data/test-data.xml\"\n      style=\"${dita.plugin.org.dita-community.i18n.dir}/test/xsl/test-extension-functions.xsl\"\n      out=\"${basedir}/out/extension-function-test-results.xml\"\n      &gt;\n    &lt;/xslt&gt;\n  &lt;/pipeline&gt;\n&lt;/target&gt;\n</code></pre> <p>Normal XSLT extensions to built-in transformation types will automatically have the extensions available to them.</p> <p>The dynamic Saxon configuration is implemented in the class <code>org.dita.dost.module.XsltModule</code>, which backs the <code>&lt;pipeline&gt;</code>/<code>&lt;xslt&gt;</code> element.</p>"},{"location":"topics/implement-saxon-extension-functions/","title":"Implementing Saxon extension functions","text":"<p>Plug-ins can contribute Saxon extension functions for use in XSLT transformations run by DITA Open Toolkit.</p> <p>Starting with Saxon 9.2, the mechanism for implementing extension functions has changed such that Saxon HE, in particular, can no longer use the older \u201creflexive\u201d mechanism for finding Java extension functions using a magic URL. Instead, you implement extension functions and then register them directly on the Saxon Configuration object. DITA-OT provides a dynamic mechanism to perform this registration for plug-in-provided extension functions.</p> <p>To implement extension functions, you must do the following:</p> <ol> <li>Add your plug-in\u2019s JAR file in the DITA-OT class path as described in Adding a Java library to the classpath.</li> <li>For each function, implement a class that extends <code>net.sf.saxon.lib.ExtensionFunctionDefinition</code>. This class provides the namespace name and function name for the function as well as details about its arguments and so on. See Integrated extension functions in the Saxon documentation.</li> <li> <p>Include a file named <code>net.sf.saxon.lib.ExtensionFunctionDefinition</code> in the directory <code>META-INF/services</code> in the compiled JAR that your plug-in provides. Each line of the file must be the name of a class that implements <code>net.sf.saxon.lib.ExtensionFunctionDefinition</code>:</p> <p><code>com.example.saxon.functions.Add com.example.saxon.functions.Substract</code></p> <p>You can create the file using <code>&lt;service&gt;</code> elements in an Ant <code>&lt;jar&gt;</code> task:</p> <p><code>language-xml &lt;jar destfile=\"${basedir}/target/lib/example-saxon.jar\"&gt;   [...]   &lt;service type=\"net.sf.saxon.lib.ExtensionFunctionDefinition\"&gt;     &lt;provider classname=\"com.example.saxon.functions.Add\"/&gt;     &lt;provider classname=\"com.example.saxon.functions.Subtract\"/&gt;   &lt;/service&gt;   [...] &lt;/jar&gt;</code></p> </li> <li> <p>In your XSLT transformations, declare the namespace the functions are bound to:</p> <p><code>language-xml &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"                 xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"                 **xmlns:eg=\"http://example.com/saxon-extensions\"**                 version=\"2.0\"&gt;</code></p> </li> </ol> <p>You should then be able to use the extension functions as you would any other function:</p> <pre><code>&lt;xsl:variable name=\"test\" select=\"**eg:add\\(1, 2\\)**\"/&gt;\n</code></pre>"},{"location":"topics/increasing-the-jvm/","title":"Increasing Java memory allocation","text":"<p>If you are working with large documents with extensive metadata or key references, you will need to increase the memory allocation for the Java process. You can do this from the command-line prompt for a specific session, or you can increase the value of the <code>ANT_OPTS</code> environment variable.</p> <ul> <li> <p>To change the value for a specific session, from the command prompt, issue the following command:</p> Platform Command **Linux or macOS\u00a0** <code>export ANT_OPTS=$ANT_OPTS -Xmx*1024*M</code> Windows <code>set ANT_OPTS=%ANT_OPTS% -Xmx*1024*M</code> <p>This increases the JVM memory allocation to 1024 megabytes. The amount of memory which can be allocated is limited by available system memory and the operating system.</p> </li> <li> <p>To persistently change the value, change the value allocated to the <code>ANT_OPTS</code> environment variable on your system.</p> </li> </ul>"},{"location":"topics/input-formats/","title":"Authoring formats","text":"<p>In addition to standard DITA XML, DITA-OT supports several alternative input formats, including Markdown and the proposed XDITA, MDITA and HDITA authoring formats currently in development for Lightweight DITA.</p>"},{"location":"topics/installing-client/","title":"Installing DITA Open Toolkit","text":"<p>The DITA-OT distribution package can be installed on Linux, macOS, and Windows. It contains everything that you need to run the toolkit except for Java.</p> <ul> <li> <p>Ensure that you have a Java Runtime Environment (JRE) or Java Development Kit (JDK).</p> <p>DITA-OT 4.1 is designed to run on Java version 17 or later and built and tested with the Open Java Development Kit (OpenJDK). Compatible Java distributions are available from multiple sources:</p> <ul> <li>You can download the Oracle JRE or JDK from oracle.com/java under commercial license.</li> <li>Eclipse Temurin is the free OpenJDK distribution available from adoptium.net.</li> <li>Free OpenJDK distributions are also provided by Amazon Corretto, Azul Zulu, and Red Hat.</li> <li>If you want to generate HTML Help, ensure that you have HTML Help Workshop installed.</li> </ul> <p>You can download the Help Workshop from msdn.microsoft.com.</p> </li> <li> <p>Download the <code>dita-ot-4.1.2.zip</code> package from the project website at dita-ot.org/download.</p> </li> <li> <p>Extract the contents of the package to the directory where you want to install DITA-OT.</p> </li> <li> <p>Add the absolute path for the <code>bin</code> folder of the DITA-OT installation directory to the PATH environment variable.</p> <p>Tip: This defines the necessary environment variable that allows the <code>dita</code> command to be run from any location on the file system without typing the path to the command.</p> </li> </ul>"},{"location":"topics/installing-via-homebrew/","title":"Installing DITA-OT via Homebrew","text":"<p>An alternative installation method can be used to install DITA-OT via Homebrew, one of the most popular open-source package managers on macOS and Linux.</p> <p>The steps below assume you have already installed Homebrew according to the instructions at brew.sh.</p> <p>Tip: Verify that your PATH environment variable begins with the <code>bin</code> subfolder of the Homebrew installation directory 1 to ensure that Homebrew-installed software takes precedence over any programs of the same name elsewhere on the system.</p> <ol> <li> <p>Update Homebrew to make sure the latest package formulas are available on your system:</p> <p><code>syntax-bash $ `brew update` Already up-to-date.</code></p> <p>Homebrew responds with a list of any new or updated formul\u00e6.</p> </li> <li> <p>Check the version of DITA-OT that is available from Homebrew:</p> <p><code>``syntax-bash $</code>brew info dita-ot<code></code>dita-ot: stable 4.1.2 DITA Open Toolkit is an implementation of the OASIS DITA specification https://www.dita-ot.org/ /opt/homebrew/Cellar/dita-ot/4.1.2 (number of files, package size) *   Poured from bottle using the formulae.brew.sh API on YYYY-MM-DD at hh:mm:ss From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/dita-ot.rb License: Apache-2.0 ==&gt; Dependencies Required: openjdk \u2714`</p> <p>```</p> <p>The version of the DITA-OT formula is shown, along with basic information on the package.</p> </li> <li> <p>Install the <code>dita-ot</code> package:</p> <p><code>syntax-bash $ `brew install dita-ot` `Downloading\u2026`</code></p> <p>Homebrew will automatically download the latest version of the toolkit, install it in a subfolder of the local package Cellar and symlink the <code>dita</code> command to the <code>bin</code> subfolder of the Homebrew installation directory.</p> </li> <li> <p>Verify the installation:</p> <p><code>syntax-bash $ `which dita` `/opt/homebrew/bin/dita`</code></p> <p>The response confirms that the system will use the Homebrew-installed version of DITA-OT.</p> </li> <li> <p>Check the DITA-OT version number:</p> <p><code>syntax-bash $ `dita` **--version** `DITA-OT version 4.1.2`</code></p> <p>The DITA-OT version number appears on the console.</p> </li> </ol> <p>You can now run the <code>dita</code> command to transform DITA content.</p> <p>Related information </p> <p>Installing DITA-OT on macOS via Homebrew</p> <p>1 Homebrew\u2019s default installation location depends on the operating system architecture: -   <code>/usr/local</code> on macOS Intel -   <code>/opt/homebrew</code> on macOS ARM -   <code>/home/linuxbrew/.linuxbrew</code> on Linux</p>"},{"location":"topics/logging/","title":"Logging build information","text":"<p>When you run DITA-OT, key information is logged on the screen. This information can also be written to a log file. If you encounter a problem, you can analyze this information to determine the source of the problem and then take action to resolve it.</p> <p>The logging behavior varies depending on whether you use the <code>dita</code> command or Ant to invoke a toolkit build.</p> <ul> <li> <p><code>dita</code> command</p> <p>By default, only warning and error messages are written to the screen.</p> <ul> <li> <p>For more information, enable verbose logging with <code>dita</code> --verbose.</p> <p>Verbose logging prints additional information to the console, including directory settings, effective values for Ant properties, input/output files, and informational messages to assist in troubleshooting.</p> </li> <li> <p>To enable debug logging, use <code>dita</code> --debug.</p> <p>Debug logging prints considerably more additional information. The debug log includes all information from the verbose log, plus details on Java classes, additional Ant properties and overrides, preprocessing filters, parameters, and stages, and the complete build sequence.</p> <p>Attention: Debug logging requires additional resources and can slow down the build process, so it should only be enabled when further details are required to diagnose problems.</p> </li> <li> <p>To write the log to a file, use <code>dita</code> --logfile=file and specify the path to the log file.</p> <p>Unless an absolute path is specified, the value will be interpreted relative to the current directory.</p> </li> </ul> </li> <li> <p>Ant</p> <p>By default, status information is written to the screen. If you issue the -l parameter, the build runs silently and the information is written to a log file with the name and location that you specified.</p> </li> </ul>"},{"location":"topics/logging/#using-other-ant-loggers","title":"Using other Ant loggers","text":"<p>You also can use other Ant loggers; see Listeners &amp; Loggers in the Ant documentation for more information.</p> <p>For example, you can use the AnsiColorLogger to colorize the messages written on the screen.</p> <ul> <li> <p><code>dita</code> command</p> <p>To use a custom Ant logger with the <code>dita</code> command, add the logger to the <code>ANT_ARGS</code> environment variable by calling the following command before calling the <code>dita</code> command:</p> <p><code>syntax-bash export ANT_ARGS=\"-logger org.apache.tools.ant.listener.AnsiColorLogger\"</code></p> <p>Now you will get colorized messages when the <code>dita</code> command runs.</p> <p>Tip: Environment variables can also be set permanently. See How do I set or change the PATH system variable? for information on how to set the PATH environment variable. You can set the <code>ANT_ARGS</code> environment variable in the same way.</p> </li> <li> <p>Ant</p> <p>If you prefer to launch DITA-OT directly from Ant, you can also add the logger to the <code>ANT_ARGS</code> environment variable, as explained above. You can also set the logger with the <code>-logger</code> parameter when calling Ant.</p> <p><code>syntax-bash ant -logger org.apache.tools.ant.listener.AnsiColorLogger</code></p> </li> </ul>"},{"location":"topics/logging/#fop-debug-logging","title":"FOP debug logging","text":"<p>In PDF processing with Apache\u2122 FOP, DITA-OT uses the Simple Logging Facade for Java (SLF4J) for better control and formatting of FOP log messages. To reduce noise on the console, all FOP messages are set to the Info level and hidden by default.</p> <p>To enable debug logging, modify the <code>config/logback.xml</code> file or add your own <code>logback.xml</code> to the classpath with a higher priority to override the default settings. For more information, see the Logback configuration documentation.</p> <p>Attention: Enabling FOP debug logging will dramatically increase the size of generated log files.</p>"},{"location":"topics/lwdita-input/","title":"Preview support for Lightweight DITA","text":"<p>DITA-OT provides preview support for the authoring formats proposed for Lightweight DITA, or \u201cLwDITA\u201d. The XDITA, MDITA and HDITA formats are alternative representations of DITA content in XML, Markdown and HTML5.</p> <p>Attention: Since Lightweight DITA has not yet been released as a formal specification, the implementation for XDITA, MDITA and HDITA authoring formats is subject to change. Future versions of DITA Open Toolkit will be updated as LwDITA evolves.</p>"},{"location":"topics/lwdita-input/#xdita","title":"XDITA","text":"<p>XDITA is the LwDITA authoring format that uses XML to structure information. XDITA is a subset of DITA, with new multimedia element types added to support interoperability with HTML5. XDITA is designed for users who want to write DITA content but who do not want (or need) the full power of DITA.</p> <p>The XDITA parser included in the <code>org.lwdita</code> plug-in provides preliminary support for XDITA maps and XDITA topics.</p> <p>To apply XDITA-specific processing to topics in an XDITA map or a full DITA 1.3 map, set the <code>@format</code> attribute on a <code>&lt;topicref&gt;</code> to <code>xdita</code>:</p> <pre><code>&lt;map&gt;\n  &lt;topicref href=\"xdita-topic.xml\" **format=\"xdita\"**/&gt;\n&lt;/map&gt;\n</code></pre> <p>Tip: For examples of cross-format content sharing between topics in XDITA, HDITA, extended-profile MDITA, and DITA 1.3, see the LwDITA sample files in the DITA-OT installation directory under <code>plugins/org.oasis-open.xdita.v0_2_2/samples</code>.</p>"},{"location":"topics/lwdita-input/#mdita","title":"MDITA","text":"<p>MDITA is the LwDITA authoring format based on Markdown. It is designed for users who want to write structured content with the minimum of overhead, but who also want to take advantage of the reuse mechanisms associated with the DITA standard and the multi-channel publishing afforded by standard DITA tooling.</p> <p>Recent proposals for LwDITA include two profiles for authoring MDITA topics:</p> <ul> <li>The \u201cCore profile\u201d is based on GitHub-Flavored Markdown and includes elements that are common to many other Markdown implementations.</li> <li>The \u201cExtended profile\u201d borrows additional features from other flavors of Markdown to represent a broader range of DITA content with existing plain-text syntax conventions.</li> </ul> <p>The MDITA parser included in the <code>org.lwdita</code> plug-in provides preliminary support for these profiles and additional Markdown constructs as described in the MDITA syntax.</p> <p>To apply the stricter LwDITA-specific processing to Markdown topics, set the <code>@format</code> attribute to <code>mdita</code>:</p> <pre><code>&lt;map&gt;\n  &lt;topicref href=\"mdita-topic.md\" **format=\"mdita\"**/&gt;\n&lt;/map&gt;\n</code></pre> <p>In this case, the first paragraph in the topic will be treated as a short description, for example, and additional metadata can be specified for the topic via a YAML front matter block.</p> <p>Tip: For details on the differences in Markdown formats, see Markdown DITA syntax, MDITA syntax, and Format comparison.</p>"},{"location":"topics/lwdita-input/#hdita","title":"HDITA","text":"<p>HDITA is the LwDITA authoring format based on HTML5, which is intended to support structured content authoring with tools designed for HTML authoring. HDITA also uses custom data attributes to provide interoperability with DITA.</p> <p>The HDITA parser included in the <code>org.lwdita</code> plug-in provides preliminary support for these constructs.</p> <p>To apply LwDITA-specific processing to HTML topics, set the <code>@format</code> attribute to <code>hdita</code>:</p> <pre><code>&lt;map&gt;\n  &lt;topicref href=\"hdita-topic.html\" **format=\"hdita\"**/&gt;\n&lt;/map&gt;\n</code></pre> <p>Attention: The HDITA map format is not yet supported. To include HDITA content, use an XDITA map or a DITA 1.3 map.</p>"},{"location":"topics/lwdita-input/#using-conditional-processing-in-mdita-and-hdita","title":"Using conditional processing in MDITA and HDITA","text":"<p>When you set up conditional processing in MDITA and HDITA, use the <code>@data-props</code> attribute in the element that will have the conditional processing applied. In the <code>.ditaval</code> file, however, use the <code>@props</code> attribute.</p>"},{"location":"topics/lwdita-input/#converting-lightweight-formats-to-dita-xml","title":"Converting lightweight formats to DITA XML","text":"<p>When you add LwDITA topics to a DITA publication, the content is temporarily converted to DITA in the background when generating other output formats like HTML or PDF, but the source files remain unchanged.</p> <p>If you prefer to maintain this content in DITA in the future, you can generate DITA output by passing the --format=dita option on the command line.</p> <p>This converts all input files (both LwDITA formats and DITA XML) to Normalized DITA. You can then copy the generated DITA files from the output folder to your project and replace references to the lightweight topics with their DITA equivalents.</p> <p>Targetonly </p> <p>MDITA syntax</p>"},{"location":"topics/markdown-dita-syntax-reference/","title":"Markdown DITA syntax reference","text":"<p>Markdown DITA uses CommonMark as the underlying markup language.</p> <p>Markdown DITA files must be UTF-8 encoded.</p>"},{"location":"topics/markdown-dita-syntax-reference/#titles-and-document-structure","title":"Titles and document structure","text":"<p>Each header level will generate a topic and associated title:</p> <pre><code># Topic title\n\n## Nested topic title\n</code></pre> <pre><code>&lt;topic id=\"topic_title\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;topic id=\"nested_topic_title\"&gt;\n    &lt;title&gt;Nested topic title&lt;/title&gt;\n  &lt;/topic&gt;\n&lt;/topic&gt;\n</code></pre> <p>Pandoc header_attributes can be used to define <code>id</code> or <code>outputclass</code> attributes:</p> <pre><code># Topic title {#carrot .juice}\n</code></pre> <pre><code>&lt;topic id=\"carrot\" outputclass=\"juice\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n</code></pre> <p>If topic ID is not defined using header_attributes, the ID is generated from title contents.</p> <p>Pandoc pandoc_title_block extension can be used to group multiple level 1 headers under a common title:</p> <pre><code>% Common title\n\n# Topic title\n\n# Second title\n</code></pre> <pre><code>&lt;topic id=\"common_title\"&gt;\n  &lt;title&gt;Common title&lt;/title&gt;\n  &lt;topic id=\"topic_title\"&gt;\n    &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;/topic&gt;\n  &lt;topic id=\"second_title\"&gt;\n    &lt;title&gt;Second title&lt;/title&gt;\n  &lt;/topic&gt;\n&lt;/topic&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#topic-content","title":"Topic content","text":"<p>In LwDITA compatible documents (MDITA) the first paragraph is treated as a <code>shortdesc</code> element. In generic Markdown documents all paragraphs appear inside the <code>body</code> element.</p>"},{"location":"topics/markdown-dita-syntax-reference/#specialization-types","title":"Specialization types","text":"<p>The following class values in header_attributes have a special meaning on level 1 headers:</p> <ul> <li><code>concept</code></li> <li><code>task</code></li> <li><code>reference</code></li> </ul> <p>They can be used to change the Markdown DITA topic type to one of the built-in structural specialization types.</p> <pre><code># Task {.task}\n\nContext\n\n1.  Command\n\n    Info.\n</code></pre> <pre><code>&lt;task id=\"task\"&gt;\n  &lt;title&gt;Task &lt;/title&gt;\n  &lt;taskbody&gt;\n    &lt;context&gt;\n      &lt;p&gt;Context&lt;/p&gt;\n    &lt;/context&gt;\n    &lt;steps&gt;\n      &lt;step&gt;\n        &lt;cmd&gt;Command&lt;/cmd&gt;\n        &lt;info&gt;\n          &lt;p&gt;Info.&lt;/p&gt;\n        &lt;/info&gt;\n      &lt;/step&gt;\n    &lt;/steps&gt;\n  &lt;/taskbody&gt;\n&lt;/task&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#sections","title":"Sections","text":"<p>The following class values in header_attributes have a special meaning on header levels other than 1:</p> <ul> <li><code>section</code></li> <li><code>example</code></li> </ul> <p>They are used to generate <code>section</code> and <code>example</code> elements:</p> <pre><code># Topic title\n\n## Section title {.section}\n\n## Example title {.example}\n</code></pre> <pre><code>&lt;topic id=\"topic_title\"&gt;\n  &lt;title&gt;Topic title&lt;/title&gt;\n  &lt;body&gt;\n    &lt;section&gt;\n      &lt;title&gt;Section title&lt;/title&gt;\n    &lt;/section&gt;\n    &lt;example&gt;\n      &lt;title&gt;Example title&lt;/title&gt;\n    &lt;/example&gt;\n  &lt;/body&gt;\n&lt;/topic&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#hard-line-breaks","title":"Hard line breaks","text":"<p>A line break that is preceded by two or more spaces is parsed as a hard line break. Because DITA doesn't have a <code>br</code> element for line break, hard line breaks are converted into <code>linebreak</code> processing instructions.</p> <pre><code>foo\u00b7\u00b7\nbaz\n</code></pre> <pre><code>&lt;p&gt;foo&lt;?linebreak?&gt;baz&lt;/p&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#links","title":"Links","text":"<p>The format of local link targets is detected based on file extension. The following extensions are treated as DITA files:</p> extension format <code>.dita</code> <code>dita</code> <code>.xml</code> <code>dita</code> <code>.md</code> <code>markdown</code> <code>.markdown</code> <code>markdown</code> <p>All other link targets use <code>format</code> from file extension and are treated as non-DITA files. Absolute link targets are treated as external scope links:</p> <pre><code>[Markdown](test.md)\n[DITA](test.dita)\n[HTML](test.html)\n[External](http://www.example.com/test.html)\n</code></pre> <pre><code>&lt;xref href=\"test.md\"&gt;Markdown&lt;/xref&gt;\n&lt;xref href=\"test.dita\"&gt;DITA&lt;/xref&gt;\n&lt;xref href=\"test.html\" format=\"html\"&gt;HTML&lt;/xref&gt;\n&lt;xref href=\"http://www.example.com/test.html\" format=\"html\" scope=\"external\"&gt;External&lt;/xref&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#images","title":"Images","text":"<p>Images used in inline content will result in inline placement. If a block level image contains a title, it will be treated as an image wrapped in figure:</p> <pre><code>An inline ![Alt](test.jpg).\n\n![Alt](test.jpg)\n\n![Alt](test.jpg \"Title\")\n</code></pre> <pre><code>&lt;p&gt;An inline &lt;image href=\"test.jpg\"&gt;&lt;alt&gt;Alt&lt;/alt&gt;&lt;/image&gt;.&lt;/p&gt;\n&lt;image href=\"test.jpg\" placement=\"break\"&gt;\n  &lt;alt&gt;Alt&lt;/alt&gt;\n&lt;/image&gt;\n&lt;fig&gt;\n  &lt;title&gt;Title&lt;/title&gt;\n  &lt;image href=\"test.jpg\"&gt;\n    &lt;alt&gt;Alt&lt;/alt&gt;\n  &lt;/image&gt;\n&lt;/fig&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#key-references","title":"Key references","text":"<p>Key reference can be used with shortcut reference links:</p> <pre><code>[key]\n![image-key]\n</code></pre> <pre><code>&lt;xref keyref=\"key\"/&gt;\n&lt;image keyref=\"image-key\"/&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#inline","title":"Inline","text":"<p>The following inline elements are supported:</p> <pre><code>**bold**\n*italic*\n`code`\n~~strikethrough~~\n</code></pre> <pre><code>&lt;b&gt;bold&lt;/b&gt;\n&lt;i&gt;italic&lt;/i&gt;\n&lt;codeph&gt;code&lt;/codeph&gt;\n&lt;ph status=\"deleted\"&gt;strikethrough&lt;/ph&gt;\n</code></pre>"},{"location":"topics/markdown-dita-syntax-reference/#lists","title":"Lists","text":"<p>Unordered can be marked up with either hyphen or asterisk:</p> <pre><code>*   one\n*   two\n    -   three\n    -   four\n</code></pre> <pre><code>&lt;ul&gt;\n  &lt;li&gt;one&lt;/li&gt;\n  &lt;li&gt;two\n    &lt;ul&gt;\n      &lt;li&gt;three&lt;/li&gt;\n      &lt;li&gt;four&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Ordered can be marked up with either number or number sign, followed by a period:</p> <pre><code>1.  one\n2.  two\n    #.  three\n    #.  four\n</code></pre> <pre><code>&lt;ol&gt;\n  &lt;li&gt;one&lt;/li&gt;\n  &lt;li&gt;two\n    &lt;ol&gt;\n      &lt;li&gt;three&lt;/li&gt;\n      &lt;li&gt;four&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Definition lists use the PHP Markdown Extra format:</p> <pre><code>Term\n:   Definition.\n</code></pre> <pre><code>&lt;dl&gt;\n  &lt;delentry&gt;\n    &lt;dt&gt;Term&lt;/dt&gt;\n    &lt;dd&gt;Defintion.&lt;/dd&gt;\n  &lt;/delentry&gt;\n&lt;/dl&gt;\n</code></pre> <p>Each definition entry must have only one term and contain only inline content.</p>"},{"location":"topics/markdown-dita-syntax-reference/#tables","title":"Tables","text":"<p>Tables use MultiMarkdown table extension format:</p> <pre><code>| First Header | Second Header | Third Header |\n| ------------ | :-----------: | -----------: |\n| Content      | *Long Cell*                 ||\n| Content      | **Cell**      | Cell         |\n</code></pre> <pre><code>&lt;table&gt;\n  &lt;tgroup cols=\"3\"&gt;\n    &lt;colspec colname=\"col1\"/&gt;\n    &lt;colspec colname=\"col2\" align=\"center\"/&gt;\n    &lt;colspec colname=\"col3\" align=\"right\"/&gt;\n    &lt;thead&gt;\n      &lt;row&gt;\n        &lt;entry&gt;First Header &lt;/entry&gt;\n        &lt;entry&gt;Second Header &lt;/entry&gt;\n        &lt;entry&gt;Third Header &lt;/entry&gt;\n      &lt;/row&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;row&gt;\n        &lt;entry&gt;Content &lt;/entry&gt;\n        &lt;entry namest=\"col2\" nameend=\"col3\"&gt;&lt;i&gt;Long Cell&lt;/i&gt;&lt;/entry&gt;\n      &lt;/row&gt;\n      &lt;row&gt;\n        &lt;entry&gt;Content &lt;/entry&gt;\n        &lt;entry&gt;&lt;b&gt;Cell&lt;/b&gt;&lt;/entry&gt;\n        &lt;entry&gt;Cell &lt;/entry&gt;\n      &lt;/row&gt;\n    &lt;/tbody&gt;\n  &lt;/tgroup&gt;\n&lt;/table&gt;\n</code></pre> <p>Table cells may only contain inline content and column spans; block content and row spans are not supported by Markdown DITA.</p>"},{"location":"topics/markdown-dita-syntax-reference/#metadata","title":"Metadata","text":"<p>YAML metadata block as defined in Pandoc pandoc_metadata_block can be used to specify different metadata elements. The supported elements are:</p> <ul> <li><code>author</code></li> <li><code>source</code></li> <li><code>publisher</code></li> <li><code>permissions</code></li> <li><code>audience</code></li> <li><code>category</code></li> <li><code>keyword</code></li> <li><code>resourceid</code></li> </ul> <p>Unrecognized keys are output using <code>data</code> element.</p> <pre><code>---\nauthor:\n  - Author One\n  - Author Two\nsource: Source\npublisher: Publisher\npermissions: Permissions\naudience: Audience\ncategory: Category\nkeyword:\n  - Keyword1\n  - Keyword2\nresourceid:\n  - Resourceid1\n  - Resourceid2\nworkflow: review\n---\n\n# Sample with YAML header\n</code></pre> <pre><code>&lt;title&gt;Sample with YAML header&lt;/title&gt;\n&lt;prolog&gt;\n  &lt;author&gt;Author One&lt;/author&gt;\n  &lt;author&gt;Author Two&lt;/author&gt;\n  &lt;source&gt;Source&lt;/source&gt;\n  &lt;publisher&gt;Publisher&lt;/publisher&gt;\n  &lt;permissions view=\"Permissions\"/&gt;\n  &lt;metadata&gt;\n    &lt;audience audience=\"Audience\"/&gt;\n    &lt;category&gt;Category&lt;/category&gt;\n    &lt;keywords&gt;\n      &lt;keyword&gt;Keyword1&lt;/keyword&gt;\n      &lt;keyword&gt;Keyword2&lt;/keyword&gt;\n    &lt;/keywords&gt;\n  &lt;/metadata&gt;\n  &lt;resourceid appid=\"Resourceid1\"/&gt;\n  &lt;resourceid appid=\"Resourceid2\"/&gt;\n  &lt;data name=\"workflow\" value=\"review\"/&gt;\n&lt;/prolog&gt;\n</code></pre> <p>Related information </p> <p>DITA and Markdown and Docker, oh my\u2026</p>"},{"location":"topics/markdown-input/","title":"Markdown input","text":"<p>Markdown is a lightweight markup language that allows you to write using an easy-to-read plain text format and convert to structurally valid markup as necessary.</p> <p>In the words of its creators:</p> <p>\u201cThe overriding design goal for Markdown\u2019s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it\u2019s been marked up with tags or formatting instructions.\u201d</p> <p>DITA Open Toolkit allows you to use Markdown files directly in topic references and export DITA content as Markdown.</p> <p>These features enable lightweight authoring scenarios that allow subject matter experts to contribute to DITA publications without writing in XML, and support publishing workflows that include DITA content in Markdown-based publishing systems.</p>"},{"location":"topics/markdown-input/#adding-markdown-topics","title":"Adding Markdown topics","text":"<p>In 2015, the original DITA-OT Markdown plug-in introduced a series of conventions to convert Markdown content to DITA, and vice-versa. This Markdown flavor was called Markdown DITA. The <code>markdown</code> format adds several complementary constructs to represent DITA content in Markdown, beyond those proposed for the MDITA format in the Lightweight DITA specification drafts.</p> <p>Tip: For details on the differences in Markdown formats, see Markdown DITA syntax, MDITA syntax, and Format comparison.</p> <p>To add a Markdown topic to a DITA publication, create a topic reference in your map and set the <code>@format</code> attribute to <code>markdown</code> so the toolkit will recognize the source file as Markdown and convert it to DITA:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE map PUBLIC \"-//OASIS//DTD DITA Map//EN\" \"map.dtd\"&gt;\n&lt;map&gt;\n  &lt;topicref href=\"markdown-dita-topic.md\" **format=\"markdown\"**/&gt;\n&lt;/map&gt;\n</code></pre> <p>When you add Markdown topics to a DITA publication as described above, the content is temporarily converted to DITA in the background when generating other output formats like HTML or PDF, but the Markdown source files remain unchanged.</p> <p>Tip: This approach is recommended in cases where simple content is authored collaboratively over multiple versions, as Markdown topics can be edited by a wide range of authors and combined as necessary with more complex content maintained in DITA XML.</p>"},{"location":"topics/markdown-input/#converting-markdown-to-dita","title":"Converting Markdown to DITA","text":"<p>In cases where the Markdown input is a one-off contribution, members of the DITA authoring team can use the Markdown file as raw material that is easily converted to DITA and enriched with conditional processing attributes, conkeyrefs or other more complex semantics that have no equivalent in limited formats like Markdown.</p> <p>If you prefer to maintain this content in DITA in the future, you can generate DITA output by passing the --format=dita option on the command line.</p> <p>This converts all input files (both DITA XML and Markdown) to Normalized DITA. You can then copy the generated DITA files from the output folder to your project and replace references to the Markdown topics with their DITA equivalents.</p> <p>Related information </p> <p>Generating Markdown output</p> <p>Markdown plugin</p> <p>Targetonly </p> <p>Markdown DITA syntax</p>"},{"location":"topics/migrating-ant-to-dita/","title":"Migrating Ant builds to use the <code>dita</code> command","text":"<p>Although DITA Open Toolkit still supports Ant builds, switching to the <code>dita</code> command offers a simpler command interface, sets all required environment variables and allows you to run DITA-OT without setting up anything beforehand.</p> <p>Building output with the <code>dita</code> command is often easier than using Ant. In particular, you can use <code>.properties</code> files to specify sets of DITA-OT parameters for each build.</p> <p>You can include the <code>dita</code> command in shell scripts to perform multiple builds.</p> <p>Tip: Add the absolute path for the <code>bin</code> folder of the DITA-OT installation directory to the PATH environment variable to run the <code>dita</code> command from any location on the file system without typing the path.</p> <ol> <li> <p>In your Ant build file, identify the properties set in each build target.</p> <p>Note: Some build parameters might be specified as properties of the project as a whole. You can refer to a build log to see a list of all properties that were set for the build.</p> </li> <li> <p>Create a <code>.properties</code> file for each build and specify the needed build parameters, one per line, in the format <code>name = value</code>.</p> </li> <li> <p>Use the <code>dita</code> command to perform each build, referencing your <code>.properties</code> with the --propertyfile=file option.</p> </li> </ol>"},{"location":"topics/migrating-ant-to-dita/#example-ant-build","title":"Example: Ant build","text":"<p>Prior to DITA-OT 2.0, an Ant build like this was typically used to define the properties for each target.</p> <p>Sample build file: <code>*dita-ot-dir*/docsrc/samples``/ant_sample/build-chm-pdf.xml</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project name=\"build-chm-pdf\" default=\"all\" basedir=\".\"&gt;\n  &lt;property name=\"dita.dir\" location=\"${basedir}/../../..\"/&gt;\n  &lt;target name=\"all\" description=\"build CHM and PDF\" depends=\"chm,pdf\"/&gt;\n  &lt;target name=\"chm\" description=\"build CHM\"&gt;\n    &lt;ant antfile=\"${dita.dir}/build.xml\"&gt;\n      &lt;property name=\"args.input\" location=\"../sequence.ditamap\"/&gt;\n      &lt;property name=\"transtype\" value=\"htmlhelp\"/&gt;\n      &lt;property name=\"output.dir\" location=\"../out/chm\"/&gt;\n      &lt;property name=\"args.gen.task.lbl\" value=\"YES\"/&gt;\n    &lt;/ant&gt;\n  &lt;/target&gt;\n  &lt;target name=\"pdf\" description=\"build PDF\"&gt;\n    &lt;ant antfile=\"${dita.dir}/build.xml\"&gt;\n      &lt;property name=\"args.input\" location=\"../taskbook.ditamap\"/&gt;\n      &lt;property name=\"transtype\" value=\"pdf\"/&gt;\n      &lt;property name=\"output.dir\" location=\"../out/pdf\"/&gt;\n      &lt;property name=\"args.gen.task.lbl\" value=\"YES\"/&gt;\n      &lt;property name=\"args.rellinks\" value=\"nofamily\"/&gt;\n    &lt;/ant&gt;\n  &lt;/target&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"topics/migrating-ant-to-dita/#example-properties-files-with-dita-command","title":"Example: <code>.properties</code> files with <code>dita</code> command","text":"<p>The following <code>.properties</code> files and <code>dita</code> commands are equivalent to the example Ant build.</p> <p>Sample <code>.properties</code> file: <code>*dita-ot-dir*/docsrc/samples``/properties/chm.properties</code></p> <pre><code>output.dir = out/chm\nargs.gen.task.lbl = YES\n</code></pre> <p>Sample <code>.properties</code> file: <code>*dita-ot-dir*/docsrc/samples``/properties/pdf.properties</code></p> <pre><code>output.dir = out/pdf\nargs.gen.task.lbl = YES\nargs.rellinks = nofamily\n</code></pre> <p>Run from <code>*dita-ot-dir*/docsrc/samples</code>:</p> <pre><code>`dita` **--input**=`sequence.ditamap` **--format**=htmlhelp \\\n     **--propertyfile**=`properties/chm.properties`\n`dita` **--input**=`taskbook.ditamap` **--format**=pdf \\\n     **--propertyfile**=`properties/pdf.properties`\n</code></pre>"},{"location":"topics/migrating-ant-to-dita/#example-call-the-dita-command-from-an-ant-build","title":"Example: Call the <code>dita</code> command from an Ant build","text":"<p>In some cases, you might still want to use an Ant build to implement some pre- or post-processing steps, but also want the convenience of using the <code>dita</code> command with <code>.properties</code> files to define the parameters for each build. This can be accomplished with Ant\u2019s <code>&lt;exec&gt;</code> task.</p> <p>This example uses a <code>&lt;dita-cmd&gt;</code> Ant macro defined in the <code>*dita-ot-dir*/docsrc/samples``/ant_sample/dita-cmd.xml</code> file:</p> <pre><code>&lt;macrodef name=\"dita-cmd\"&gt;\n  &lt;attribute name=\"input\"/&gt;\n  &lt;attribute name=\"format\"/&gt;\n  &lt;attribute name=\"propertyfile\"/&gt;\n  &lt;sequential&gt;\n    &lt;!-- For Unix run the DITA executable--&gt;\n    &lt;exec taskname=\"dita-cmd\" executable=\"${dita.dir}/bin/dita\" osfamily=\"unix\" failonerror=\"true\"&gt;\n      &lt;arg value=\"--input\"/&gt;\n      &lt;arg value=\"@{input}\"/&gt;\n      &lt;arg value=\"--format\"/&gt;\n      &lt;arg value=\"@{format}\"/&gt;\n      &lt;arg value=\"--propertyfile\"/&gt;\n      &lt;arg value=\"@{propertyfile}\"/&gt;\n    &lt;/exec&gt;\n    &lt;!-- For Windows run DITA from a DOS command --&gt;\n    &lt;exec taskname=\"dita-cmd\" dir=\"${dita.dir}/bin\" executable=\"cmd\" osfamily=\"windows\" failonerror=\"true\"&gt;\n      &lt;arg value=\"/C\"/&gt;\n      &lt;arg value=\"dita --input @{input} --format @{format} --propertyfile=@{propertyfile}\"/&gt;\n    &lt;/exec&gt;\n  &lt;/sequential&gt;\n&lt;/macrodef&gt;\n</code></pre> <p>You can use this macro in your Ant build to call the <code>dita</code> command and pass the input, format and propertyfile parameters as follows:</p> <pre><code>&lt;dita-cmd input=\"sample.ditamap\" format=\"pdf\" propertyfile=\"sample.properties\"/&gt;\n</code></pre> <p>This approach allows you to use Ant builds to perform additional tasks at build time while allowing the <code>dita</code> command to set the classpath and ensure that all necessary JAR libraries are available.</p> <p>Note: The attributes defined in the Ant macro are required and must be supplied each time the task is run. To set optional parameters in one build (but not another), use different <code>.properties</code> files for each build.</p> <p>Sample build file: <code>*dita-ot-dir*/docsrc/samples``/ant_sample/build-chm-pdf-hybrid.xml</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project name=\"build-chm-pdf-hybrid\" default=\"all\" basedir=\".\"&gt;\n  &lt;description&gt;An Ant build that calls the dita command&lt;/description&gt;\n  &lt;include file=\"dita-cmd.xml\"/&gt;&lt;!-- defines the &lt;dita-cmd&gt; macro --&gt;\n  &lt;target name=\"all\" depends=\"pre,main,post\"/&gt;\n  &lt;target name=\"pre\"&gt;\n    &lt;description&gt;Preprocessing steps&lt;/description&gt;\n  &lt;/target&gt;\n  &lt;target name=\"main\"&gt;\n    &lt;description&gt;Build the CHM and PDF with the dita command&lt;/description&gt;\n    &lt;property name=\"absolute.path.base\" location=\"../\"/&gt;\n    &lt;dita-cmd\n      input=\"${absolute.path.base}/sequence.ditamap\"\n      format=\"htmlhelp\"\n      propertyfile=\"${absolute.path.base}/properties/chm.properties\"\n    /&gt;\n    &lt;dita-cmd\n      input=\"${absolute.path.base}/taskbook.ditamap\"\n      format=\"pdf\"\n      propertyfile=\"${absolute.path.base}/properties/pdf.properties\"\n    /&gt;\n  &lt;/target&gt;\n  &lt;target name=\"post\"&gt;\n    &lt;description&gt;Postprocessing steps&lt;/description&gt;\n  &lt;/target&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"topics/migrating-to-1.5.4/","title":"Migrating to release 1.5.4","text":"<p>DITA-OT 1.5.4 adds new extension points to configure behavior based on file extensions, declare print transformation types and add mappings to the PDF configuration catalog file. PDF output supports mirrored page layout and uses new font family definitions. Support for several new languages was added for PDF and XHTML output.</p>"},{"location":"topics/migrating-to-1.5.4/#configuration-properties-file-changes","title":"Configuration properties file changes","text":"<p>In previous versions, the <code>lib/configuration.properties</code> file was generated by the integration process. Integration has been changed to generate <code>lib/org.dita.dost.platform/plugin.properties</code> and the role of the old <code>lib/configuration.properties</code> has been changed to contain defaults and configuration options, such as default language.</p> <p>The <code>dita.plugin.org.dita.*.dir</code> properties have been changed to point to the DITA-OT base directory.</p> <p>To allow access to configuration files, the <code>lib</code> directory needs to be added to the Java classpath.</p>"},{"location":"topics/migrating-to-1.5.4/#new-plug-in-extension-points","title":"New plug-in extension points","text":"<p>New plug-in extension points have been added allow configuring DITA-OT behavior based on file extensions.</p> Extension point Description Default values dita.topic.extension DITA topic <code>.dita</code>, <code>.xml</code> dita.map.extensions DITA map <code>.ditamap</code> dita.html.extensions HTML file <code>.html</code>, <code>.htm</code> dita.resource.extensions Resource file <code>.pdf</code>, <code>.swf</code> <p>Both HTML and resource file extensions are used to determine if a file in source is copied to output.</p> <p>A new plug-in extension point has been added to declare transformation types as print types.</p> Extension point Description dita.transtype.print Declare transformation type as a print type. <p>The <code>print_transtypes</code> property in <code>integrator.properties</code> has been deprecated in favor of dita.transtype.print.</p>"},{"location":"topics/migrating-to-1.5.4/#plugin-uri-scheme","title":"Plugin URI scheme","text":"<p>Support for the plugin URI scheme has been added to XSLT stylesheets. Plug-ins can refer to files in other plug-ins without hard-coding relative paths, for example:</p> <pre><code>&lt;xsl:import href=\"plugin:org.dita.pdf2:xsl/fo/topic2fo_1.0.xsl\"/&gt;\n</code></pre>"},{"location":"topics/migrating-to-1.5.4/#xhtml","title":"XHTML","text":"<p>Support for the following languages has been added:</p> <ul> <li>Indonesian</li> <li>Kazakh</li> <li>Malay</li> </ul>"},{"location":"topics/migrating-to-1.5.4/#pdf","title":"PDF","text":"<p>Support for mirrored page layout was added. The default is the unmirrored layout. The following XSLT configuration variables have been deprecated:</p> <ul> <li><code>page-margin-left</code></li> <li><code>page-margin-right</code></li> </ul> <p>The following variables should be used instead to control page margins:</p> <ul> <li><code>page-margin-outside</code></li> <li><code>page-margin-inside</code></li> </ul> <p>The args.bookmap-order property has been added to control how front and back matter are processed in bookmaps. The default is to reorder the frontmatter content as in previous releases.</p> <p>A new extension point has been added to add mappings to the PDF configuration catalog file.</p> Extension point Description org.dita.pdf2.catalog.relative Configuration catalog includes. <p>Support for the following languages has been added:</p> <ul> <li>Finnish</li> <li>Hebrew</li> <li>Romanian</li> <li>Russian</li> <li>Swedish</li> </ul> <p>PDF processing no longer copies images or generates XSL FO to output directory. Instead, the temporary directory is used for all temporary files and source images are read directly from source directory. The legacy processing model can be enabled by setting org.dita.pdf2.use-out-temp to true in configuration properties; support for the legacy processing model may be removed in future releases.</p> <p>Support for FrameMaker index syntax has been disabled by default. To enable FrameMaker index syntax, set org.dita.pdf2.index.frame-markup to true in configuration properties.</p> <p>A configuration option has been added to disable internationalization (I18N) font processing and use stylesheet-defined fonts. To disable I18N font processing, set org.dita.pdf2.i18n.enabled to <code>false</code> in configuration properties.</p> <p>The XSLT parameters customizationDir and fileProfilePrefix have been removed in favor of the customizationDir.url parameter.</p> <p>A new shell stylesheet has been added for FOP and other shell stylesheets have also been revised. Plug-ins which have their own shell stylesheets for PDF processing should make sure all required stylesheets are imported.</p> <p>Font family definitions in stylesheets have been changed from Sans, Serif, and Monospaced to sans-serif, serif, and monospace, respectively. The I18N font processing still uses the old logical names and aliases are used to map the new names to old ones.</p>"},{"location":"topics/migrating-to-1.6/","title":"Migrating to release 1.6","text":"<p>In DITA-OT 1.6, various <code>demo</code> plug-ins were removed along with many deprecated properties, targets, templates and modes. The PDF2 transformation no longer supports the beta version of DITA from IBM, the \"bkinfo\" demo plug-in, or <code>layout-masters.xml</code> configuration.</p> <p>Support for the old DITAVAL format (used before OASIS added DITAVAL to the standard in 2007) has been removed.</p> <p>The <code>demo</code> folder has been deprecated and the following plug-ins have been moved to the <code>plugins</code> folder:</p> old path new path <code>demo/dita11</code> <code>plugins/org.dita.specialization.dita11</code> <code>demo/dita132</code> <code>plugins/org.dita.specialization.dita132</code> <code>demo/eclipsemap</code> <code>plugins/org.dita.specialization.eclipsemap</code> <code>demo/fo</code> <code>plugins/org.dita.pdf2</code> <code>demo/tocjs</code> <code>plugins/com.sophos.tocjs</code> <code>demo/h2d</code> <code>plugins/h2d</code> <code>demo/legacypdf</code> <code>plugins/legacypdf</code> <p>The remaining plug-ins in the demo folder have been moved to a separate repository at github.com/dita-ot/ext-plugins.</p> <p>The deprecated property <code>dita.input.valfile</code> should be replaced with the new argument property <code>args.filter</code>.</p> <p>The <code>dita-preprocess</code> target has been removed and dependencies should be replaced with a target sequence <code>build-init, preprocess</code>.</p> <p>Support for the <code>args.message.file</code> argument has been removed as message configuration has become static configuration.</p> <p>The <code>workdir</code> processing instruction has been deprecated in favor of <code>workdir-uri</code>. The only difference between the two processing instructions is that <code>workdir-uri</code> contains a URI instead of a system path.</p>"},{"location":"topics/migrating-to-1.6/#preprocessing","title":"Preprocessing","text":"<p>The following deprecated templates and modes have been removed in topic pull stylesheets:</p> <ul> <li>inherit</li> <li>get-stuff</li> <li>verify-type-attribute</li> <li>classval</li> <li>getshortdesc</li> <li>getlinktext</li> <li>blocktext</li> <li>figtext</li> <li>tabletext</li> <li>litext</li> <li>fntext</li> <li>dlentrytext</li> <li>firstclass</li> <li>invalid-list-item</li> <li>xref</li> </ul>"},{"location":"topics/migrating-to-1.6/#pdf2","title":"PDF2","text":"<p>The following deprecated items are no longer supported in the PDF transform:</p> <ul> <li>Support for the beta version of DITA, available from IBM before the OASIS standard was created in 2005.</li> <li>Support for the \"bkinfo\" demo plug-in, used to support book metadata before OASIS created the BookMap format in 2007.</li> <li>Support for <code>layout-masters.xml</code> configuration. Plug-ins should use the <code>createDefaultLayoutMasters</code> template instead.</li> </ul> <p>The following extension-points have been added:</p> <ul> <li><code>dita.conductor.pdf2.param</code> to add XSLT parameters to XSL FO transformation.</li> </ul> <p>Custom PDF2 shell stylesheets need to be revised to not include separate IBM and OASIS DITA stylesheets. The <code>*\\**_1.0.xsl</code> stylesheets have been removed and their imports must be removed from shell stylesheets.</p> <p>The following template modes have been deprecated:</p> <ul> <li>toc-prefix-text</li> <li>toc-topic-text</li> </ul> <p>The following named templates have been removed:</p> <ul> <li>processTopic</li> <li>createMiniToc</li> <li>processTopicTitle</li> <li>createTopicAttrsName</li> <li>processConcept</li> <li>processReference</li> <li>getTitle</li> <li>placeNoteContent</li> <li>placeImage</li> <li>processUnknowType</li> <li>insertReferenceTitle</li> <li>buildRelationships</li> <li>processTask</li> </ul> <p>The main FO generation process now relies on the merging process to rewrite duplicate IDs. The default merging process did this already in previous releases, but now also custom merging processes must fulfill the duplicate ID rewrite requirement.</p>"},{"location":"topics/migrating-to-1.6/#xhtml","title":"XHTML","text":"<p>The following named templates have been deprecated:</p> <ul> <li>make-index-ref</li> </ul> <p>The following deprecated templates have been removed:</p> <ul> <li>revblock-deprecated</li> <li>revstyle-deprecated</li> <li>start-revision-flag-deprecated</li> <li>end-revision-flag-deprecated</li> <li>concept-links</li> <li>task-links</li> <li>reference-links</li> <li>relinfo-links</li> <li>sort-links-by-role</li> <li>create-links</li> <li>add-linking-attributes</li> <li>add-link-target-attribute</li> <li>add-user-link-attributes</li> </ul> <p>The removed templates have been replaced by other templates in earlier releases and plug-ins should be changed to use the new templates.</p>"},{"location":"topics/migrating-to-1.6/#odt","title":"ODT","text":"<p>The following deprecated templates have been removed:</p> <ul> <li>revblock-deprecated</li> <li>revstyle-deprecated</li> <li>start-revision-flag-deprecated</li> <li>end-revision-flag-deprecated</li> </ul> <p>The removed templates have been replaced by other templates in earlier releases and plug-ins should be changed to use the new templates.</p>"},{"location":"topics/migrating-to-1.7/","title":"Migrating to release 1.7","text":"<p>In DITA-OT 1.7, a new preprocessing step implements flagging for HTML-based output formats. PDF processing was corrected with regard to <code>shortdesc</code> handling, and a new XSLT template mode was introduced for HTML TOC processing. Several stylesheets were moved to plug-in specific folders and deprecated properties and XSLT variables were removed.</p> <p>A new job status file <code>.job.xml</code> has been introduced and replaces <code>dita.list</code> and <code>dita.xml.properties</code> as the normative source for job status. If you have custom processing which modifies the job properties, you should change your code to modify <code>.job.xml</code> instead.</p> <p>Support for the following deprecated properties has been removed:</p> <ul> <li><code>dita.input</code></li> <li><code>dita.input.dirname</code></li> <li><code>dita.extname</code></li> </ul> <p>Stylesheets for the following transformation types have moved to plug-in specific folders:</p> <ul> <li>docbook</li> <li>eclipsecontent</li> <li>troff</li> <li>wordrtf</li> </ul> <p>If custom plug-ins have hard coded paths to these stylesheets, update references to use either <code>plugin</code> URIs in <code>xsl:import</code> instructions or use <code>dita.plugin.*</code> Ant properties.</p> <p>The integration process has been changed to use strict mode by default. For old plug-ins which are not valid, lax processing mode can still be used.</p> <p>Plug-ins that use the <code>MessageUtils</code> Java class must use <code>getInstance</code> method to access the <code>MessageUtils</code> instance, as <code>getMessage</code> methods have been changed to instance methods.</p>"},{"location":"topics/migrating-to-1.7/#preprocessing","title":"Preprocessing","text":"<p>The preprocessing Ant dependency chain has been cleaned up. Tasks no longer depend on the previous task in the default chain, but rather the whole preprocess dependency chain is defined by the <code>preprocess</code> task.</p>"},{"location":"topics/migrating-to-1.7/#html","title":"HTML","text":"<p>Core TOC generation has been moved to a separate XSLT stylesheet <code>xsl/map2htmtoc/map2htmlImpl.xsl</code> and the new templates use the mode <code>toc</code>. Plug-ins which override HTML TOC processing should change the map processing templates to <code>toc</code> mode.</p>"},{"location":"topics/migrating-to-1.7/#html-and-extended-transformation-types","title":"HTML and extended transformation types","text":"<p>Flagging logic has been pulled out of the core X/HTML code and moved to a preprocess step. This significantly simplifies and optimizes the X/HTML code, while making flagging logic available to any other transformation type. The new preprocess step implements all flagging logic; for each active flag, it adds a DITA-OT specific hint into the intermediate topics (implemented as a specialization of the DITA &lt;foreign&gt; element). As part of this change, all flagging-related templates in the XHTML code (such as start-flagit and gen-style) are deprecated.</p> <p>If you override the X/HTML transforms, you may need to update your overrides to use the new flagging logic. In most cases this just means deleting calls to the deprecated templates; in some cases, the calls can be replaced with 2 lines to process flags in new places. You should compare your override to the updated XHTML code and update as needed. See XHTML migration for flagging updates in DITA-OT 1.7 for details.</p> <p>Plug-ins that provide support for new transforms need to ensure that they properly support the DITA &lt;foreign&gt; element, which should be ignored by default; if so, this change will have no immediate impact. Support for flagging new transformation types may be more easily added based on this update, because there is no need to re-implement flagging logic, but this is not required. See Flagging (flag-module) for details on how to add flagging support.</p>"},{"location":"topics/migrating-to-1.7/#pdf","title":"PDF","text":"<p>The following deprecated XSLT variables have been removed:</p> <ul> <li><code>page-margin-left</code></li> <li><code>page-margin-right</code></li> </ul> <p>XSLT stylesheets have been split to separate specialization topic code and new <code>xsl:import</code> instructions have been added to <code>topic2fo.xsl</code>. Plug-ins which define their own shell stylesheet should be revised to import all the required stylesheet modules.</p> <p>PDF processing used to replace topic <code>shortdesc</code> with map <code>shortdesc</code>, but this behavior was incorrect and was removed to comply with the DITA specification.</p> <p>A new <code>#note-separator</code> variable string was added to facilitate customization.</p>"},{"location":"topics/migrating-to-1.8/","title":"Migrating to release 1.8","text":"<p>In DITA-OT 1.8, certain stylesheets were moved to plug-in specific folders and various deprecated Ant properties, XSLT stylesheets, parameters and modes were removed from the XHTML, PDF and ODT transformations.</p> <p>Stylesheets for the following transformation types have moved to plug-in specific folders:</p> <ul> <li>eclipsehelp</li> <li>htmlhelp</li> <li>javahelp</li> <li>odt</li> <li>xhtml</li> </ul>"},{"location":"topics/migrating-to-1.8/#preprocessing","title":"Preprocessing","text":"<p>The following deprecated Ant properties have been removed:</p> <ul> <li><code>dita.script.dir</code>, use <code>${dita.plugin.*id*.dir}</code> instead</li> <li><code>dita.resource.dir</code>, use <code>${dita.plugin.org.dita.base.dir}/resource</code> instead</li> <li><code>dita.empty</code></li> <li><code>args.message.file</code></li> </ul>"},{"location":"topics/migrating-to-1.8/#xhtml","title":"XHTML","text":"<p>XSLT Java extension <code>ImgUtils</code> has been removed from stylesheets and been replaced with preprocessing module <code>ImageMetadataModule</code>. The old <code>ImgUtils</code> Java classes are still included in the build.</p>"},{"location":"topics/migrating-to-1.8/#pdf","title":"PDF","text":"<p>The following deprecated XSLT stylesheets have been removed:</p> <ul> <li><code>artwork-preprocessor.xsl</code></li> <li><code>otdita2fo_frontend.xsl</code></li> </ul> <p>The following deprecated XSLT templates have been removed:</p> <ul> <li><code>insertVariable.old</code></li> </ul> <p>The following deprecated XSLT modes have been removed:</p> <ul> <li><code>layout-masters-processing</code></li> <li><code>toc-prefix-text</code>, use <code>tocPrefix</code> mode instead</li> <li><code>toc-topic-text</code>, use <code>tocText</code> mode instead</li> </ul> <p>Link generation has been simplified by removing deprecated arguments in favor of <code>args.rellinks</code>. The following deprecated Ant properties have been removed:</p> <ul> <li><code>args.fo.include.rellinks</code></li> </ul> <p>The following XSLT parameters have been removed:</p> <ul> <li><code>antArgsIncludeRelatedLinks</code></li> <li><code>disableRelatedLinks</code></li> </ul> <p>A call to a named template <code>pullPrologIndexTerms.end-range</code> has been added to <code>processTopic*</code> templates to handle topic wide index ranges.</p>"},{"location":"topics/migrating-to-1.8/#legacy-pdf","title":"Legacy PDF","text":"<p>The following deprecated XSLT stylesheets have been removed:</p> <ul> <li><code>dita2fo-shell_template.xsl</code></li> <li><code>topic2fo-shell.xsl</code></li> </ul>"},{"location":"topics/migrating-to-1.8/#odt","title":"ODT","text":"<p>Link generation has been simplified by removing deprecated arguments in favor of <code>args.rellinks</code>. The following deprecated Ant properties have been removed:</p> <ul> <li><code>args.odt.include.rellinks</code></li> </ul> <p>The following XSLT parameters have been added:</p> <ul> <li><code>include.rellinks</code></li> </ul> <p>The following XSLT parameters have been removed:</p> <ul> <li><code>disableRelatedLinks</code></li> </ul>"},{"location":"topics/migrating-to-2.0/","title":"Migrating to release 2.0","text":"<p>In DITA-OT 2.0, XSLT templates were converted to XSLT 2.0, variable typing was implemented, and some older templates were refactored or removed. In addition, the <code>dita</code> command simplifies distribution of plugins by allowing installation from a URL.</p> <p>Note: This topic provides a summary of changes in DITA-OT 2.0 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 2.0 Release Notes.</p>"},{"location":"topics/migrating-to-2.0/#all-transformations-variable-typing","title":"All transformations \u2014 variable typing","text":"<p>XSLT stylesheets were converted to XSLT 2.0. With that change, variable types were also implemented. Plug-ins that change template variable values will need to make the following changes:</p> <ul> <li>Declare the same types defined in the default templates with <code>@as</code>.</li> <li>Ensure that the generated values conform to the declared type.</li> </ul> <p>For example:</p> <pre><code>&lt;xsl:variable name=\"urltest\"&gt;\n&lt;xsl:variable name=\"urltest\" **as=\"xs:boolean\"**&gt;\n</code></pre>"},{"location":"topics/migrating-to-2.0/#all-transformations-refactoring","title":"All transformations \u2014 refactoring","text":"<p>Much of the toolkit code was refactored for release 2.0. Customization changes that were based on a specific template in a previous version of the toolkit might not work because the modified template is no longer used. If this is the case, the changes will need to be reimplemented based on the new XSLT templates.</p>"},{"location":"topics/migrating-to-2.0/#html5","title":"HTML5","text":"<p>A new HTML5 transformation type has been added. Customizations that previously modified the XHTML output to generate valid HTML5 should still work, but basing your customization on the new transformation type might simplify the customization and reduce the work required to maintain compatibility with future versions of the toolkit.</p> <p>Note: The HTML5 transformation was refactored with release 2.2. Before basing your customization on the changes in release 2.0, consider whether you might want to move to release 2.2 instead. See Migrating to release 2.2.</p>"},{"location":"topics/migrating-to-2.0/#plug-in-installation-and-distribution","title":"Plug-in installation and distribution","text":"<p>Plug-ins can now be installed or uninstalled from a ZIP archive using the new <code>dita</code> command. Plug-ins can also be installed from a referenced URL. See Arguments and options for the dita command.</p>"},{"location":"topics/migrating-to-2.1/","title":"Migrating to release 2.1","text":"<p>In DITA-OT 2.1, the <code>insertVariable</code> template was deprecated for PDF transformations and should be replaced with the <code>getVariable</code> template. Various <code>dita.**out.**map.*</code> targets have been deprecated in favor of updated <code>dita.map.*</code> equivalents.</p> <p>Note: This topic provides a summary of changes in DITA-OT 2.1 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 2.1 Release Notes.</p> <p>The custom<code>FileUtils</code> code used to handle input and output in earlier versions of DITA-OT has been replaced with the Apache Commons IO utilities library.</p>"},{"location":"topics/migrating-to-2.1/#deprecated-targets","title":"Deprecated targets","text":"<p>The following build targets have been deprecated and will be removed in an upcoming release:</p> <ul> <li>The <code>help</code> target that includes a reference to the current DITA-OT version during the build process.</li> </ul>"},{"location":"topics/migrating-to-2.1/#preprocessing","title":"Preprocessing","text":"<p>The following Ant properties and generated list files have been deprecated:</p> <ul> <li>imagefile property and <code>image.list</code> file</li> <li>htmlfile property and <code>html.list</code> file</li> </ul> <p>The following pre-processing targets and extension points have been deprecated:</p> <ul> <li>The <code>copy-subsidiary</code> target used to copy subsidiary files</li> <li>The <code>copy-subsidiary-check</code> target used to check for subsidiary files</li> <li>The depend.preprocess.copy-subsidiary.pre extension point used to insert an Ant target before the <code>copy-subsidiary</code> step in the pre-processing stage.</li> </ul> <p>A new<code>dita.parser</code> extension point has been added to allow plug-ins to contribute a custom parser for DITA files. If a custom DITA parser is defined, the preprocessing routines will use it during the gen-list and debug-filter stages to output DITA XML.</p>"},{"location":"topics/migrating-to-2.1/#pdf","title":"PDF","text":"<p>The following template has been deprecated:</p> <ul> <li><code>insertVariable</code>, use <code>getVariable</code> instead</li> </ul> <p>Calls to that template will result in warnings in the build log.</p> <p>To update your plug-in, make the following changes:</p> <pre><code>&lt;xsl:call-template name=\"insertVariable**getVariable**\"&gt;\n  &lt;xsl:with-param name=\"theVariableID**id**\" select=\"*var-id*\"/&gt;\n  &lt;xsl:with-param name=\"theParameters**params**\"&gt;\n    *params*\n  &lt;/xsl:with-param&gt;\n&lt;/xsl:call-template&gt;\n</code></pre>"},{"location":"topics/migrating-to-2.1/#html-based-output-formats","title":"HTML-based output formats","text":"<p>The keydefs variable and the following XSL parameters have been deprecated:</p> <ul> <li>KEYREF-FILE</li> <li>displaytext</li> <li>keys</li> <li>target</li> </ul> <p>The following template modes have been deprecated:</p> <ul> <li><code>pull-in-title</code></li> <li><code>common-processing-phrase-within-link</code></li> </ul>"},{"location":"topics/migrating-to-2.1/#xhtml","title":"XHTML","text":"<p>The <code>dita.**out.**map.xhtml.toc</code> target has been deprecated and should be replaced with the updated <code>dita.map.xhtml.toc</code> equivalent.</p> <p>Keydef processing has been removed from the XHTML rendering code. Keys are now resolved in one preprocessing step, whereas in earlier versions of DITA-OT, the XHTML code returned to the <code>keydef.xml</code> file to look up targets for phrase elements and pull in text when needed.</p> <p>This change affects non-linking elements that can\u2019t take <code>@href</code> attributes, such as <code>&lt;ph&gt;</code>, <code>&lt;keyword&gt;</code>, <code>&lt;cite&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;term&gt;</code>, and <code>&lt;indexterm&gt;</code> (when <code>$INDEXSHOW</code> is active).</p>"},{"location":"topics/migrating-to-2.1/#htmlhelp","title":"HTMLHelp","text":"<p>The <code>dita.**out.**map.htmlhelp.*</code> targets have been deprecated and should be replaced with the updated <code>dita.map.htmlhelp.*</code> equivalents:</p> <ul> <li><code>dita.out.map.htmlhelp.hhp</code>, use <code>dita.map.htmlhelp.hhp</code> instead</li> <li><code>dita.out.map.htmlhelp.hhc</code>, use <code>dita.map.htmlhelp.hhc</code> instead</li> <li><code>dita.out.map.htmlhelp.hhk</code>, use <code>dita.map.htmlhelp.hhk</code> instead</li> </ul>"},{"location":"topics/migrating-to-2.1/#javahelp","title":"JavaHelp","text":"<p>The <code>dita.**out.**map.javahelp.*</code> targets have been deprecated and should be replaced with the updated <code>dita.map.javahelp.*</code> equivalents:</p> <ul> <li><code>dita.out.map.javahelp.toc</code>, use <code>dita.map.javahelp.toc</code> instead</li> <li><code>dita.out.map.javahelp.map</code>, use <code>dita.map.javahelp.map</code> instead</li> <li><code>dita.out.map.javahelp.set</code>, use <code>dita.map.javahelp.set</code> instead</li> <li><code>dita.out.map.javahelp.index</code>, use <code>dita.map.javahelp.index</code> instead</li> </ul>"},{"location":"topics/migrating-to-2.1/#opendocument-text","title":"OpenDocument Text","text":"<p>Support for the args.odt.img.embed parameter has been removed from OpenDocument Text transformations. The previous default behavior was to embed images as Base64-encoded text, but editors do not use this as a default. Instead, office packages such as LibreOffice will convert embedded images into linked images on opening and saving an ODT file.</p>"},{"location":"topics/migrating-to-2.2/","title":"Migrating to release 2.2","text":"<p>In DITA-OT 2.2, the HTML5 transformation was refactored as its own plug-in and separate plug-ins were created for each of the rendering engine-specific PDF transformations.</p> <p>Note: This topic provides a summary of changes in DITA-OT 2.2 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 2.2 Release Notes.</p>"},{"location":"topics/migrating-to-2.2/#html5","title":"HTML5","text":"<p>The HTML5 transformation introduced in release 2.0 as part of the XHTML plug-in has been moved to a separate HTML5 plug-in. Customizations that extended the previous HTML5 output under the XHTML plug-in will probably need to be refactored on the new HTML5 plug-in.</p> <p>Note title processing has been revised to use a common <code>note__title</code> class for note elements of all types. The legacy <code>*\\{$type\\}*title</code> classes (such as <code>.notetitle</code>, <code>.cautiontitle</code>, <code>.tiptitle</code>, etc.) are included for backwards compatibility, but are deprecated and will be removed in an upcoming release. Stylesheets that apply formatting overrides to note titles should be revised to replace the deprecated class selectors with the equivalent descendant selectors, for example <code>.note_note .note__title</code>, <code>.note_caution .note__title</code>, <code>.note_tip .note__title</code>, etc.</p>"},{"location":"topics/migrating-to-2.2/#pdf","title":"PDF","text":"<p>Processing specific to Apache FOP, Antenna House Formatter, and RenderX XEP has been separated into separate plug-ins for each of those rendering engines. Customizations that extended this processing might need to extend the new <code>org.dita.pdf2.fop</code>, <code>org.dita.pdf2.axf</code>, or <code>org.dita.pdf2.xep</code> plug-ins.</p> <p>PDF customizations that are not specific to a rendering engine can continue to extend the <code>org.dita.pdf2</code> plug-in as before.</p> <p>The default format for page numbers in the table of contents (<code>&lt;toc&gt;</code>) was switched to roman to align with <code>&lt;preface&gt;</code> and ensure consistent numbering styles for all <code>&lt;frontmatter&gt;</code> components in <code>&lt;bookmap&gt;</code>. This prevents numbering from switching back and forth between styles in bookmaps where the Preface follows the table of contents. Earlier versions of DITA-OT produced numbering sequences like <code>1,2,3,4,v,vi,7,8</code> in this use case.</p>"},{"location":"topics/migrating-to-2.2/#deprecated-properties","title":"Deprecated properties","text":"<p>The following Ant properties have been deprecated:</p> <ul> <li>user.input.file, use user.input.file.uri instead to specify the input file system path</li> <li>user.input.dir, use user.input.dir.uri instead to specify the input directory system path</li> <li>InputMapDir, use InputMapDir.uri instead to specify the input map directory system path</li> </ul>"},{"location":"topics/migrating-to-2.3/","title":"Migrating to release 2.3","text":"<p>In DITA-OT 2.3, HTML5 table processing has been refactored to use HTML5 best practices and improved CSS properties. In PDF output, table heads and key columns no longer include shading, and unused localization variables have been deprecated. The template for generated error messages has been updated to use a single <code>id</code> variable that contains the entire message ID.</p> <p>Note: This topic provides a summary of changes in DITA-OT 2.3 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 2.3 Release Notes.</p>"},{"location":"topics/migrating-to-2.3/#html5","title":"HTML5","text":"<p>The HTML5 table processing has been refactored to use valid HTML5 markup, HTML5 best practices, and better CSS properties for styling. BEM-style CSS classes are now generated with the name of the containing element, the name of the attribute, and the value of the attribute.</p> <p>Common CSS files are now generated using separate modules for each DITA domain, implemented as Sass partials to better support extensions with CSS frameworks, custom plug-ins and future toolkit versions.</p>"},{"location":"topics/migrating-to-2.3/#html-based-formats","title":"HTML-based formats","text":"<p>The XSLT <code>tm-area</code> named template, which used to toggle rendering of trademark symbols in US English and Asian languages (Japanese, Korean, and both Chinese) but ignore them in all other languages, has been deprecated. Trademark symbols are now rendered uniformly for all languages and the template will be removed in an upcoming release.</p> <p>In previous releases, short descriptions in <code>&lt;abstract&gt;</code> elements were rendered as division elements (<code>&lt;div&gt;</code>), rather than paragraphs (<code>&lt;p&gt;</code>). Processing has been revised to ensure that short descriptions are consistently rendered as paragraphs, regardless of whether they appear in <code>&lt;abstract&gt;</code> elements. Users who have previously implemented custom CSS rules to style <code>div.shortdesc</code> like paragraphs should be able to remove these rules.</p>"},{"location":"topics/migrating-to-2.3/#pdf","title":"PDF","text":"<p>The <code>antiquewhite</code> background color has been removed from table heads and key column contents in <code>&lt;simpletable&gt;</code> and <code>&lt;properties&gt;</code> tables to synchronize presentation with <code>&lt;choicetable&gt;</code> and provide a more uniform customization baseline between PDF output and HTML-based formats.</p> <p>PDF: The I18N Java and XSLT processing code has been merged into single task. This eliminated the need for a <code>stage3.fo</code> file in the temporary directory; instead, <code>topic.fo</code> is generated directly from <code>stage2.fo</code>. If custom plug-ins were implemented to handle <code>stage3.fo</code>, they would need to be updated.</p> <p>Localization variables that are no longer used in PDF processing have been deprecated and will be removed in an upcoming release. PDF customization plug-ins that make use of these variables should plan to refactor accordingly:</p> <ul> <li>Back button title</li> <li>Contents button title</li> <li>Forward button title</li> <li>Index button title</li> <li>Index multiple entries separator</li> <li>Main page button title</li> <li>Next page button title</li> <li>Online help prefix</li> <li>Online Help Search Method And</li> <li>Online Help Search Method Field</li> <li>Online Help Search Method Or</li> <li>Previous page button title</li> <li>Search button title</li> <li>Search Case Sensitive Switch</li> <li>Search Excluded Stop Words Message</li> <li>Search Highlight Switch</li> <li>Search index button title</li> <li>Search index field title</li> <li>Search index next button title</li> <li>Search Search Give No Results Message</li> <li>Search Search in Progress Message</li> <li>Search Stopped Message</li> <li>Search text button title</li> <li>Search text field title</li> <li>Search title</li> <li>Search Whole Words Switch</li> <li>Untitled section</li> </ul> <p>Note: Most of these variables were never used by the PDF process, and most were not supported (or localized) for any language other than English.</p>"},{"location":"topics/migrating-to-2.3/#deprecated-properties-and-targets","title":"Deprecated properties and targets","text":"<p>The following Ant properties have been deprecated:</p> <ul> <li>conreffile</li> </ul> <p>The following preprocessing targets have been deprecated:</p> <ul> <li>conref-check</li> <li>coderef</li> </ul>"},{"location":"topics/migrating-to-2.3/#pre-processing","title":"Pre-processing","text":"<p>The order of the <code>chunk</code> and <code>move-meta-entries</code> pre-processing stages has been switched so that <code>chunk</code> comes first. This ensures that metadata is properly pulled or pushed into the chunked version of DITA topics.</p>"},{"location":"topics/migrating-to-2.3/#generating-error-messages","title":"Generating error messages","text":"<p>Previously, the XSLT <code>output-message</code> named template for generating error messages combined a global <code>msgprefix</code> variable and two parameters to determine the actual message ID. This function has been updated to use a single <code>id</code> variable that contains the entire message ID.</p> <p>Plug-ins that make use of the <code>output-message</code> function should be updated to use the single <code>id</code> variable, as in:</p> <pre><code>&lt;xsl:call-template name=\"output-message\"&gt;\n  &lt;xsl:with-param name=\"id\" select=\"'FULLMESSAGENUMBER'\"/&gt;\n  &lt;xsl:with-param name=\"msgparams\"&gt;optional-message-parameters&lt;/xsl:with-param&gt;\n&lt;/xsl:call-template&gt;\n</code></pre> <p>The <code>msgprefix</code> XSL variable (\u201cDOTX\u201d) has been deprecated and will be removed in an upcoming release.</p>"},{"location":"topics/migrating-to-2.4/","title":"Migrating to release 2.4","text":"<p>In DITA-OT 2.4, the HTML5 transformation was refactored as an independent plug-in that no longer depends on the XHTML plug-in.</p> <p>Note: This topic provides a summary of changes in DITA-OT 2.4 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 2.4 Release Notes.</p>"},{"location":"topics/migrating-to-2.4/#html5","title":"HTML5","text":"<ul> <li>The HTML5 transformation introduced in release 2.0 as part of the XHTML plug-in was moved to a separate HTML5 plug-in in release 2.2, but that version of the HTML5 transformation still depended on the XHTML plug-in for certain common processing.</li> </ul> <p>In release 2.4, all dependencies between HTML5 and XHTML have been removed to ensure that HTML5 processing can be further refactored in the future without affecting XHTML output, or other HTML-based transformations such as eclipsehelp, htmlhelp or javahelp.</p> <pre><code>Customizations that extended the previous HTML5 output under the XHTML plug-in \\(as provided in releases 2.0 and 2.1\\) or the HTML5 plug-in that shipped with release 2.2 will need to be refactored to build on the new HTML5 plug-in.\n</code></pre> <ul> <li> <p>Note title processing was revised in release 2.2 to include a common <code>note__title</code> class for note elements of all types. The legacy <code>*\\{$type\\}*title</code> classes (such as <code>.notetitle</code>, <code>.cautiontitle</code>, <code>.tiptitle</code>, etc.) were included in release 2.2 for backwards compatibility, but have now been removed in release 2.4.</p> <p>Stylesheets that apply formatting overrides to note titles should be revised to replace the deprecated class selectors with the equivalent descendant selectors, for example:</p> <ul> <li><code>.note_note .note__title</code></li> <li><code>.note_caution .note__title</code></li> <li><code>.note_tip .note__title</code></li> </ul> </li> </ul>"},{"location":"topics/migrating-to-2.4/#legacy-plug-ins-removed","title":"Legacy plug-ins removed","text":"<p>DITA-OT 2.4 no longer includes the following legacy transformation plug-ins in the default distribution:</p> Plug-in Source code location DocBook https://github.com/dita-ot/org.dita.docbook Eclipse Content https://github.com/dita-ot/org.dita.eclipsecontent OpenDocument Text https://github.com/dita-ot/org.dita.odt Word RTF https://github.com/dita-ot/org.dita.wordrtf <p>Note: If necessary, legacy plug-ins may be re-installed from earlier DITA-OT distributions, but they are no longer actively maintained or supported by the core toolkit committers. The source code is available on GitHub for anyone interested in maintaining the plug-ins for use with future toolkit versions.</p>"},{"location":"topics/migrating-to-2.5/","title":"Migrating to release 2.5","text":"<p>In DITA-OT 2.5, several frequently-overridden legacy style settings were removed from the default PDF plug-in. A separate plug-in can be used to restore the original settings.</p> <p>Note: This topic provides a summary of changes in DITA-OT 2.5 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 2.5 Release Notes.</p>"},{"location":"topics/migrating-to-2.5/#deprecated-logging-parameters","title":"Deprecated logging parameters","text":"<p>The <code>args.debug</code> and <code>args.logdir</code> properties have been deprecated and will be removed in an upcoming version of DITA-OT.</p> <ul> <li> <p>To enable debug logging, use <code>dita</code> --debug.</p> <p>Attention: Debug logging requires additional resources and can slow down the build process, so it should only be enabled when further details are required to diagnose problems.</p> </li> <li> <p>To write the log to a file, use <code>dita</code> --logfile=file or <code>ant</code> -l file and specify the path to the log file.</p> <p>Unless an absolute path is specified, the value will be interpreted relative to the current directory.</p> </li> </ul>"},{"location":"topics/migrating-to-2.5/#default-pdf-style-improvements","title":"Default PDF style improvements","text":"<p>Several legacy styles have been modified or removed in the default PDF plug-in <code>org.dita.pdf2</code>, including the following:</p> <ul> <li>In task topics with only a single step, the step is now rendered as a simple block (rather than as a list item without a label).</li> <li>Table containers now inherit the initial indentation (<code>start-indent</code>) from the parent elements.</li> <li>Borders and indentation have been removed from <code>&lt;example&gt;</code> elements.</li> <li>Links are no longer italicized.</li> <li>Titles for related link lists have been standardized to use the <code>common.title</code> attribute set (which applies the <code>sans-serif</code> font-family) and bold font weight.</li> <li>Several remaining occurrences of left/right borders, margins, padding, and text alignment now use the corresponding start/end equivalents to better support right-to-left languages.</li> </ul>"},{"location":"topics/migrating-to-2.5/#external-plug-in-for-legacy-pdf-styling","title":"External plug-in for legacy PDF styling","text":"<p>If you have a custom PDF plug-in that explicitly depends on the previous default settings for the aforementioned styles, the <code>org.dita.pdf2.legacy</code> plug-in can be used to restore the pre\u20132.5 styles.</p> Plug-in Source code location <code>org.dita.pdf2.legacy</code> https://github.com/dita-ot/org.dita.pdf2.legacy <p>To install the legacy PDF plug-in, run the following command:</p> <pre><code>`dita` **--install**=`https://github.com/dita-ot/org.dita.pdf2.legacy/archive/2.5.zip`\n</code></pre> <p>Attention: Only install the legacy PDF plug-in if you have a custom PDF plug-in that requires the pre\u20132.5 styles. If your plug-in was designed for DITA-OT 2.4 and does not override these settings, there is no need to install the legacy PDF plug-in.</p>"},{"location":"topics/migrating-to-3.0/","title":"Migrating to release 3.0","text":"<p>DITA-OT 3.0 adds support for Markdown, normalized DITA output, and the alternative authoring formats proposed for Lightweight DITA. The map-first preprocessing approach provides a modern alternative to the default <code>preprocess</code> operation.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.0 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.0 Release Notes.</p>"},{"location":"topics/migrating-to-3.0/#upgrade-stylesheets-to-xslt-20","title":"Upgrade stylesheets to XSLT 2.0","text":"<p>The Saxon project has announced plans to remove XSLT 1.0 support from the Saxon-HE library that ships with DITA-OT:</p> <p>\u2026we\u2019re dropping XSLT 1.0 backwards compatibility mode from Saxon-HE, and hope to eliminate it entirely in due course.</p> <p>https://www.xml.com/news/release-saxon-98/</p> <p>DITA-OT 3.0 and 3.0.1 included Saxon-HE 9.8.0.5, which rejects XSLT stylesheets that specify <code>version=\"1.0\"</code>. Plug-ins with XSLT templates specifying version 1.0 will fail with the message \u201c<code>XSLT 1.0 compatibility mode is not available in this configuration</code>.\u201d</p> <p>To resolve this issue, change any occurrences of <code>&lt;xsl:stylesheet version=\"1.0\"&gt;</code> in custom plug-in stylesheets to at least <code>&lt;xsl:stylesheet version=\"2.0\"&gt;</code>.</p> <p>Tip: DITA-OT 3.0.2 includes Saxon-HE 9.8.0.7, which restores XSLT 1.0 backwards-compatibility mode, but the DITA Open Toolkit project recommends upgrading all stylesheets to XSLT 2.0 to ensure plug-ins remain compatible with future versions of DITA-OT and Saxon-HE.</p>"},{"location":"topics/migrating-to-3.0/#legacy-plug-ins-removed","title":"Legacy plug-ins removed","text":"<p>DITA-OT 3.0 no longer includes the following legacy transformation plug-ins in the default distribution:</p> Plug-in Source code location JavaHelp https://github.com/dita-ot/org.dita.javahelp <p>Note: If necessary, legacy plug-ins may be re-installed from earlier DITA-OT distributions, but they are no longer actively maintained or supported by the core toolkit committers. The source code is available on GitHub for anyone interested in maintaining the plug-ins for use with future toolkit versions.</p> <p>To re-install the JavaHelp plug-in, run the following command:</p> <pre><code>`dita` **--install**=`https://github.com/dita-ot/org.dita.javahelp/archive/2.5.zip`\n</code></pre>"},{"location":"topics/migrating-to-3.0/#map-first-preprocessing","title":"Map-first preprocessing","text":"<p>DITA-OT 3.0 provides a map-first preprocessing option as an alternative to the default <code>preprocess</code> operation. The method, which was introduced in DITA-OT 2.5 as an experimental feature, has been improved and is ready for use in many production scenarios. Map-first-preprocessing provides the same functionality as the default <code>preprocess</code>, but takes a different approach.</p> <p>The internal extension points that run before or after individual steps in the original <code>preprocess</code> pipeline (<code>preprocess.*.pre/preprocess.*.post</code>) are not available in the newer map-first preprocessing pipeline (<code>preprocess2</code>), which is used in the PDF and HTML Help transformations as of DITA-OT 3.0.</p> <p>Tip: See Map-first preprocessing for information on how to use (or test) map-first preprocessing, or revert to the default <code>preprocess</code> target.</p>"},{"location":"topics/migrating-to-3.0/#new-antimport-extension-point","title":"New <code>ant.import</code> extension point","text":"<p>A new extension point has been added to make it easier to add new targets to the Ant processing pipeline.</p> <p>Earlier versions of DITA-OT use the <code>dita.conductor.target.relative</code> to call a wrapper file with a dummy task that imports the Ant project file. This approach is still supported for backwards compatibility, but the simpler <code>ant.import</code> approach should be used for all new customizations.</p> <p>Tip: See Adding a new target to the Ant build process for details.</p>"},{"location":"topics/migrating-to-3.1/","title":"Migrating to release 3.1","text":"<p>DITA-OT 3.1 includes support for DITA 1.3 SVG domain elements, enhanced <code>&lt;codeblock&gt;</code> processing, and incremental improvements to Lightweight DITA processing and PDF output.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.1 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.1 Release Notes.</p>"},{"location":"topics/migrating-to-3.1/#custom-ifunless-attributes-in-ant-scripts","title":"Custom if/unless attributes in Ant scripts","text":"<p>Ant scripts for DITA-OT builds now make use of <code>@if:set</code> and <code>@unless:set</code> attributes in the Ant namespace, which can be used to control whether parameters are passed to XSLT modules. These attributes replace custom implementations of <code>if</code> and <code>unless</code> logic introduced before Ant had this capability.</p> <p>If your plug-ins include Ant scripts that use <code>@if</code> or <code>@unless</code> on <code>&lt;param&gt;</code> elements that pass XSLT parameters, add the following namespace attributes to the root project:</p> <ul> <li><code>xmlns:if</code>=<code>\"ant:if\"</code></li> <li><code>xmlns:unless</code>=<code>\"ant:unless\"</code></li> </ul> <p>In custom Ant build files and in any files that supply parameters to existing DITA-OT XSLT modules, replace all occurrences of <code>if=\"property\"</code> on <code>&lt;param&gt;</code> elements with <code>if**:set**=\"property\"</code> (and <code>unless</code> \u2192 <code>unless**:set**</code> respectively).</p> <pre><code>&lt;root xmlns:if=\"ant:if\" xmlns:unless=\"ant:unless\"&gt;\n  &lt;param name=\"antProperty\" expression=\"${antProperty}\"\n         if**:set**=\"antProperty\"/&gt;\n&lt;/root&gt;\n</code></pre> <p>For more information on passing parameters to existing XSLT steps, see XSLT-parameter extension points.</p>"},{"location":"topics/migrating-to-3.1/#deprecated-properties","title":"Deprecated properties","text":"<p>As of DITA-OT 3.1, the Java class path is managed automatically, meaning you do not (and should not) use explicit references to Java class paths in your build scripts. In particular, the old <code>dost.class.path</code> property has been deprecated and should not be used. If you are migrating older plug-ins that manage their class path directly, you should remove any explicit class path configuration. If your plug-in was not already using the <code>dita.conductor.lib.import</code> extension point to integrate its JAR dependencies you must add it.</p> <p>The effective DITA-OT class path is the combination of the JAR files in the main <code>lib/</code> directory and the plug-in-contributed JARs, which are listed in <code>config/env.sh</code>. The <code>env.sh</code> file is updated automatically when plug-ins are installed or removed.</p> <p>The <code>xml.catalog.files</code> property has been deprecated and should not be used. Replace any such references with the <code>xml.catalog.path</code> instead.</p>"},{"location":"topics/migrating-to-3.1/#pdf-enabling-line-numbers-in-codeblocks","title":"PDF \u2013 Enabling line numbers in codeblocks","text":"<p>The <code>codeblock.generate-line-number</code> template mode default has been changed to check for the <code>show-line-numbers</code> keyword in the <code>@outputclass</code> attribute. Earlier versions of DITA-OT required custom PDF plug-ins to override the template mode to return <code>true()</code>.</p>"},{"location":"topics/migrating-to-3.2/","title":"Migrating to release 3.2","text":"<p>DITA-OT 3.2 includes new command-line options, support for RELAX\u00a0NG parsing and validation, preliminary processing for the XDITA authoring format proposed for Lightweight DITA, and a plug-in registry that makes it easier to discover and install new plug-ins.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.2 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.2 Release Notes.</p>"},{"location":"topics/migrating-to-3.2/#deprecated-targets","title":"Deprecated targets","text":"<p>The configuration-jar Ant target used during the plug-in integration process has been deprecated and may be removed in an upcoming release. This was previously used to package additional configuration files and properties into <code>lib/dost-configuration.jar</code>, but recent versions of DITA-OT include the <code>config</code> directory in the classpath for this purpose, so the configuration JAR is no longer necessary.</p>"},{"location":"topics/migrating-to-3.2/#secure-connections-to-the-plug-in-registry","title":"Secure connections to the plug-in registry","text":"<p>Attention: To ensure data integrity during the plug-in installation process, Transport Layer Security (TLS) will soon be required to access the plug-in registry. If you are using DITA-OT 3.2 or 3.2.1 and are unable to upgrade to the latest version, modify the <code>registry</code> key in the <code>config/configuration.properties</code> file to switch the URI schema to <code>http**s**://</code>, so the entry reads <code>https://plugins.dita-ot.org/</code>.</p> <p>For more information, see Adding plug-ins via the registry.</p>"},{"location":"topics/migrating-to-3.3/","title":"Migrating to release 3.3","text":"<p>DITA-OT 3.3 includes new attribute sets for HTML5 customization, support for custom integration processing, rotated table cells in PDF output, and hazard statements in HTML output.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.3 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.3 Release Notes.</p>"},{"location":"topics/migrating-to-3.3/#secure-connections-to-the-plug-in-registry","title":"Secure connections to the plug-in registry","text":"<p>Attention: To ensure data integrity during the plug-in installation process, Transport Layer Security (TLS) will soon be required to access the plug-in registry. If you are using DITA-OT 3.3, 3.2, or 3.2.1 and are unable to upgrade to the latest version, modify the <code>registry</code> key in the <code>config/configuration.properties</code> file to switch the URI schema to <code>http**s**://</code>, so the entry reads <code>https://plugins.dita-ot.org/</code>.</p> <p>For more information, see Adding plug-ins via the registry.</p>"},{"location":"topics/migrating-to-3.3/#base-plug-in-files-moved-to-plugins-directory","title":"Base plug-in files moved to <code>plugins</code> directory","text":"<p>Various XSLT files and other resources have been moved from the root of the DITA-OT installation directory to the base plug-in directory <code>plugins/org.dita.base</code>.</p> <p>Attention: There is no longer an <code>xsl/</code> directory in the installation root.</p> <p>If your plug-ins use the <code>plugin</code> URI scheme as recommended in the Plug-in coding conventions, this change should not require any modifications to custom plug-in code:</p> <p>In XSLT, use the <code>plugin</code> URI scheme in <code>&lt;xsl:import&gt;</code> and <code>&lt;xsl:include&gt;</code> to reference files in other plug-ins.</p> <p>Instead of:</p> <pre><code>&gt; &lt;xsl:import href=\"../../org.dita.base/xsl/common/output-message.xsl\"/&gt;\n</code></pre> <p>use:</p> <pre><code>&gt; &lt;xsl:import href=\"plugin:org.dita.base:xsl/common/output-message.xsl\"/&gt;\n</code></pre> <p>As with the plug-in directory property in Ant, this allows plug-ins to resolve to the correct directory even when a plug-in moves to a new location. The plug-in is referenced using the syntax <code>plugin:*plugin-id*:*path/within/plugin/file.xsl*</code>.</p>"},{"location":"topics/migrating-to-3.3/#relocated-catalog","title":"Relocated catalog","text":"<p>Along with the other base plug-in files, the <code>catalog-dita.xml</code> file has been moved from the root of the DITA-OT installation directory to <code>plugins/org.dita.base</code>. External systems that rely on this catalog should be updated with the new location. Ant scripts and DITA-OT plug-ins should use the plug-in directory property to refer to the file as <code>${dita.plugin.org.dita.base.dir}/catalog-dita.xml</code>. A placeholder with a <code>&lt;nextCatalog&gt;</code> entry is provided in the original location for backwards compatibility, but this file may be removed in an upcoming release.</p> <pre><code>&lt;nextCatalog catalog=\"plugins/org.dita.base/catalog-dita.xml\"/&gt;\n</code></pre>"},{"location":"topics/migrating-to-3.3/#deprecated-properties","title":"Deprecated properties","text":"<p>The <code>templates</code> key in configuration properties has been deprecated in favor of the <code>&lt;template&gt;</code> element in <code>plugin.xml</code>.</p>"},{"location":"topics/migrating-to-3.3/#new-attribute-sets-for-html5-customization","title":"New attribute sets for HTML5 customization","text":"<p>A series of new attribute sets has been added to the default HTML5 transformation to facilitate customization with additional ARIA roles, attributes, or CSS classes. Attribute sets are provided for:</p> <ul> <li><code>article</code></li> <li><code>banner</code></li> <li><code>footer</code></li> <li><code>main</code></li> <li><code>navigation</code></li> <li><code>toc</code></li> </ul> <p>If you have previously copied XSL templates (or template modes) to custom plug-ins only to add classes required by web frameworks such as Bootstrap or Foundation (or your company CSS), you may be able to simplify your customizations by using the new attribute sets instead of overriding the default templates.</p>"},{"location":"topics/migrating-to-3.4/","title":"Migrating to release 3.4","text":"<p>DITA-OT 3.4 includes an official Docker container image, a separate plug-in for PDF indexing, a new option to skip HTML5 cover pages, and initial support for project files that allow you to define multiple deliverables in advance, and publish them all at once.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.4 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.4 Release Notes.</p>"},{"location":"topics/migrating-to-3.4/#new-indexing-plug-in","title":"New indexing plug-in","text":"<p>DITA-OT 3.4 extracts the PDF indexing code to a separate <code>org.dita.index</code> plug-in, and adds a new <code>depend.org.dita.pdf2.index</code> extension point that can be used to add custom index processing targets to PDF output.</p> <p>The built-in index processing has been disabled and deprecated. If you have overridden index processing via the <code>transform.topic2fo</code> target in the past, you can set the new org.dita.index.skip property to yes and re-enable the <code>transform.topic2fo.index</code> target with <code>&lt;feature extension=\"depend.org.dita.pdf2.index\" value=\"transform.topic2fo.index\"/&gt;</code> in your plug-in configuration.</p> Plug-in Source code location org.dita.index https://github.com/dita-ot/org.dita.index"},{"location":"topics/migrating-to-3.4/#legacy-plug-ins-removed","title":"Legacy plug-ins removed","text":"<p>DITA-OT 3.4 no longer includes the following legacy transformation plug-ins in the default distribution:</p> Plug-in Source code location TocJS https://github.com/dita-ot/com.sophos.tocjs troff https://github.com/dita-ot/org.dita.troff <p>Note: If necessary, legacy plug-ins may be re-installed from earlier DITA-OT distributions, but they are no longer actively maintained or supported by the core toolkit committers. The source code is available on GitHub for anyone interested in maintaining the plug-ins for use with future toolkit versions.</p> <p>To re-install the plug-in(s) from the plug-in registry at dita-ot.org/plugins, run the following command(s):</p> <pre><code>`dita` **--install**=`com.sophos.tocjs`\n`dita` **--install**=`org.dita.troff`\n</code></pre>"},{"location":"topics/migrating-to-3.5/","title":"Migrating to release 3.5","text":"<p>DITA-OT 3.5 includes support for additional input resources, an alternative subcommand syntax for the <code>dita</code> command, and an initial preview of features for the latest draft of the upcoming DITA 2.0 standard.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.5 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.5 Release Notes.</p>"},{"location":"topics/migrating-to-3.5/#new-subcommands","title":"New subcommands","text":"<p>The <code>dita</code> command line interface has been refactored to support subcommands for common operations.</p> <p>Important: The new subcommands supersede the deprecated X-Toolkit\u2013style single-hyphen keyword variants (such as -install), and the corresponding GNU-style option keywords preceded by two hyphens (such as --install).</p> <ul> <li> <p><code>dita install</code></p> <p>Installs or reloads plug-ins (replaces <code>dita</code> --install)</p> </li> <li> <p><code>dita plugins</code></p> <p>Prints a list of installed plug-ins (replaces <code>dita</code> --plugins)</p> </li> <li> <p><code>dita transtypes</code></p> <p>Prints a list of installed transformation types, or output formats (replaces <code>dita</code> --transtypes)</p> </li> <li> <p><code>dita uninstall</code></p> <p>Removes and deletes a plug-in (replaces <code>dita</code> --uninstall)</p> </li> <li> <p><code>dita version</code></p> <p>Prints version information and exits (replaces <code>dita</code> --version)</p> </li> </ul> <p>Tip: The double-hyphen option syntax has been retained for backwards compatibility, so if you use commands like <code>dita</code> --install in scripts, they will still work, but you may want to migrate your scripts to the new subcommand syntax.</p>"},{"location":"topics/migrating-to-3.5/#legacy-constructs-removed","title":"Legacy constructs removed","text":"<p>DITA-OT 3.5 no longer includes the following legacy properties, list files, and targets, which were deprecated in previous releases. These constructs were no longer used in recent releases, and have now been removed entirely.</p> <p>The following Ant targets have been removed from the pre-processing pipeline:</p> <ul> <li><code>mappull</code> and <code>mappull-check</code>, which were used to pull metadata (such as navtitle) into the map from referenced topics prior to DITA-OT 2.2 (merged with <code>move-meta-entries</code>)</li> <li><code>conref-check</code>, deprecated since 2.3</li> <li><code>coderef</code>, which was used to resolve code references in input files prior to 2.3 (merged with <code>topic-fragment</code>)</li> <li><code>copy-subsidiary</code> and <code>copy-subsidiary-check</code>, which were used to copy files to the temporary directory prior to 2.1</li> </ul> <p>Recent DITA-OT versions provide alternative mechanisms to achieve the same results, such as the <code>&lt;ditafileset&gt;</code> element to select resources in the temporary directory.</p> <p>Along with the obsolete targets, the following Ant properties have been removed:</p> <ul> <li><code>canditopicsfile</code></li> <li><code>canditopicslist</code></li> <li><code>conreffile</code></li> <li><code>conreflist</code></li> <li><code>conreftargetsfile</code></li> <li><code>conreftargetslist</code></li> <li><code>copytosourcefile</code></li> <li><code>copytosourcelist</code></li> <li><code>fullditamapandtopicfile</code></li> <li><code>fullditamapandtopiclist</code></li> <li><code>fullditamapfile</code></li> <li><code>fullditamaplist</code></li> <li><code>fullditatopicfile</code></li> <li><code>fullditatopiclist</code></li> <li><code>hrefditatopicfile</code></li> <li><code>hrefditatopiclist</code></li> <li><code>hreftargetsfile</code></li> <li><code>hreftargetslist</code></li> <li><code>htmlfile</code></li> <li><code>htmllist</code></li> <li><code>imagefile</code></li> <li><code>imagelist</code></li> <li><code>outditafilesfile</code></li> <li><code>outditafileslist</code></li> <li><code>resourceonlyfile</code></li> <li><code>resourceonlylist</code></li> <li><code>subjectschemefile</code></li> <li><code>subjectschemelist</code></li> <li><code>subtargetsfile</code></li> <li><code>subtargetslist</code></li> <li><code>user.input.file.listfile</code></li> <li><code>user.input.file</code></li> </ul> <p>The following obsolete list files are no longer generated in the temporary directory:</p> <ul> <li><code>canditopics.list</code></li> <li><code>conref.list</code></li> <li><code>conreftargets.list</code></li> <li><code>copytosource.list</code></li> <li><code>fullditamap.list</code></li> <li><code>fullditamapandtopic.list</code></li> <li><code>fullditatopic.list</code></li> <li><code>hrefditatopic.list</code></li> <li><code>hreftargets.list</code></li> <li><code>html.list</code></li> <li><code>image.list</code></li> <li><code>outditafiles.list</code></li> <li><code>resourceonly.list</code></li> <li><code>subjectscheme.list</code></li> <li><code>subtargets.list</code></li> <li><code>user.input.file.list</code></li> <li><code>usr.input.file.list</code></li> </ul> <p>For example, if your plug-in previously used the <code>fullditatopicfile</code> to select resources in the temporary directory like this:</p> <pre><code>&lt;xslt basedir=\"${dita.temp.dir}\"\n      destdir=\"${output.dir}\"\n      includesfile=\"${dita.temp.dir}${file.separator}${fullditatopicfile}\"\n      style=\"${args.xsl}\"&gt;\n  [...]\n&lt;/xslt&gt;\n</code></pre> <p>With DITA-OT 2.4 or newer, use the <code>&lt;ditafileset&gt;</code> element instead:</p> <pre><code>&lt;xslt basedir=\"${dita.temp.dir}\"\n      destdir=\"${output.dir}\"\n      style=\"${args.xsl}\"&gt;\n  &lt;ditafileset format=\"dita\" processingRole=\"normal\"/&gt;\n  [...]\n&lt;/xslt&gt;\n</code></pre> <p>If your plug-in previously used the <code>user.input.file.listfile</code> to process the start map like this:</p> <pre><code>&lt;xslt [...]\n      includesfile=\"${dita.temp.dir}${file.separator}${user.input.file.listfile}\"/&gt;\n</code></pre> <p>Use the <code>&lt;ditafileset&gt;</code> element as follows:</p> <pre><code>&lt;xslt [...] &gt;\n  &lt;ditafileset input=\"true\" format=\"ditamap\"/&gt;\n&lt;/xslt&gt;\n</code></pre>"},{"location":"topics/migrating-to-3.5/#adjusting-output-file-names","title":"Adjusting output file names","text":"<p>Two new parameters can be used to dynamically adjust the names and locations of output files in transformations that use the map-first pre-processing routine (<code>preprocess2</code>).</p> <p>These parameters can be passed on the command line, or included in a custom plug-in via <code>&lt;property&gt;</code> elements in an Ant script as described in Adjusting file names in map-first pre-processing.</p> <ul> <li>Use result.rewrite-rule.class to rewrite filenames with a Java class that implements the <code>org.dita.dost.module.RewriteRule</code> interface</li> <li>Use result.rewrite-rule.xsl to rewrite via an XSLT stylesheet</li> </ul>"},{"location":"topics/migrating-to-3.6/","title":"Migrating to release 3.6","text":"<p>DITA-OT 3.6 includes performance enhancements such as processing in parallel and in memory, support for PDF changebars with Apache\u2122 FOP, and an updated preview of features for the latest draft of the upcoming DITA 2.0 standard, including the <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> elements, and the new emphasis domain.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.6 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.6 Release Notes.</p>"},{"location":"topics/migrating-to-3.6/#parallel-processing","title":"Parallel processing","text":"<p>Preprocessing module code can now be run in parallel by setting the parallel parameter to true. The performance benefits this option provides depend heavily on the source file set, the DITA features used in the project, and the computer doing the processing, but under the right circumstances, you may see notable improvements when this option is enabled.</p>"},{"location":"topics/migrating-to-3.6/#in-memory-processing","title":"In-memory processing","text":"<p>DITA-OT 3.6 introduces a new Store API with preview support for in-memory processing. The Cache Store can be activated by setting the store-type parameter to memory. In-memory processing provides performance advantages in I/O bound environments such as cloud computing platforms, where processing time depends primarily on how long it takes to read and write temporary files. For more information, see Store API \u2013 Processing in memory.</p>"},{"location":"topics/migrating-to-3.6/#caching-dita-class-instances","title":"Caching DITA class instances","text":"<p>The DITA-OT Java code uses a new caching <code>DitaClass.getInstance(cls)</code> factory method rather than generating <code>DitaClass</code> instances directly. This allows previously created instances to be re-used, which reduces the number of instances that need to be created.</p> <p>Important: Custom plug-ins that use the <code>DitaClass</code> constructor in Java code should be updated to use the <code>getInstance</code> factory method instead.</p>"},{"location":"topics/migrating-to-3.6/#pdf-changebars-with-apache-fop","title":"PDF changebars with Apache FOP","text":"<p>For DITA-OT 3.4, the bundled Apache\u2122 Formatting Objects Processor library was upgraded to version 2.4, which included support for changebars, but those features were not yet enabled in DITA-OT 3.4 pending further testing. DITA-OT 3.6 removes the FOP-specific overrides that disabled changebars in earlier versions, allowing the default PDF2 flagging routines to be applied when generating PDFs with FOP. For details, see Generating revision bars.</p> <p>Plug-ins that implemented custom FOP flagging by overriding the <code>org.dita.pdf2.fop/xsl/fo/flagging_fop.xsl</code> stylesheet in prior versions will need to be updated, as this file is no longer available in DITA-OT 3.6. #3511, #3591</p>"},{"location":"topics/migrating-to-3.6/#dublin-core-metadata-removed-from-html5","title":"Dublin Core metadata removed from HTML5","text":"<p>Up to version 3.5, DITA-OT included the Dublin Core Metadata Element Set in both XHTML and HTML5 output. DITA-OT 3.6 no longer generates Dublin Core metadata in HTML5 output.</p> <p>Tip: If necessary, the org.dita.html5.dublin-core plug-in can be installed from the plug-in registry at dita-ot.org/plugins to add Dublin Core metadata to HTML5.</p> <p>To install the plug-in, run the following command:</p> <pre><code>`dita install` org.dita.html5.dublin-core\n</code></pre>"},{"location":"topics/migrating-to-3.6/#legacy-style-attributes-moved-to-css","title":"Legacy style attributes moved to CSS","text":"<p>Remaining inline style attributes were removed from HTML5 code, which prevented custom plug-ins from overriding the presentation of the corresponding elements, including:</p> <ul> <li><code>&lt;line-through&gt;</code> and <code>&lt;overline&gt;</code> elements</li> <li>syntax diagrams</li> <li>long quote citations</li> <li>Boolean states</li> </ul> <p>These changes move the default presentation rules to CSS to allow users to override these styles in custom stylesheets. The output is visually equivalent to the results generated by previous toolkit versions.</p> <p>Important: In publishing environments that do not use the default common CSS files, these styles may need to be implemented in custom stylesheets.</p>"},{"location":"topics/migrating-to-3.6/#xsl-variable-msgprefix-removed","title":"XSL variable <code>msgprefix</code> removed","text":"<p>The <code>msgprefix</code> variable (\u201cDOTX\u201d) has been deprecated since DITA-OT 2.3 and is now removed from DITA-OT 3.6. For more information, see Migrating to release 2.3.</p>"},{"location":"topics/migrating-to-3.7/","title":"Migrating to release 3.7","text":"<p>DITA-OT 3.7 includes stable IDs in re-used content, a common variable format for generated text strings, and an updated preview of features for the latest draft of the upcoming DITA 2.0 standard, such as the new \u201ccombine\u201d chunk action, the <code>&lt;titlealt&gt;</code> element, and the alternative titles domain.</p> <p>Note: This topic provides a summary of changes in DITA-OT 3.7 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 3.7 Release Notes.</p>"},{"location":"topics/migrating-to-3.7/#common-format-for-generated-text","title":"Common format for generated text","text":"<p>Prior to DITA-OT 3.7, there were two different XML structures for adding or modifying generated text (gentext). The base plug-in org.dita.base and any custom overrides defined via the dita.strings.xsl extension point used a root element <code>&lt;strings&gt;</code>, with individual strings in <code>&lt;str&gt;</code> elements with <code>@name</code> attributes. This format was previously used for HTML, and all other output formats except PDF.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;strings xml:lang=\"en-US\"&gt;\n  &lt;str name=\"String1\"&gt;English generated text&lt;/str&gt;\n&lt;/strings&gt;\n</code></pre> <p>The PDF plug-in org.dita.pdf2 used a root element <code>&lt;vars&gt;</code> with an XML namespace, and strings in <code>&lt;variable&gt;</code> elements with <code>@id</code> attributes.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;vars xmlns=\"http://www.idiominc.com/opentopic/vars\"&gt;\n  &lt;variable id=\"String1\"&gt;English generated text&lt;/variable&gt;\n&lt;/vars&gt;\n</code></pre> <p>Starting with DITA-OT 3.7, these structures have been deprecated and replaced with a new unified format. All files now use <code>&lt;variables&gt;</code> as the root element, with the <code>&lt;variable&gt;</code> elements previously used in PDF strings. The new format supports the XSL parameters used by the earlier PDF strings format to pass dynamic information such as chapter numbers or figure titles.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;variables&gt;\n  &lt;variable id=\"String1\"&gt;English generated text&lt;/variable&gt;\n&lt;/variables&gt;\n</code></pre> <p>The old formats are still supported, but plug-in developers should update any generated text files to reflect the new structure, as support for the old formats may be removed in a future release. #3817</p>"},{"location":"topics/migrating-to-3.7/#css-precedence","title":"CSS precedence","text":"<p>The order of elements in the <code>&lt;head&gt;</code> element of the HTML template files was changed to facilitate overrides. The common CSS stylesheets and any custom CSS files specified via args.css now come after the contents of the custom header file specified via args.hdf. This change better supports use cases in which the custom header file is used to insert references to external CSS stylesheets for frameworks like Bootstrap. In previous versions of DITA-OT, framework styles took precedence over any equivalent rules in the user\u2019s custom stylesheet. This change allows rules in custom CSS files specified via args.css to override any of the framework styles as necessary.</p>"},{"location":"topics/migrating-to-3.7/#deprecated-legacy-gen-user-templates","title":"Deprecated legacy <code>gen-user</code> templates","text":"<p>The legacy <code>gen-user</code> templates that were originally used to add content to the <code>&lt;head&gt;</code> element have been deprecated and will be removed in a future release. For each of these templates, parameter-based customizations are available that can be used to specify files that contain content that extends the default processing. #3835</p> <ul> <li><code>gen-user-head</code> \u2192 use args.hdf instead</li> <li><code>gen-user-header</code> \u2192 use args.hdr</li> <li><code>gen-user-footer</code> \u2192 use args.ftr</li> <li><code>gen-user-scripts</code> \u2192 use args.hdf</li> <li><code>gen-user-styles</code> \u2192 use args.css</li> </ul>"},{"location":"topics/migrating-to-3.7/#ancestor-links","title":"Ancestor links","text":"<p>The mappull processing step has changed how related links are generated with args.rellinks. Starting in 3.7, noparent will not generate any ancestor links and nofamily will not generate sibling, cousin, ancestor, or descendant links.</p> <p>Prior to 3.7, args.rellinks=all did not actually include all links. Now it will. As in previous versions, the default value for PDF output is nofamily, and other output formats include all link roles except <code>ancestor</code> links.</p> <p>The default processing sets the internal Ant property include.rellinks to <code>#default parent child sibling friend next previous cousin descendant sample external other</code>.</p>"},{"location":"topics/migrating-to-3.7/#toc-navigation-role","title":"ToC navigation role","text":"<p>Table of contents navigation in HTML5 output used a <code>&lt;nav&gt;</code> element with the ARIA <code>@role</code> attribute set to <code>toc</code>. Certain accessibility tools flagged this as an error. The invalid role has been replaced with the <code>navigation</code> landmark role. A new <code>toc</code> class allows custom CSS styles to target the ToC navigation. CSS rules that use the <code>nav[role='toc']</code> selector can be simplified to <code>nav.toc</code>.</p>"},{"location":"topics/migrating-to-3.7/#common-attributes-mode","title":"Common attributes mode","text":"<p>A <code>commonattributes</code> mode was added to the HTML5, PDF, and XHTML plug-ins to allow for easier extension. This is a backwards compatible change, however, existing plug-ins should be changed to use the new <code>commonattributes</code> mode.</p> <pre><code>&lt;xsl:template name=\"commonattributes\"&gt;\n  &lt;!-- whole copy of commonattributes named template with customizations --&gt;\n&lt;/xsl:template&gt;\n</code></pre> <pre><code>&lt;xsl:template match=\"@* | node()\" mode=\"commonattributes\"&gt;\n  &lt;xsl:param name=\"default-output-class\" as=\"xs:string*\"/&gt;\n  &lt;xsl:next-match&gt;\n    &lt;xsl:with-param name=\"default-output-class\" select=\"$default-output-class\"/&gt;\n  &lt;/xsl:next-match&gt;\n  &lt;!-- customizations --&gt;\n&lt;/xsl:template&gt;\n</code></pre>"},{"location":"topics/migrating-to-3.7/#xsl-modes","title":"XSL modes","text":"<p>The HTML5 stylesheets were updated to use XSL modes instead of named templates.</p> <p>This is a backwards compatible change, however, existing plug-ins should be changed to use modes instead of named templates for:</p> <ul> <li><code>copyright</code></li> <li><code>gen-endnotes</code></li> <li><code>generateDefaultMeta</code></li> <li><code>generateCssLinks</code></li> <li><code>generateChapterTitle</code></li> <li><code>processHDF</code></li> <li><code>generateBreadcrumbs</code></li> <li><code>processHDR</code></li> <li><code>processFTR</code></li> <li><code>generateCharset</code></li> </ul>"},{"location":"topics/migrating-to-4.0/","title":"Migrating to release 4.0","text":"<p>DITA-OT 4.0 requires Java 17 and includes a new plug-in for easier PDF customization, project file improvements, updates to LwDITA processing, and support for the split chunking feature in the latest draft of the upcoming DITA 2.0 standard.</p> <p>Note: This topic provides a summary of changes in DITA-OT 4.0 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 4.0 Release Notes.</p>"},{"location":"topics/migrating-to-4.0/#dita-ot-now-requires-java-17","title":"DITA-OT now requires Java 17","text":"<p>DITA-OT 4.1 is designed to run on Java version 17 or later and built and tested with the Open Java Development Kit (OpenJDK). Compatible Java distributions are available from multiple sources:</p> <ul> <li>You can download the Oracle JRE or JDK from oracle.com/java under commercial license.</li> <li>Eclipse Temurin is the free OpenJDK distribution available from adoptium.net.</li> <li>Free OpenJDK distributions are also provided by Amazon Corretto, Azul Zulu, and Red Hat.</li> </ul> <p>Note: The Java virtual machine is generally backwards compatible, so class files built with earlier versions should still run correctly with Java 17 and DITA-OT 4.1. If your DITA-OT installation contains plug-ins with custom Java code, you may need to recompile these with Java 17\u200a\u2014\u200abut in most cases, this step should not be necessary.</p>"},{"location":"topics/migrating-to-4.0/#deprecated-attribute-set-reflection-in-pdf2","title":"Deprecated attribute set reflection in PDF2","text":"<p>The legacy attribute set reflection in PDF2 has been replaced with code that generates new attribute sets directly. This change is backwards-compatible as the old attribute set reflection code has been retained, but PDF2 now uses the new attribute set generation mechanism everywhere reflection was used. Custom plug-ins that still use reflection should be updated to the new approach, as the legacy code may be removed in a future version. #3827, #3829</p>"},{"location":"topics/migrating-to-4.0/#code-references-now-default-to-utf-8-encoding","title":"Code references now default to UTF-8 encoding","text":"<p>The default character set for code references has been changed from the system default encoding to UTF-8.</p> <p>This allows a wider range of characters to be used without needing to specify the <code>@format</code> attribute on the <code>&lt;coderef&gt;</code> element as described in character set definition or change the default encoding in the <code>configuration.properties</code> file. #4046</p> <p>Note: If you have code references that require a different encoding, use either of these mechanisms to specify the character set explicitly.</p>"},{"location":"topics/migrating-to-4.0/#deprecated-place-tbl-lbl-template-in-html5","title":"Deprecated <code>place-tbl-lbl</code> template in HTML5","text":"<p>The <code>place-tbl-lbl</code> template that was originally used to define table titles in XHTML has been deprecated in HTML5 processing and will be removed in a future release. This template was carried over from XHTML code (which still has a copy that is used), but the copy in HTML5 is not called. #3435, #4056</p>"},{"location":"topics/migrating-to-4.1/","title":"Migrating to release 4.1","text":"<p>DITA-OT 4.1 includes a new version of the Lightweight DITA plug-in with significant enhancements to Markdown processing, and updates for the latest DITA 2.0 draft standard.</p> <p>Note: This topic provides a summary of changes in DITA-OT 4.1 that may require modifications to custom stylesheets or plug-ins. For more information on changes in this release, see the DITA-OT 4.1 Release Notes.</p>"},{"location":"topics/migrating-to-4.1/#legacy-tt-style-attributes-moved-to-css","title":"Legacy <code>&lt;tt&gt;</code> style attributes moved to CSS","text":"<p>The HTML5 plug-in has been updated to remove the remaining inline style attributes that prevented custom plug-ins from overriding the monospace font presentation of teletype <code>&lt;tt&gt;</code> elements.</p> <p>These changes move the default teletype styling to CSS to allow users to override the presentation in custom stylesheets. The output is visually equivalent to the results generated by previous toolkit versions.</p> <p>Important: In publishing environments that do not use the default common CSS files, these styles may need to be implemented in custom stylesheets.</p>"},{"location":"topics/migration/","title":"Migrating customizations","text":"<p>If you have XSL transformation overrides, plug-ins or other customizations written prior to DITA-OT 4.1, you may need to make changes to ensure your overrides work properly with the latest toolkit versions.</p> <p>In some cases, you may be able to remove old code that is no longer needed. In other cases, you may need to refactor your code to point to the modified extension points, templates or modes in recent toolkit versions.</p> <p>When migrating customizations, identify the version of the toolkit you're currently using (base version) and the version of the toolkit you want to migrate to (target version). Then, review all of the migration changes described in all of the versions from the base through the target. For instance, if you're currently on 2.2 and want to move to 3.3, you should review all of the changes in 2.3 through 3.3. You may want to start at the oldest version and read forward so you can chronologically follow the changes, since it is possible that files or topics have had multiple changes.</p> <p>Note:</p> <p>DITA-OT releases follow semantic versioning guidelines. Version numbers use the major.minor.patch syntax, where major versions may include incompatible API changes, minor versions add functionality in a backwards-compatible manner and patch versions are maintenance releases that include backwards-compatible bug fixes.</p> <p>Custom plug-ins developed for a previous major version may require changes to work correctly with recent toolkit versions. Most plug-ins should be compatible with subsequent minor and patch versions of the major release for which they were originally developed.</p> <p>Related information </p> <p>Making the migration leap: jumping across versions to the latest DITA-OT - Robert D. Anderson</p> <p>Gotcha! Upgrading PDF plugins to DITA-OT 2.x</p>"},{"location":"topics/other-errors/","title":"Other error messages","text":"<p>In addition to error messages that DITA Open Toolkit generates, you might also encounter error messages generated by Java or other tools.</p>"},{"location":"topics/other-errors/#out-of-memory-error","title":"Out of Memory error","text":"<p>In some cases, you might receive a message stating the build has failed due to an <code>Out of Memory</code> error. Try the following approaches to resolve the problem:</p> <ol> <li>Increase the memory available to Java.</li> <li>Reduce memory consumption by setting the generate-debug-attributes option to <code>false</code>. This option is set in the <code>lib/configuration.properties</code> file. This will disable debug attribute generation (used to trace DITA-OT error messages back to source files) and will reduce memory consumption.</li> <li>Set <code>dita.preprocess.reloadstylesheet</code> Ant property to <code>true</code>. This will allow the XSLT processor to release memory when converting multiple files.</li> <li>Run the transformation again.</li> </ol>"},{"location":"topics/other-errors/#unsupportedclassversionerror","title":"UnsupportedClassVersionError","text":"<p>If you receive a <code>java.lang.UnsupportedClassVersionError</code> error message with an <code>Unsupported major.minor version</code> and a list of Java classes, make sure your system meets the minimum Java requirements as listed in the Release Notes and installation instructions.</p>"},{"location":"topics/other-errors/#unable-to-locate-toolsjar","title":"Unable to locate tools.jar","text":"<p>If a Java Runtime Environment (JRE) is used when building output via Ant, the <code>Unable to locate tools.jar</code> error may appear. This message is safe to ignore, since DITA-OT does not rely on any of the functions in this library. If a Java Development Kit (JDK) is also installed, setting the JAVA_HOME environment variable to the location of the JDK will prevent this message from appearing.</p> <p>Related information </p> <p>Increasing Java memory allocation</p> <p>Other parameters</p> <p>DITA Open Toolkit 4.1 Release Notes</p> <p>Installing DITA Open Toolkit</p>"},{"location":"topics/output-formats/","title":"DITA-OT transformations (output formats)","text":"<p>DITA Open Toolkit ships with several core transformations that convert DITA content to different output formats. Additional formats are available from the plug-in registry at dita-ot.org/plugins.</p> <p>Tip: For information on how to install other formats, see Adding and removing plug-ins.</p>"},{"location":"topics/overriding-strings/","title":"Overriding strings","text":"<p>Override the default strings in the toolkit when you want to replace an existing string with one of your own; for example, it could be used to reset the English string \u201cFigure\u201d to \u201cFig.\u201d</p> <ol> <li> <p>Copy this file to your plug-in.</p> <ul> <li>non-PDF output: <code>plugins/org.dita.base/xsl/common/strings.xml</code></li> <li>PDF output: <code>plugins/org.dita.pdf2/cfg/common/vars/strings.xml</code></li> <li>In your plug-in, edit <code>strings.xml</code> to contain references to the language files you want to override.</li> </ul> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!-- Provide strings for my plug-in; this plug-in supports      English and German. --&gt; &lt;langlist&gt;   &lt;lang xml:lang=\"en\"     filename=\"strings-en-us.xml\"/&gt;   &lt;lang xml:lang=\"en-US\"  filename=\"strings-en-us.xml\"/&gt;   &lt;lang xml:lang=\"de\"     filename=\"strings-de-de.xml\"/&gt;   &lt;lang xml:lang=\"de-DE\"  filename=\"strings-de-de.xml\"/&gt; &lt;/langlist&gt;</code></p> </li> <li> <p>Copy the language file from you want to override. Paste it into your plug-in's <code>xsl/common</code> or <code>cfg/common/vars</code> directory.</p> <p>Language files are found in:</p> <ul> <li>non-PDF output: <code>plugins/org.dita.base/xsl/common/</code></li> <li>PDF output: <code>plugins/org.dita.pdf2/cfg/common/vars/</code></li> <li>Open the language file. Remove all of the variables except those you want to override.</li> </ul> <p>By removing the variables you will not override, you limit where variables are defined in the toolkit while making your file easier to maintain.</p> </li> <li> <p>Change the contents of the variable to your desired text.</p> <p>Do not modify the <code>@id</code> attribute.</p> <p><code>&lt;variables&gt;    &lt;variable id=\"Figure\"&gt;Fig.&lt;/variable&gt; &lt;/variables&gt;</code></p> </li> <li> <p>Update your <code>plugin.xml</code> file to extend the strings available.</p> <p><code>&lt;plugin id=\"com.example.your-plugin\"&gt;   &lt;feature extension=\"dita.xsl.strings\" file=\"xsl/common/strings.xml\"/&gt; &lt;/plugin&gt;</code></p> <p>Your overrides are available to your stylesheets. For example, if processing in a context where the <code>@xml:lang</code> value is <code>en-US</code>, the following call returns \u201cFig.\u201d, because it was defined as the text for the variable with <code>@id</code> value of <code>Figure</code> in step 5, which overrides the default text found in org.dita.base.</p> <p><code>&lt;xsl:call-template name=\"getVariable\"&gt;   &lt;xsl:with-param name=\"id\" select=\"Figure\"/&gt; &lt;/xsl:call-template&gt;</code></p> </li> </ol> <p>Related information </p> <p>How to add or modify generated text strings</p>"},{"location":"topics/pdf-customization-approaches/","title":"PDF customization approaches","text":"<p>Various methods may be used to customize the PDF output that DITA Open Toolkit produces. Each of these approaches have advantages and shortcomings that should be considered when preparing a customization project.</p> <p>Note: Some of these methods are considered \u201canti-patterns\u201d with disadvantages that outweigh their apparent appeal. In most cases, you should create a custom PDF plug-in.</p>"},{"location":"topics/pdf-customization-approaches/#why-not-edit-default-files","title":"Why not edit default files?","text":"<p>When first experimenting with PDF customization, novice users are often tempted to simply edit the default <code>org.dita.pdf2</code> files in place to see what happens.</p> <p>As practical as this approach may seem, the DITA-OT project does not recommend changing any of the files in the default plug-ins.</p> <p>While this method yields quick results and can help users to determine which files and templates control various aspects of PDF output, it quickly leads to problems, as any errors may prevent the toolkit from generating PDF output.</p> <p>Warning: Any changes made in this fashion would be overwritten when upgrading to newer versions of DITA-OT, so users that have customized their toolkit installation in this way are often \u201cstuck\u201d on older versions of the toolkit and unable to take advantage of improvements in recent versions of DITA-OT.</p>"},{"location":"topics/pdf-customization-approaches/#using-the-customization-folder","title":"Using the <code>Customization</code> folder","text":"<p>The original Idiom plug-in used its own extension mechanism to provide overrides to the PDF transformation. With this approach, a dedicated folder within the plug-in is used to store customized files.</p> <p>Files in the <code>org.dita.pdf2/Customization</code> folder can override their default counterparts, allowing users to adjust certain aspects of PDF output without changing any of the plug-in\u2019s default files, or specifying additional parameters when generating output.</p> <p>Important: While this approach is slightly better than editing default files in place, it can still cause problems when upgrading the toolkit to a new version. Since the <code>Customization</code> folder is located within the <code>org.dita.pdf2</code> plug-in\u2019s parent directory, users must take care to preserve the contents of this folder when upgrading to new toolkit versions.</p> <p>Although recent versions of DITA-OT still support this mechanism to ensure backwards compatibility, this practice is deprecated in favor of custom PDF plug-ins.</p> <p>Tip: Users who have used the <code>Customization</code> folder to modify the default PDF output are encouraged to create a custom PDF plug-in instead. In many cases, this may be as simple as copying the contents of the <code>Customization</code> folder to a new subfolder in the <code>plugins</code> folder and creating the necessary <code>plugin.xml</code> file and an Ant script to define the transformation type.</p>"},{"location":"topics/pdf-customization-approaches/#specifying-an-external-customization-directory","title":"Specifying an external customization directory","text":"<p>To ensure that overrides in customization folders are not overwritten when upgrading DITA-OT to a new release, an external customization directory can be specified at build time or in build scripts via the customization.dir parameter.</p> <p>This method is preferable to the use of the <code>org.dita.pdf2/Customization</code> folder, as the contents of external folders are unaffected when upgrading DITA-OT. In distributed environments, users can use local installations of DITA-OT, yet still take advantage of common customizations stored in a network location available to the entire team, such as a shared drive.</p> <p>It can also be useful in environments where corporate policy, CMS permissions, or network access rights prevent changes to the toolkit installation, which may prohibit the installation of custom plug-ins.</p> <p>Tip: Users who specify external customization directories via customization.dir are encouraged to create a custom PDF plug-in if possible.</p>"},{"location":"topics/pdf-customization-approaches/#combining-custom-plug-ins-customization-directories","title":"Combining custom plug-ins &amp; customization directories","text":"<p>A common custom plug-in may be used to store base overrides that are applicable to all company publications, and the customization.dir parameter can be passed at build time to override individual settings as necessary for a given project or publication.</p> <p>In this case, any settings in the customization directory will take precedence over their counterparts in the custom plug-in or default <code>org.dita.pdf2</code> plug-in.</p> <p>This approach allows a single custom plug-in to be shared between multiple publications or the entire company, without the need to create additional plug-in dependencies per project.</p> <p>However, the use of multiple customization mechanisms can make it difficult to debug the precedence cascade and determine the origin of local formatting or processing overrides.</p> <p>Tip: In most scenarios, the use of dedicated PDF customization plug-ins is preferable. Common customizations can be bundled in one plug-in, and any project-specific overrides can be maintained in separate plug-ins that build on the base branding or other settings in the common custom plug-in.</p> <p>Related information </p> <p>Custom PDF plug-ins</p> <p>PDF themes</p>"},{"location":"topics/pdf-customization-example/","title":"Example: Creating a simple PDF plug-in","text":"<p>This scenario walks through the process of creating a very simple plug-in (<code>com.example.print-pdf</code>) that creates a new transformation type: print-pdf.</p> <p>The print-pdf transformation has the following characteristics:</p> <ul> <li>Uses A4 paper</li> <li>Renders figures with a title at the top and a description at the bottom</li> <li>Removes the period after the number for an ordered-list item</li> <li> <p>Use em dashes as the symbols for unordered lists</p> </li> <li> <p>In the <code>plugins</code> directory, create a directory named <code>com.example.print-pdf</code>.</p> </li> <li> <p>In the new <code>com.example.print-pdf</code> directory, create a plug-in configuration file (<code>plugin.xml</code>) that declares the new print-pdf transformation and its dependencies.</p> <p>``` &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;?xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;</p> <p>  ```</p> </li> <li> <p>Add an Ant script (<code>integrator.xml</code>) to define the transformation type.</p> <p><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project&gt;   &lt;target name=\"dita2print-pdf\"        depends=\"dita2print-pdf.init,                 dita2pdf2\"/&gt;   &lt;target name=\"dita2print-pdf.init\"&gt;     &lt;property name=\"customization.dir\"           location=\"${dita.plugin.com.example.print-pdf.dir}/cfg\"/&gt;    &lt;/target&gt; &lt;/project&gt;</code></p> </li> <li> <p>In the new plug-in directory, add a <code>cfg/catalog.xml</code> file that specifies the custom XSLT style sheets.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;catalog prefer=\"system\"          xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\"&gt;   &lt;uri name=\"cfg:fo/attrs/custom.xsl\" uri=\"fo/attrs/custom.xsl\"/&gt;   &lt;uri name=\"cfg:fo/xsl/custom.xsl\" uri=\"fo/xsl/custom.xsl\"/&gt; &lt;/catalog&gt;</code></p> </li> <li> <p>Create the <code>cfg/fo/attrs/custom.xsl</code> file, and add attribute and variable overrides to it.</p> <p>For example, add the following variables to change the page size to A4.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"                 version=\"2.0\"&gt;   &lt;!-- Change page size to A4 --&gt;   &lt;xsl:variable name=\"page-width\"&gt;210mm&lt;/xsl:variable&gt;   &lt;xsl:variable name=\"page-height\"&gt;297mm&lt;/xsl:variable&gt; &lt;/xsl:stylesheet&gt;</code></p> </li> <li> <p>Create the <code>cfg/fo/xsl/custom.xsl</code> file, and add XSLT overrides to it.</p> <p>For example, the following code changes the rendering of <code>&lt;figure&gt;</code> elements.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"                 xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"                 xmlns:fo=\"http://www.w3.org/1999/XSL/Format\"                 version=\"2.0\"&gt;   &lt;!-- Move figure title to top and description to bottom --&gt;   &lt;xsl:template match=\"*[contains(@class,' topic/fig ')]\"&gt;     &lt;fo:block xsl:use-attribute-sets=\"fig\"&gt;       &lt;xsl:call-template name=\"commonattributes\"/&gt;       &lt;xsl:if test=\"not(@id)\"&gt;         &lt;xsl:attribute name=\"id\"&gt;           &lt;xsl:call-template name=\"get-id\"/&gt;         &lt;/xsl:attribute&gt;       &lt;/xsl:if&gt;       &lt;xsl:apply-templates select=\"*[contains(@class,' topic/title ')]\"/&gt;       &lt;xsl:apply-templates select=\"*[not(contains(@class,' topic/title ') or contains(@class,' topic/desc '))]\"/&gt;       &lt;xsl:apply-templates select=\"*[contains(@class,' topic/desc ')]\"/&gt;     &lt;/fo:block&gt;   &lt;/xsl:template&gt; &lt;/xsl:stylesheet&gt;</code></p> </li> <li> <p>Create an English-language variable-definition file (<code>cfg/common/vars/en.xml</code>) and make any necessary modifications to it.</p> <p>For example, the following code removes the period after the number for an ordered-list item; it also specifies that the bullet for an unordered list item should be an em dash.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;variables&gt;   &lt;!-- Remove dot from list number --&gt;   &lt;variable id=\"Ordered List Number 1\"&gt;     &lt;param ref-name=\"number\"/&gt;   &lt;/variable&gt;   &lt;!-- Change unordered list bullet to an em dash --&gt;   &lt;variable id=\"Unordered List bullet 1\"&gt;&amp;#x2014;&lt;/variable&gt; &lt;/variables&gt;</code></p> </li> </ul> <p>Tip: The files for this sample plug-in are included in the DITA-OT installation directory under <code>docsrc/samples/plugins/com.example.print-pdf/</code> and on GitHub.</p> <p>The plug-in directory has the following layout and files:</p> <pre><code>com.example.print-pdf\n\u251c\u2500\u2500 cfg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 catalog.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 vars\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 en.xml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 fo\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 attrs\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 custom.xsl\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 xsl\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 custom.xsl\n\u251c\u2500\u2500 integrator.xml\n\u2514\u2500\u2500 plugin.xml\n</code></pre> <ol> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> <li> <p>Build output with the new transformation type to verify that the plug-in works as intended.</p> <p><code>``dita`` **--input**=*my.ditamap* **--format**=print-pdf</code></p> </li> </ol> <p>Related information </p> <p>Installing plug-ins</p>"},{"location":"topics/pdf-customization-plugin-types/","title":"Types of custom PDF plug-ins","text":"<p>There are two common types of plug-ins: A plug-in that simply sets the DITA-OT parameters to be used when a PDF is generated, and a plug-in that overrides aspects of the base DITA-OT PDF transformation. A plug-in can, of course, do both of these things.</p>"},{"location":"topics/pdf-customization-plugin-types/#plug-in-that-only-provides-dita-ot-parameters","title":"Plug-in that only provides DITA-OT parameters","text":"<p>You might want to build a transformation type that uses a transformation as-is; however, you might want to ensure that certain DITA-OT parameters are used. For an example of this approach, see Setting parameters with plug-ins.</p>"},{"location":"topics/pdf-customization-plugin-types/#plug-in-that-overrides-the-base-pdf-transformation","title":"Plug-in that overrides the base PDF transformation","text":"<p>Production uses of DITA-OT typically rely on a custom PDF plug-in to render PDFs that are styled to match corporate or organizational guidelines. Such customization plug-ins often override the following aspects of DITA-OT default output:</p> <ul> <li>Generated text strings</li> <li>XSL templates</li> <li>XSL-FO attribute sets</li> </ul>"},{"location":"topics/pdf-customization-plugins/","title":"Custom PDF plug-ins","text":"<p>In most cases, PDF output should be customized by creating custom DITA-OT plug-ins that build on the default DITA to PDF transformation. PDF plug-ins can customize covers and page layouts, modify formatting, override the logic of the default PDF plug-in, and much more.</p> <p>Related information </p> <p>Customizing PDF output</p> <p>PDF customization approaches</p> <p>Plug-in coding conventions</p> <p>PDF themes</p>"},{"location":"topics/pdf-customization-resources/","title":"Resources for custom PDF plug-ins","text":"<p>There are several external resources that can help you generate and refine custom PDF plug-ins for DITA Open Toolkit.</p>"},{"location":"topics/pdf-customization-resources/#pdf-plugin-generator","title":"PDF Plugin Generator","text":"<p>This online tool, developed and maintained by Jarno Elovirta, enables you to generate a PDF customization plug-in automatically.</p> <p>The application at dita-generator.elovirta.com walks you through the process of creating a custom PDF plug-in and allows you to adjust a variety of settings for your PDF output. For example, you can:</p> <ul> <li>Define the target environment by selecting a version of DITA-OT</li> <li>Select the XSL formatting engine (FOP, Antenna House Formatter, or RenderX XEP)</li> <li>Specify page size, columns, and margins</li> <li>Select from (limited) options for headers and footers</li> <li>Specify layout options for chapters</li> <li> <p>Select formatting for the following publication components:</p> <ul> <li>Normal text</li> <li>Headings (levels one through four)</li> <li>Titles for sections and examples</li> <li>Tables and figures</li> <li>Notes and examples</li> <li>Lists (unordered, ordered, and definition)</li> <li>Code blocks and pre-formatted text</li> <li> <p>Inline elements such as links and trademarks For each component, you can specify:</p> </li> <li> <p>Font family, size, weight, and style</p> </li> <li>Color and background color</li> <li>Alignment, indentation, spacing, and padding</li> </ul> </li> </ul> <p>Tip: The PDF Plugin Generator should be your first stop as you start developing a brand-new PDF customization plug-in.</p>"},{"location":"topics/pdf-customization-resources/#dita-for-print-a-dita-open-toolkit-workbook-second-edition-2017","title":"DITA for Print: A DITA Open Toolkit Workbook (Second Edition, 2017)","text":"<p>Authored by Leigh W. White, DITA Specialist at IXIASOFT, and published by XML Press, DITA for Print walks readers through developing a PDF customization from scratch.</p> <p>Here is an excerpt from the back cover:</p> <p>DITA for Print is for anyone who wants to learn how to create PDFs using the DITA Open Toolkit without learning everything there is to know about XSL-FO, XSLT, or XPath, or even about the DITA Open Toolkit itself. DITA for Print is written for non-programmers, by a non-programmer, and although it is written for people who have a good understanding of the DITA standard, you don\u2019t need a technical background to get custom PDFs up and running quickly.</p> <p>This is an excellent, long-needed resource that was initially developed in 2013 for DITA-OT 1.8.</p> <p>The second edition has been revised to cover DITA Open Toolkit Version 2, including customizing the DITA 1.3 troubleshooting topic type, localization strings, bookmarks, and the new back-cover functionality.</p> <p>Important:</p> <p>The first edition of DITA for Print recommended copying entire files from the PDF2 plug-in to your custom plug-in. The DITA-OT project \u2014 and the second edition of the book \u2014 do not recommend this practice.</p> <p>Instead, you should copy only the specific attribute sets and templates that you want to override. Following this practice will more cleanly isolate your customizations from the DITA-OT code, which will make it easier for you to update your plug-ins to work with future versions of DITA-OT.</p>"},{"location":"topics/pdf-customization-resources/#dita-for-practitioners-volume-1-architecture-and-technology-2012","title":"DITA for Practitioners: Volume 1, Architecture and Technology (2012)","text":"<p>Authored by Eliot Kimber and published by XML Press, this seminal resource contains a chapter dedicated to DITA Open Toolkit: \u201cRunning, Configuring, and Customizing the Open Toolkit\u201d. In addition to a robust overview of DITA-OT customization and extension, the chapter contains a detailed example of customizing a PDF plug-in to specify 7\" \u00d7 10\" paper size and custom fonts for body text and headers.</p> <p>The DITA-OT chapter in DITA for Practitioners: Volume 1 was written for DITA-OT 1.5.4, which was the latest stable version at the time it was written.</p> <p>Related information </p> <p>Twisted XSLT Tricks: Making Column Switching Work for FOP</p> <p>DITA Open Toolkit PDF Plugins Without Fuss, Muss, or Writing XSL-FO</p> <p>PDFs from the DITA Open Toolkit: The Easy and the Not-so-Easy</p>"},{"location":"topics/pdf-customization/","title":"Customizing PDF output","text":"<p>You can adjust various aspects of PDF output by changing parameter settings or using a theme file. For more complex customizations, you can create custom DITA-OT plug-ins.</p> <p>For example:</p> <ul> <li>To print the file names of the graphics underneath figures, set args.artlbl to yes.</li> <li>To disable the subsection links on the first page of each chapter, set args.chapter.layout to BASIC.</li> <li>To change the name of the PDF file to something other than the input map name, set outputFile.base to the desired file name (without the <code>.pdf</code> extension).</li> </ul> <p>Note: For the full list of settings for PDF output, see PDF parameters.</p> <p>Related information </p> <p>Custom PDF plug-ins</p> <p>Books</p>"},{"location":"topics/pdf-plugin-structure/","title":"PDF plug-in structure","text":"<p>In cases that require substantial customizations, it is often useful to organize the files in a folder structure that mimics the hierarchy of the default PDF plug-in.</p> <p>Note: For simpler customizations, you may want to structure your plug-in differently, but the information in this topic may help you to locate the files you need to customize.</p> <p>The original Idiom plug-in used its own extension mechanism to provide overrides to the PDF transformation. With this approach, a dedicated <code>Customization</code> folder within the plug-in was used as a customization layer to store files that override the default behavior.</p> <p>While this method is no longer recommended, the same organization principles can be used in custom PDF plug-ins to facilitate comparisons with the default settings in the base PDF plug-in and make it easier to migrate customizations to new toolkit versions.</p> <pre><code>.\n\u251c\u2500\u2500 build.properties.orig\n\u251c\u2500\u2500 catalog.xml.orig\n\u2514\u2500\u2500 fo/\n    \u251c\u2500\u2500 attrs/\n    \u2502   \u2514\u2500\u2500 custom.xsl.orig\n    \u2514\u2500\u2500 xsl/\n        \u2514\u2500\u2500 custom.xsl.orig\n</code></pre> <p>To begin creating a new custom plug-in, you can copy the contents of the customization layer template in <code>plugins/org.dita.pdf2/Customization</code> to a new folder that will serve as your new custom plug-in folder, such as <code>plugins/com.company.pdf</code>.</p> <p>To mimic the hierarchy of the default PDF plug-in, you may want to add a <code>cfg/</code> subfolder and move the contents of the <code>fo/</code> folder to <code>cfg/fo/</code>.</p> <p>DITA-OT provides template files that you can start with throughout the <code>Customization</code> directory structure. These files end in the suffix <code>.orig</code> (for example, <code>catalog.xml.orig</code>). To enable these files, remove the <code>.orig</code> suffix from the copies in your new custom plug-in folder. (For example, rename <code>catalog.xml.orig</code> to <code>catalog.xml</code>).</p> <p>You can then make modifications to the copy in your custom plug-in folder, and copy any other files from the default PDF plug-in that you need to override, such as the page layouts in <code>layout-masters.xsl</code>, or the <code>font-mappings.xml</code> file that tells your PDF renderer which fonts to use and where to find them.</p> <p>Important: Wherever possible, avoid copying entire XSL files from the PDF2 plug-in to your custom plug-in. Instead, copy only the specific attribute sets and templates that you want to override. For details, see Plug-in coding conventions.</p> <p>Things you can currently override include:</p> <ul> <li>Custom XSL via <code>xsl/custom.xsl</code> and <code>attrs/custom.xsl</code></li> <li>Layout overrides via <code>layout-masters.xsl</code></li> <li>Font overrides via <code>font-mappings.xml</code></li> <li>Per-locale variable overrides via <code>common/vars/[language].xml</code></li> <li>I18N configuration via <code>i18n/[language].xml</code></li> <li>Index configuration via <code>index/[language].xml</code></li> </ul> <p>When customizing any of these areas, modify the relevant file(s) in your custom plug-in folder. Then, to enable the changes in the publishing process, you find the corresponding entry for each file you modified in the <code>catalog.xml</code> file.</p> <p>It should look like this:</p> <pre><code>&lt;!--uri name=\"cfg:fo/attrs/custom.xsl\" uri=\"fo/attrs/custom.xsl\"/--&gt;\n</code></pre> <p>Remove the comment markers <code>!--</code> and <code>--</code> to enable the change:</p> <pre><code>&lt;uri name=\"cfg:fo/attrs/custom.xsl\" uri=\"fo/attrs/custom.xsl\"/&gt;\n</code></pre> <p>Your customization should now be enabled as part of the publishing process.</p> <pre><code>.\n\u251c\u2500\u2500 plugin.xml\n\u251c\u2500\u2500 ant-include.xml\n\u2514\u2500\u2500 cfg/\n    \u251c\u2500\u2500 catalog.xml\n    \u251c\u2500\u2500 common/\n    \u2502   \u251c\u2500\u2500 artwork/\n    \u2502   \u2502   \u251c\u2500\u2500 logo.svg\n    \u2502   \u2514\u2500\u2500 vars/\n    \u2502       \u251c\u2500\u2500 strings.xml\n    \u2502       \u251c\u2500\u2500 en.xml\n    \u2514\u2500\u2500 fo/\n        \u251c\u2500\u2500 attrs/\n        \u2502   \u251c\u2500\u2500 custom.xsl\n        \u251c\u2500\u2500 font-mappings.xml\n        \u251c\u2500\u2500 layout-masters.xsl\n        \u2514\u2500\u2500 xsl/\n            \u2514\u2500\u2500 custom.xsl\n</code></pre> <p>When your custom plug-in is installed, the files in its subfolders will override the out-of-the-box settings from their counterparts in <code>org.dita.pdf2/cfg/fo/attrs</code> and <code>org.dita.pdf2/xsl/fo</code>.</p> <p>The following topics describe the contents of the base PDF plug-in subfolders and provide additional information on customizing various aspects of the default PDF output.</p>"},{"location":"topics/pdf-plugin-structure_common-artwork/","title":"Custom artwork","text":"<p>The <code>common/artwork</code> folder houses custom artwork files that override the standard icons in <code>org.dita.pdf2/cfg/common/artwork</code>.</p> <p>These files are used to graphically identify different types of DITA <code>&lt;note&gt;</code> element.</p> <p>The mapping between <code>&lt;note&gt;</code> type and graphic is contained in the common variables file <code>org.dita.pdf2/cfg/common/vars/commonvariables.xml</code>.</p> <p>The variables that control <code>&lt;note&gt;</code> graphics all follow the form</p> <pre><code>&lt;variable id=\"*\\{type\\}* Note Image Path\"&gt; *\\{path to image file\\}* &lt;/variable&gt;\n</code></pre> <p>where {type} contains a possible value for the <code>&lt;note&gt;</code> <code>@type</code> attribute and {path to image file} is the path to the note icon image.</p>"},{"location":"topics/pdf-plugin-structure_common-index/","title":"Index configuration","text":"<p>The <code>common/index</code> folder houses custom index definition files that override the standard definitions in <code>org.dita.pdf2/cfg/common/index</code>.</p> <p>Each file contains data for a single language, and should take that language\u2019s ISO 639-1 language designator as its name (for example, <code>pt.xml</code> for Portuguese). If necessary, locale-specific customizations can be provided by adding a region designator to the file name (for example, <code>pt_BR.xml</code> for Brazilian Portuguese).</p> <p>The index files consist of <code>&lt;index.group&gt;</code> elements which contain sorting information on one or more characters. Index groups are listed in sort order (\u201cspecials\u201d before numbers, numbers before the letter \u2018A\u2018, etc), and the <code>&lt;char.set&gt;</code> entries they contain are also listed in sort order (uppercase before lowercase).</p> <p>The best way to start editing a custom index file is by making a copy of the original from <code>org.dita.pdf2/cfg/common/index</code> and making changes as desired.</p> <p>In order to apply a custom index definition to your publishing outputs, edit <code>catalog.xml</code> and uncomment the appropriate entry in the \u201cIndex configuration override entries\u201d section.</p>"},{"location":"topics/pdf-plugin-structure_common-vars/","title":"Variable overrides","text":"<p>The <code>common/vars</code> folder houses custom variable definitions that override the standard definitions in <code>org.dita.pdf2/cfg/common/vars</code>.</p> <p>As with index configuration, each file contains data for a single language, and should take that language\u2019s ISO 639-1 language designator as its name.</p> <p>Variable files contain a set of <code>&lt;variable&gt;</code> elements, identified by their <code>@id</code> attribute. The variable definitions are used to store static text that is used as part of the published outputs. For example, page headers, hyperlinks, etc. The id attribute for each variable should make it clear how the variable text is being used.</p> <p>Some variables contain <code>&lt;param&gt;</code> elements which indicate parameter values that are substituted at publish time by the XSL. For example, a page number that is being generated as part of the publishing process might be identified by <code>&lt;param ref-name=\"number\"/&gt;</code> When editing or translating a variable file, these should be included in the translation, though they can be moved and rearranged within the <code>&lt;variable&gt;</code> content as needed.</p> <p>The best way to start editing a custom variables file is by making a copy of the original from <code>org.dita.pdf2/cfg/common/vars</code> and making changes as desired. When adding a new language, start from an existing language\u2019s list of variables and translate each entry as needed.</p> <p>Note that unchanged <code>&lt;variable&gt;</code> elements can be omitted: the custom variables file need only include those <code>&lt;variable&gt;</code> elements which you have modified. Variables not found in the custom file will are taken from the standard variable files.</p> <p>Applying a custom variable does not require modifying the <code>catalog.xml</code> file. The publishing process will automatically use any custom variables definitions in place of the original ones.</p> <p>Related information </p> <p>How to add or modify generated text strings</p>"},{"location":"topics/pdf-plugin-structure_fo-attrs/","title":"Custom attributes","text":"<p>The <code>fo/attrs</code> folder houses custom attribute configuration files that override the standard attributes in <code>org.dita.pdf2/cfg/fo/attrs</code>.</p> <p>These files define the appearance of different elements in XML assets when they are rendered to PDF output. The different DITA elements are organized into files by element type \u2013 index-related definitions in <code>index-attr.xsl</code>, table-related definitions in <code>tables-attr.xsl</code>, etc.</p> <p>The XSL attribute sets defined in these files can be used to override the presentation of DITA elements, including font size, color, spacing, etc.</p>"},{"location":"topics/pdf-plugin-structure_fo-i18n/","title":"Internationalization configuration","text":"<p>The <code>fo/i18n</code> folder houses custom internationalization files that override the standard configurations in <code>org.dita.pdf2/cfg/fo/i18n</code>.</p> <p>As with index configuration and variable overrides, each file contains data for a single language, and should take that language\u2019s ISO 639-1 language designator as its name.</p> <p>Each configuration file contains mappings of certain symbols to the Unicode codepoint which should be used to represent them in the given locale.</p> <p>The best way to start editing a custom configuration is by making a copy of the original from <code>org.dita.pdf2/cfg/fo/i18n</code> and making changes as desired.</p> <p>In order to apply a custom configuration to your publishing outputs, edit <code>catalog.xml</code> and uncomment the appropriate entry in the \u201cI18N configuration override entries\u201d section.</p>"},{"location":"topics/pdf-plugin-structure_fo-xsl/","title":"Custom stylesheets","text":"<p>The <code>fo/xsl</code> folder houses custom stylesheet files that override the default stylesheets in <code>org.dita.pdf2/xsl/fo</code>.</p> <p>You can use custom stylesheets to implement additional processing routines or adjust the output generated by the default toolkit processing.</p>"},{"location":"topics/pdf-themes/","title":"PDF themes","text":"<p>DITA-OT 4.0 includes the <code>com.elovirta.pdf</code> plug-in, which extends the default PDF2 plug-in with a new theme parameter. The --theme option takes a path to a theme file and changes the styling of the PDF output without requiring changes to XSLT stylesheets.</p> <p>Themes can be used to adjust basic settings like cover page images, page sizes, numbering, font properties, background colors and borders, spacing, and running content like page headers and footers.</p> <p>To generate PDF output with a custom theme, pass the theme file to the <code>dita</code> command with the --theme option:</p> <pre><code>`dita` **--project**=`samples/project-files/pdf.xml` \\\n     **--theme**=`path/to/custom-theme-file.yaml`\n</code></pre> <p>The following topics provide details on the theme file formats and supported configuration options.</p> <p>Related information </p> <p>PDF customization approaches</p> <p>Custom PDF plug-ins</p> <p>Simpler custom PDFs - The technical details</p> <p>Simpler custom PDFs - The user perspective</p>"},{"location":"topics/pdf2-creating-change-bars/","title":"Generating revision bars","text":"<p>You can generate revision bars in your PDF output by using the <code>@changebar</code> and <code>@color</code> attributes of the DITAVAL <code>&lt;revprop&gt;</code> element.</p> <p>The DITA specification for the <code>@changebar</code> attribute of the <code>&lt;revprop&gt;</code> element simply says:</p> <ul> <li> <p><code>@changebar</code></p> <p>When flag has been set, specify a changebar color, style, or character, according to the changebar support of the target output format. If flag has not been set, this attribute is ignored.</p> </li> </ul> <p>The current version of DITA Open Toolkit uses two <code>&lt;revprop&gt;</code> attribute values to define revision bars:</p> <ul> <li> <p>The <code>@changebar</code> attribute value defines the style to use for the line. The list of possible values is the same as for other XSL-FO rules (see @change-bar-style). The default value is groove.</p> </li> <li> <p>The <code>@color</code> attribute value specifies the change bar color using any color value recognized by XSL-FO, including the usual color names or a hex color value. The default value is black.</p> </li> </ul> <pre><code>&lt;revprop action=\"flag\" changebar=\"solid\" color=\"green\"/&gt;\n</code></pre> <p>DITA-OT uses a default offset of 2\u00a0mm to place the revision bar near the edge of the text column. The offset, placement and width are not currently configurable via attribute values.</p> <p>XSL-FO 1.1 does not provide for revision bars that are not rules, so there is no way to get text revision indicators instead of rules, for example, using a number in place of a rule. Antenna House Formatter provides a proprietary extension to enable this, but the DITA-OT PDF transformation does not take advantage of it.</p>"},{"location":"topics/plugin-addgeneratedtext/","title":"Customizing generated text","text":"<p>Generated text is the term for strings that are automatically added by the build process, such as the word \u201cNote\u201d before the contents of a <code>&lt;note&gt;</code> element.</p> <ul> <li> <p><code>dita.xsl.strings</code></p> <p>Add new strings to generated text file.</p> </li> </ul> <p>The generated text extension point is used to add new strings to the default set of generated text from org.dita.base for any non-PDF transformation type and from org.dita.pdf2 for PDF. It also creates the <code>&lt;gentext&gt;</code> element in the intermediate files used by the toolkit. There are several reasons you may want to use the dita.strings.xsl extension point:</p> <ul> <li>It can be used to add new text for your own processing extensions; for example, it could be used to add localized versions of the string \u201cUser response\u201d to aid in rendering troubleshooting information.</li> <li>It can be used to override the default strings in the toolkit; for example, it could be used to reset the English string \u201cFigure\u201d to \u201cFig.\u201d</li> <li>It can be used to add support for new languages. For example, it could be used to add support for Vietnamese or Gaelic; it could also be used to support a new variant of a previously supported language, such as Australian English.</li> </ul> <p>If two plug-ins define the same string or add support for the same language using different values, the result will be non-deterministic. In other words, when the same content is processed multiple times, you may get inconsistent generated text results. This is because the toolkit cannot determine which string to use, since more than one match is found. Avoid this possibility by ensuring that only one plug-in defines or overrides string values for each string in each language. Also consider using a naming convention for attributes used to look up the string value by using the ID or purpose of your plug-in.</p> <p>Generated strings are available to the <code>getVariable</code> template used in many DITA-OT XSLT files.</p> <p>Prior to DITA-OT 3.7, there were two different XML structures for adding or modifying generated text (gentext). The base plug-in org.dita.base and any custom overrides defined via the dita.strings.xsl extension point used a root element <code>&lt;strings&gt;</code>, with individual strings in <code>&lt;str&gt;</code> elements with <code>@name</code> attributes. This format was previously used for HTML, and all other output formats except PDF.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;strings xml:lang=\"en-US\"&gt;\n  &lt;str name=\"String1\"&gt;English generated text&lt;/str&gt;\n&lt;/strings&gt;\n</code></pre> <p>The PDF plug-in org.dita.pdf2 used a root element <code>&lt;vars&gt;</code> with an XML namespace, and strings in <code>&lt;variable&gt;</code> elements with <code>@id</code> attributes.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;vars xmlns=\"http://www.idiominc.com/opentopic/vars\"&gt;\n  &lt;variable id=\"String1\"&gt;English generated text&lt;/variable&gt;\n&lt;/vars&gt;\n</code></pre> <p>Starting with DITA-OT 3.7, these structures have been deprecated and replaced with a new unified format. All files now use <code>&lt;variables&gt;</code> as the root element, with the <code>&lt;variable&gt;</code> elements previously used in PDF strings. The new format supports the XSL parameters used by the earlier PDF strings format to pass dynamic information such as chapter numbers or figure titles.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;variables&gt;\n  &lt;variable id=\"String1\"&gt;English generated text&lt;/variable&gt;\n&lt;/variables&gt;\n</code></pre> <p>The old formats are still supported, but plug-in developers should update any generated text files to reflect the new structure, as support for the old formats may be removed in a future release. #3817</p> <p>Related information </p> <p>Languages supported by the core toolkit</p> <p>Variable overrides for PDF</p>"},{"location":"topics/plugin-antpreprocess/","title":"Adding an Ant target to the pre-processing pipeline","text":"<p>You can add an Ant target to the pre-processing pipeline. This enables you to insert additional processing before or after the pre-processing chain or a specific step in the pre-processing operation.</p> <p>You can use the <code>depend.preprocess.pre</code> and <code>depend.preprocess.post</code> extension points to run a target before or after the entire pre-processing operation. In addition, there are extension points that enable you to run an Ant target before specific pre-processing steps.</p> <p>Tip: For maximum compatibility with future versions of DITA-OT, most plug-ins should use the extension points that run before or after pre-processing.</p> <ol> <li> <p>Define and integrate the new Ant target.</p> </li> <li> <p>Create the following <code>plugin.xml</code> file:</p> <p><code>&lt;plugin id=\"*plugin-id*\"&gt;   &lt;feature extension=\"*extension-point*\" value=\"*Ant-target*\"/&gt; &lt;/plugin&gt;</code></p> <p>where</p> <ul> <li>plugin-id is the plug-in identifier.</li> <li>extension-point is a pre-processing extension point.</li> <li>Ant-target is the name of the Ant target.</li> <li>Use the <code>dita install</code> subcommand to install the plug-in.</li> </ul> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>The new target is added to the Ant dependency list. The new target is now always run in conjunction with the specified step in the pre-processing pipeline.</p>"},{"location":"topics/plugin-antpreprocess/#example","title":"Example","text":"<p>The following <code>plugin.xml</code> file specifies that the myAntTargetBeforeChunk target is always run before the <code>chunk</code> step in the pre-processing stage.</p> <pre><code>&lt;plugin id=\"com.example.extendchunk\"&gt;\n  &lt;feature extension=\"depend.preprocess.chunk.pre\" \n           value=\"myAntTargetBeforeChunk\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>It assumes that the myAntTargetBeforeChunk target has already been defined and integrated.</p> <p>CAUTION:</p> <p>The internal order of preprocessing steps is subject to change between versions of DITA-OT. New versions may remove, reorder, combine, or add steps to the process, so the extension points within the preprocessing stage should only be used if absolutely necessary.</p> <p>Related information </p> <p>Pre-processing extension points</p> <p>Installing plug-ins</p>"},{"location":"topics/plugin-anttarget/","title":"Adding a new target to the Ant build process","text":"<p>As of DITA-OT 3.0, the <code>ant.import</code> extension point can be used to make new targets available to the Ant processing pipeline. This can be done as part of creating a new transformation, extending pre-processing, or simply to make new Ant targets available to other plug-ins.</p> <ol> <li> <p>Create an Ant project file that contains the new target(s).</p> </li> <li> <p>Create the <code>plugin.xml</code> file:</p> <p><code>&lt;plugin id=\"*plugin-id*\"&gt;   &lt;feature extension=\"ant.import\" file=\"*build-file*\"/&gt; &lt;/plugin&gt;</code></p> <p>where:</p> <ul> <li>plugin-id is the plug-in identifier, for example, <code>com.example.ant</code>.</li> <li>build-file is the Ant project file that contains the new build target(s).</li> <li>Use the <code>dita install</code> subcommand to install the plug-in.</li> </ul> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>The targets from the project (build-file) are copied into the <code>build.xml</code> file, using the correct path. This makes the new Ant targets available to other processes.</p> <p>Tip: Earlier versions of DITA-OT use the <code>dita.conductor.target.relative</code> to call a wrapper file with a dummy task that imports the Ant project file. This approach is still supported for backwards compatibility, but the simpler <code>ant.import</code> approach described above should be used for all new customizations.</p> <p>Related information </p> <p>General extension points</p> <p>Installing plug-ins</p>"},{"location":"topics/plugin-benefits/","title":"Plug-in benefits","text":"<p>Plug-ins allow you to extend the toolkit in a way that is consistent, easy-to-share, and possible to preserve through toolkit upgrades.</p> <p>The DITA-OT plug-in mechanism provides the following benefits:</p> <ul> <li>Plug-ins can easily be shared with other users, teams, or companies. Typically, all users need to do is to unzip and run a single installation command. With many builds, even that installation step is automatic.</li> <li>Plug-ins permit overrides or customizations to grow from simple to complex over time, with no increased complexity to the extension mechanism.</li> <li>Plug-ins can be moved from version to version of DITA-OT by reinstalling or copying the directory from one installation to another. There is no need to re-integrate code based on updates to DITA-OT core processing.</li> <li>Plug-ins can build upon each other. If you like a plug-in, simply install that plug-in, and then create your own plug-in that builds on top of it. The two plug-ins can then be distributed to your team as a unit, or you can share your own extensions with the original provider.</li> </ul>"},{"location":"topics/plugin-coding-conventions/","title":"Plug-in coding conventions","text":"<p>To ensure custom plug-ins work well with the core toolkit code and remain compatible with future releases, the DITA Open Toolkit project recommends that plug-ins use modern development practices and common coding patterns.</p>"},{"location":"topics/plugin-coding-conventions/#best-practices","title":"Best practices","text":"<p>Adhering to certain development practices will properly isolate your code from that of DITA Open Toolkit. This will make it easier to you to upgrade to new versions of DITA-OT when they are released.</p> <ul> <li> <p>Use a properly-constructed DITA-OT plug-in.</p> </li> <li> <p>Use a version control system to store your code.</p> </li> <li> <p>Store the source code of your plug-ins outside of the DITA-OT installation directory, and add the repository location to the list of plug-in directories defined in the plugindirs entry of the <code>configuration.properties</code> file.</p> </li> <li> <p>Never modify any of the core DITA-OT code.</p> <p>Tip: You may want to set the permissions on default plug-in directories such as <code>org.dita.pdf2</code> to \u201cread-only\u201d to ensure that you do not accidentally modify the files within as you develop your customized plug-in.</p> </li> <li> <p>Avoid copying entire DITA-OT files into your customization plug-in. When you only copy the attribute sets and templates that you need to override, there is less risk of impact from new features or fixes in the base code, making your code more stable and easier to upgrade between releases.</p> </li> <li> <p>If you only need to change a few attribute sets and templates, you may prefer to store your overrides in <code>custom.xsl</code> files, or a simple folder hierarchy within your custom plug-in.</p> </li> <li> <p>In cases that require substantial customizations, you may prefer to organize the files in a folder structure that mimics the hierarchy of the default plug-in you are customizing. This facilitates comparisons with the default settings in the base plug-in and makes it easier to migrate your changes to new toolkit versions. See PDF plug-in structure for information on the files in the base PDF plug-in.</p> </li> <li> <p>Upgrade your customization plug-in to new versions of DITA-OT regularly. Do not wait through several major releases before upgrading.</p> </li> </ul>"},{"location":"topics/plugin-coding-conventions/#use-a-custom-namespace","title":"Use a custom namespace","text":"<p>For XSLT customizations, use a custom namespace for any modified template modes, template names, attribute sets, functions, and variables. This helps to clarify which portions of the code are specific to your customizations, and serves to isolate your changes in the event that items with the same name are added to the base plug-ins in the future.</p> <p>For example, instead of creating a template named <code>searchbar</code>, use something like <code>corp:searchbar</code> instead. This ensures that if future versions of DITA-OT add a <code>searchbar</code> template, your custom version will be unaffected.</p> <p>Instead of:</p> <pre><code>&lt;xsl:template name=\"searchbar\"/&gt;\n</code></pre> <p>use:</p> <pre><code>&lt;xsl:template name=\"corp:searchbar\"/&gt;\n</code></pre>"},{"location":"topics/plugin-coding-conventions/#upgrade-stylesheets-to-xslt-20","title":"Upgrade stylesheets to XSLT 2.0","text":"<p>The Saxon project has announced plans to remove XSLT 1.0 support from the Saxon-HE library that ships with DITA-OT:</p> <p>\u2026we\u2019re dropping XSLT 1.0 backwards compatibility mode from Saxon-HE, and hope to eliminate it entirely in due course.</p> <p>https://www.xml.com/news/release-saxon-98/</p> <p>DITA-OT 3.0 and 3.0.1 included Saxon-HE 9.8.0.5, which rejects XSLT stylesheets that specify <code>version=\"1.0\"</code>. Plug-ins with XSLT templates specifying version 1.0 will fail with the message \u201c<code>XSLT 1.0 compatibility mode is not available in this configuration</code>.\u201d</p> <p>To resolve this issue, change any occurrences of <code>&lt;xsl:stylesheet version=\"1.0\"&gt;</code> in custom plug-in stylesheets to at least <code>&lt;xsl:stylesheet version=\"2.0\"&gt;</code>.</p> <p>Tip: DITA-OT 3.0.2 includes Saxon-HE 9.8.0.7, which restores XSLT 1.0 backwards-compatibility mode, but the DITA Open Toolkit project recommends upgrading all stylesheets to XSLT 2.0 to ensure plug-ins remain compatible with future versions of DITA-OT and Saxon-HE.</p>"},{"location":"topics/plugin-coding-conventions/#use-custom-pipeline-elements","title":"Use custom <code>&lt;pipeline&gt;</code> elements","text":"<p>In Ant scripts, use the XSLT module from DITA-OT instead of Ant\u2019s built-in <code>&lt;xslt&gt;</code> or <code>&lt;style&gt;</code> tasks.</p> <p>The XSLT module allows access to DITA-OT features like using the job configuration to select files in the temporary folder based on file metadata and custom XSLT extension functions.</p> <p>Important: Future versions of DITA-OT may switch to a new XML resolver or in-memory storage features that are not supported by Ant\u2019s XSLT task. To ensure compatibility with future releases, plug-ins should replace these constructs with custom <code>&lt;pipeline&gt;</code> elements.</p> <p>Instead of:</p> <pre><code>&lt;xslt style=\"${dita.plugin.example.dir}/custom.xsl\"\n      basedir=\"${dita.temp.dir}\"\n      destdir=\"${dita.output.dir}\"\n      includesfile=\"${dita.temp.dir}/${fullditatopicfile}\"/&gt;\n</code></pre> <p>use:</p> <pre><code>&lt;pipeline&gt;\n  &lt;xslt style=\"${dita.plugin.example.dir}/custom.xsl\"\n        destdir=\"${dita.output.dir}\"&gt;\n    &lt;ditafileset format=\"dita\" /&gt;\n  &lt;/xslt&gt;\n&lt;/pipeline&gt;\n</code></pre>"},{"location":"topics/plugin-coding-conventions/#use-the-plug-in-directory-property","title":"Use the plug-in directory property","text":"<p>In Ant scripts, always refer to files in other plug-ins using the <code>dita.plugin.*plugin-id*.dir</code> property.</p> <p>Instead of:</p> <pre><code>&lt;property name=\"base\" location=\"../example/custom.xsl\"/&gt;\n</code></pre> <p>use:</p> <pre><code>&lt;property name=\"base\" location=\"${dita.plugin.example.dir}/custom.xsl\"/&gt;\n</code></pre> <p>This fixes cases where plug-ins are installed to custom plug-in directories or the plug-in folder name doesn\u2019t match the plug-in ID.</p> <p>Tip: For details, see Referencing files from other plug-ins.</p>"},{"location":"topics/plugin-coding-conventions/#use-the-plugin-uri-scheme","title":"Use the <code>plugin</code> URI scheme","text":"<p>In XSLT, use the <code>plugin</code> URI scheme in <code>&lt;xsl:import&gt;</code> and <code>&lt;xsl:include&gt;</code> to reference files in other plug-ins.</p> <p>Instead of:</p> <pre><code>&lt;xsl:import href=\"../../org.dita.base/xsl/common/output-message.xsl\"/&gt;\n</code></pre> <p>use:</p> <pre><code>&lt;xsl:import href=\"plugin:org.dita.base:xsl/common/output-message.xsl\"/&gt;\n</code></pre> <p>As with the plug-in directory property in Ant, this allows plug-ins to resolve to the correct directory even when a plug-in moves to a new location. The plug-in is referenced using the syntax <code>plugin:*plugin-id*:*path/within/plugin/file.xsl*</code>.</p> <p>Tip: For details, see Referencing files from other plug-ins.</p>"},{"location":"topics/plugin-coding-conventions/#use-ditafileset-to-select-files","title":"Use <code>&lt;ditafileset&gt;</code> to select files","text":"<p>In Ant scripts, use <code>&lt;ditafileset&gt;</code> to select resources in the temporary directory.</p> <p>For example, to select all images referenced by input DITA files, instead of:</p> <pre><code>&lt;copy todir=\"${copy-image.todir}\"&gt;\n  &lt;fileset dir=\"${user.input.dir}\"&gt;\n    &lt;includes name=\"*.jpg\"/&gt;\n    &lt;includes name=\"*.jpeg\"/&gt;\n    &lt;includes name=\"*.png\"/&gt;\n    &lt;includes name=\"*.gif\"/&gt;\n    &lt;includes name=\"*.svg\"/&gt;\n  &lt;/fileset&gt;\n&lt;/copy&gt;\n</code></pre> <p>use:</p> <pre><code>&lt;copy todir=\"${copy-image.todir}\"&gt;\n  &lt;ditafileset format=\"image\" /&gt;\n&lt;/copy&gt;\n</code></pre> <p>The <code>&lt;ditafileset&gt;</code> resource collection can be used to select different types of files.</p> Example Description <code>&lt;ditafileset format=\"dita\"/&gt;</code> Selects all DITA topics in the temporary directory. <code>&lt;ditafileset format=\"ditamap\"/&gt;</code> Selects all DITA maps in the temporary directory. <code>&lt;ditafileset format=\"image\"/&gt;</code> Selects images of all known types in the temporary directory."},{"location":"topics/plugin-coding-conventions/#match-elements-with-their-class-attribute","title":"Match elements with their <code>@class</code> attribute","text":"<p>Use <code>@class</code> attributes to match elements in XPATH expressions instead of element names.</p> <p>For example, instead of:</p> <pre><code>&lt;xsl:template match=\"p\"/&gt;\n</code></pre> <p>use:</p> <pre><code>&lt;xsl:template match=\"*[contains(@class,' topic/p ')]\"/&gt;\n</code></pre> <p>Specialization-aware processing uses these classes to distinguish the general class of elements to which the current element belongs.</p> <p>Tip: Matching classes instead of elements ensures that the expression also applies to any specialized elements as well as to their more general ancestors. This means you can define new markup without necessarily requiring new processing rules.</p>"},{"location":"topics/plugin-coding-conventions/#validating-plug-ins","title":"Validating plug-ins","text":"<p>DITA-OT includes a RELAX\u00a0NG schema file that can be used to validate the <code>plugin.xml</code> files that define the capabilities of each plug-in.</p> <p>To ensure the syntax of your custom plug-in is correct, include an <code>xml-model</code> processing instruction at the beginning of the <code>plugin.xml</code> file, immediately after the XML prolog:</p> <p><code>xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"</code></p> <p>If your authoring environment does not apply this schema automatically, point your editor to <code>*dita-ot-dir*/resources/plugin.rnc</code> to associate the schema with your plug-in file.</p> <p>Related information </p> <p>Custom HTML plug-ins</p> <p>Custom PDF plug-ins</p> <p>Plug-in dependencies</p> <p>Referencing files from other plug-ins</p> <p>Validation meets publication - Apply your style guide rules during the publication</p> <p>Unit Testing DITA-OT Plugin Extensions</p> <p>Meta DITA samples: testing around the edge cases</p> <p>Managing a large scale build environment with 50+ custom plugins</p> <p>DITA-OT Patterns and Anti-patterns</p> <p>Multiple OT with Git</p>"},{"location":"topics/plugin-configfile/","title":"Plug-in descriptor file","text":"<p>The plug-in descriptor file (<code>plugin.xml</code>) controls all aspects of a plug-in, making each extension visible to the rest of the toolkit. The file uses pre-defined extension points to locate changes, and then integrates those changes into the core DITA-OT code.</p>"},{"location":"topics/plugin-configfile/#validating-plug-ins","title":"Validating plug-ins","text":"<p>DITA-OT includes a RELAX\u00a0NG schema file that can be used to validate the <code>plugin.xml</code> files that define the capabilities of each plug-in.</p> <p>To ensure the syntax of your custom plug-in is correct, include an <code>xml-model</code> processing instruction at the beginning of the <code>plugin.xml</code> file, immediately after the XML prolog:</p> <p><code>xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"</code></p> <p>If your authoring environment does not apply this schema automatically, point your editor to <code>*dita-ot-dir*/resources/plugin.rnc</code> to associate the schema with your plug-in file.</p>"},{"location":"topics/plugin-configfile/#plug-in-identifiers","title":"Plug-in identifiers","text":"<p>Every DITA-OT plug-in must have a unique identifier composed of one or more dot-delimited tokens, for example, <code>com.example.rss</code>. This identifier is used to identify the plug-in to the toolkit for installation, processing, and when determining plug-in dependencies.</p> <p>Note: The default DITA-OT plug-ins use a reverse domain naming convention, as in <code>org.dita.html5</code>; this is strongly recommended to avoid plug-in naming conflicts.</p> <p>Each token can include only the following characters:</p> <ul> <li>Lower-case letters (a-z)</li> <li>Upper-case letters (A-Z)</li> <li>Numerals (0-9)</li> <li>Underscores (_)</li> <li>Hyphens (-)</li> </ul>"},{"location":"topics/plugin-configfile/#plugin","title":"<code>&lt;plugin&gt;</code>","text":"<p>The root element of the <code>plugin.xml</code> file is <code>&lt;plugin&gt;</code>, which has a required <code>@id</code> attribute set to the unique plug-in identifier.</p> <pre><code>&lt;plugin id=\"com.example.html5-javascript\"&gt;\n</code></pre>"},{"location":"topics/plugin-configfile/#plug-in-elements","title":"Plug-in elements","text":"<p>The <code>&lt;plugin&gt;</code> element can contain the following child elements:</p> <ul> <li> <p><code>&lt;extension-point&gt;</code></p> <p>An optional element that defines a new extension point that can be used by other DITA-OT plug-ins.</p> <p>The following attributes are supported:</p> Attribute Description Required? id Extension point identifier Yes name Extension point description No <p>Like plug-in identifiers, extension point identifiers are composed of one or more dot-delimited tokens.</p> <p>Note: Extension point identifiers should begin with the identifier of the defining plug-in and append one or more tokens, for example, <code>org.dita.example.pre</code>.</p> <p><code>language-xml &lt;extension-point id=\"dita.xsl.html5\" name=\"HTML5 XSLT import\"/&gt;</code></p> </li> <li> <p><code>&lt;feature&gt;</code></p> <p>An optional element that supplies values to a DITA-OT extension point.</p> <p>The following attributes are supported:</p> Attribute Description Required? extension Identifier of the DITA-OT extension point Yes value Comma separated string value of the extension Either the <code>@value</code> or <code>@file</code> attribute must be specified file Name and path of a file containing data for the extension point. Depending on the extension point, this might be specified as an absolute path, a path relative to the <code>plugin.xml</code> file, or a path relative to the DITA-OT root. </li> </ul> <p>|Either the <code>@value</code> or <code>@file</code> attribute must be specified|     |type|Type of the <code>@value</code> attribute|No|</p> <pre><code>If more than one `&lt;feature&gt;` element supplies values to the same extension point, the values are additive. For example, the following are equivalent:\n\n```language-xml\n&lt;feature extension=\"org.dita.example.extension-point\" value=\"a,b,c\"/&gt;\n```\n\n```language-xml\n&lt;feature extension=\"org.dita.example.extension-point\" value=\"a\"/&gt;\n&lt;feature extension=\"org.dita.example.extension-point\" value=\"b\"/&gt;\n&lt;feature extension=\"org.dita.example.extension-point\" value=\"c\"/&gt;\n```\n</code></pre> <ul> <li> <p><code>&lt;metadata&gt;</code></p> <p>An optional element that defines metadata.</p> <p>The following attributes are supported:</p> Attribute Description Required? type Metadata name Yes value Metadata value Yes <p><code>language-xml &lt;metadata type=\"foo\" value=\"bar\"/&gt;</code></p> </li> <li> <p><code>&lt;require&gt;</code></p> <p>An optional element that defines plug-in dependencies.</p> <p>The following attributes are supported:</p> Attribute Description Required? plugin The identifier of the required plug-in. To specify alternative requirements, separate plug-in identifiers with a vertical bar. </li> </ul> <p>|Yes|     |importance|Identifies whether the plug-in is <code>required</code> (default) or <code>optional</code>. DITA-OT provides a warning if a required plug-in is not available.|No|</p> <pre><code>```\n&lt;require plugin=\"org.dita.html5\"/&gt;\n```\n</code></pre> <ul> <li> <p><code>&lt;template&gt;</code></p> <p>An optional element that defines files that should be treated as templates.</p> <p>Template files can be used to integrate DITA-OT extensions. Templates typically extend the default transformation-type-specific build files via <code>&lt;dita:extension&gt;</code> elements. When the plug-in installation process runs, template files are used to recreate build files, and the specified extension points are replaced with references to the appropriate plug-ins.</p> <p>The following attributes are supported:</p> Attribute Description Required? file Name and path to the template file, relative to the <code>plugin.xml</code> file Yes <p><code>language-xml &lt;template file=\"build_dita2html5_template.xml\"/&gt;</code></p> </li> <li> <p><code>&lt;transtype&gt;</code></p> <p>An optional element that defines a new output format (transformation type).</p> <p>The following attributes are supported:</p> Attribute Description Required? name Transformation name Yes desc Transformation type description No abstract When true, sets the transformation type as \u201cabstract\u201d, meaning it can be extended by other plug-ins, but cannot be used directly. For example, the <code>org.dita.base</code> plug-in defines an abstract \u201cbase\u201d transformation type that is extended by other DITA-OT plug-ins. </li> </ul> <p>|No|     |extends|Specifies the name of the transformation type being extended|No|</p> <pre><code>```language-xml\n&lt;transtype name=\"base\" abstract=\"true\" desc=\"Common\"&gt;\n  [...]\n  &lt;param name=\"link-crawl\"\n         desc=\"Specifies whether to crawl only topic links found in maps, or all discovered topic links.\"\n         type=\"enum\"&gt;\n    &lt;val&gt;map&lt;/val&gt;\n    &lt;val default=\"true\"&gt;topic&lt;/val&gt;\n  &lt;/param&gt;\n  [...]\n&lt;/transtype&gt;\n\n```\n\nThe `&lt;transtype&gt;` element may define additional parameters for the transformation type using the following child elements.\n\n-   **`&lt;param&gt;`**\n\n    An optional element that specifies a parameter for the transformation type.\n\n    The following parameter attributes are supported:\n\n    |Attribute|Description|Required?|\n    |---------|-----------|---------|\n    |**name**|Parameter name|Yes|\n    |**desc**|Parameter description|No|\n    |**type**|Parameter type \\(enum, file, string\\)|Yes|\n    |**deprecated**|When true, identifies this parameter as deprecated|No|\n    |**required**|When true, identifies this parameter as required|No|\n\n-   **`&lt;val&gt;`**\n\n    A child of `&lt;param&gt;` \\(when `@type`=enum\\) that specifies an enumeration value.\n\n    The following attributes are supported:\n\n    |Attribute|Description|Required?|\n    |---------|-----------|---------|\n    |**default**|When true, sets the enumeration value as the default value of the parent `&lt;param&gt;`|Only for the default `&lt;val&gt;`|\n</code></pre> <p>Any extension that is not recognized by DITA-OT is ignored. Since DITA-OT version 1.5.3, you can combine multiple extension definitions within a single <code>plugin.xml</code> file; in older versions, only the last extension definition was used.</p>"},{"location":"topics/plugin-configfile/#example-pluginxml-file","title":"Example <code>plugin.xml</code> file","text":"<p>The following is a sample of a <code>plugin.xml</code> file. This file adds support for a new set of specialized DTDs, and includes an override for the XHTML output processor.</p> <p>This <code>plugin.xml</code> file would go into a directory such as <code>DITA-OT/plugins/music/</code> and referenced supporting files would also exist in that directory. A more extensive sample using these values is available in the actual music plug-in, available on SourceForge.</p> <pre><code>&lt;plugin id=\"org.metadita.specialization.music\"&gt;\n  &lt;feature extension=\"dita.specialization.catalog.relative\"\n           file=\"catalog-dita.xml\"/&gt;\n  &lt;feature extension=\"dita.xsl.xhtml\" file=\"xsl/music2xhtml.xsl\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Related information </p> <p>Creating a new plug-in extension point</p> <p>Adding a new transformation type</p>"},{"location":"topics/plugin-dependencies/","title":"Plug-in dependencies","text":"<p>A DITA-OT plug-in can be dependent on other plug-ins. Prerequisite plug-ins are installed first, which ensures that DITA-OT handles XSLT overrides correctly.</p> <p>The <code>&lt;require&gt;</code> element in the <code>plugin.xml</code> file specifies whether the plug-in has dependencies. Use <code>&lt;require&gt;</code> elements to specify prerequisite plug-ins, in order from most general to most specific.</p> <p>If a prerequisite plug-in is missing, DITA-OT prints a warning during installation. To suppress the warning but keep the installation order if both plug-ins are present, add <code>importance=\"optional\"</code> to the <code>&lt;require&gt;</code> element.</p> <p>If a plug-in can depend on any one of several optional plug-ins, separate the plug-in IDs with a vertical bar. This is most useful when combined with <code>importance=\"optional\"</code>.</p>"},{"location":"topics/plugin-dependencies/#example-plug-in-with-a-prerequisite-plug-in","title":"Example: Plug-in with a prerequisite plug-in","text":"<p>The following plug-in will only be installed if the plug-in with the ID <code>com.example.primary</code> is available. If that plug-in is not available, a warning is generated and the installation operation fails.</p> <pre><code>&lt;plugin id=\"com.example.builds-on-primary\"&gt;\n  &lt;!-- ... Extensions here --&gt;\n  &lt;require plugin=\"com.example.primary\"/&gt;\n&lt;/plugin&gt;\n</code></pre>"},{"location":"topics/plugin-dependencies/#example-plug-in-that-has-optional-plug-ins","title":"Example: Plug-in that has optional plug-ins","text":"<p>The following plug-in will only be installed if either the plug-in with the ID <code>pluginA</code> or the plug-in with the ID <code>pluginB</code> is available. If neither of those plug-ins are installed, a warning is generated but the installation operation is completed.</p> <pre><code>&lt;plugin id=\"pluginC\"&gt;\n  &lt;!-- ...extensions here --&gt;\n  &lt;require plugin=\"pluginA|pluginB\" importance=\"optional\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Related information </p> <p>Plug-in coding conventions</p>"},{"location":"topics/plugin-javalib/","title":"Adding a Java library to the classpath","text":"<p>You can use the <code>dita.conductor.lib.import</code> extension point to add an additional Java library to the DITA-OT classpath parameter.</p> <p>As of DITA-OT 3.1, the Java class path is managed automatically, meaning you do not (and should not) use explicit references to Java class paths in your build scripts. In particular, the old <code>dost.class.path</code> property has been deprecated and should not be used. If you are migrating older plug-ins that manage their class path directly, you should remove any explicit class path configuration. If your plug-in was not already using the <code>dita.conductor.lib.import</code> extension point to integrate its JAR dependencies you must add it.</p> <p>The effective DITA-OT class path is the combination of the JAR files in the main <code>lib/</code> directory and the plug-in-contributed JARs, which are listed in <code>config/env.sh</code>. The <code>env.sh</code> file is updated automatically when plug-ins are installed or removed.</p> <ol> <li> <p>If necessary, compile the Java code into a JAR file.</p> </li> <li> <p>Create a <code>plugin.xml</code> file that contains the following code:</p> <p><code>&lt;plugin id=\"*plugin-id*\"&gt;   &lt;feature extension=\"dita.conductor.lib.import\" file=\"*file*\"/&gt; &lt;/plugin&gt;</code></p> <p>where:</p> <ul> <li>plugin-id is the plug-in identifier, for example, <code>com.example.addjar</code>.</li> <li>file is the name of the JAR file, for example, <code>myJavaLibrary.jar</code>.</li> <li>Use the <code>dita install</code> subcommand to install the plug-in.</li> </ul> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>The Ant or XSLT code now can make use of the Java code.</p> <p>In the following extended example, the <code>myJavaLibrary.jar</code> file performs a validation step during processing, and you want it to run immediately before the <code>conref</code>step.</p> <p>To accomplish this, you will need to use several features:</p> <ul> <li>The JAR file must be added to the classpath.</li> <li>The Ant target must be added to the dependency chain for conref.</li> <li>An Ant target must be created that uses this class, and integrated into the code.</li> </ul> <p>The files might look like the following:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;plugin id=\"com.example.samplejava\"&gt;\n  *&amp;lt;!-- Add the JAR file to the DITA-OT CLASSPATH --&amp;gt;*\n  **&amp;lt;feature extension=\"dita.conductor.lib.import\" \n           file=\"com.example.sampleValidation.jar\"/&amp;gt;**\n  *&amp;lt;!-- Integrate the Ant code --&amp;gt;*\n  &lt;feature extension=\"ant.import\" file=\"calljava-antcode.xml\"/&gt;\n  *&amp;lt;!-- Define the Ant target to call, and when \\(before conref\\) --&amp;gt;*\n  &lt;feature extension=\"depend.preprocess.conref.pre\" \n           value=\"validateWithJava\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project default=\"validateWithJava\"&gt;\n  &lt;target name=\"validateWithJava\"&gt;\n    &lt;java classname=\"com.example.sampleValidation\"&gt;\n      &lt;!-- The class was added to the DITA-OT classpath --&gt;\n    &lt;/java&gt;\n  &lt;/target&gt;\n&lt;/project&gt;\n</code></pre> <p>Related information </p> <p>General extension points</p> <p>Installing plug-ins</p>"},{"location":"topics/plugin-messages/","title":"Adding new diagnostic messages","text":"<p>Use the <code>dita.xsl.messages</code> extension point to add plug-in-specific messages to the diagnostic messages that are generated by DITA-OT. These messages then can be used by any XSLT override.</p> <ol> <li> <p>Create an XML file that contains the messages that you want to add. Be sure to use the following format for the XML file:</p> <p><code>&lt;messages&gt;   *&amp;lt;!-- See resources/messages.xml for the details. --&amp;gt;*   &lt;message id=\"*Prefix**Number**Letter*\" type=\"*error-severity*\"&gt;     &lt;reason&gt;Message text&lt;/reason&gt;     &lt;response&gt;How to resolve&lt;/response&gt;   &lt;/message&gt; &lt;/messages&gt;</code></p> <p>where:</p> <ul> <li> <p>Prefix is a sequence of four capital letters.</p> <p>Note: By convention, the toolkit messages use <code>DOTX</code> but any sequence can be used by plug-in developers.</p> </li> <li> <p>Number is a three-digit integer.</p> </li> <li> <p>Letter is one of the following upper-case letters: I, W, E, F. It should match the value that is specified for the <code>@type</code> attribute.</p> <p>Note: As the <code>@id</code> attribute is used as a whole and not decomposed by recent versions of the toolkit, you could use any sequence as the message identifier. Nevertheless, to facilitate reuse of the plug-in and make it more readable by other users, we recommend following these guidelines.</p> </li> <li> <p>error-severity specifies the severity of the error. It must be one of the following values:</p> <ul> <li> <p>Info (I)</p> <p>Informational messages highlight the progress of transformation and call attention to conditions of which you should be aware. For example, draft comments are enabled and will be rendered in the output.</p> </li> <li> <p>Warning (W)</p> <p>The toolkit encountered a problem that should be corrected. Processing will continue, but the output might not be as expected.</p> </li> <li> <p>Error (E)</p> <p>The toolkit encountered a more severe problem, and the output is affected. For example, some content is missing or invalid, or the content is not rendered in the output</p> </li> <li> <p>Fatal (F)</p> <p>The toolkit encountered a severe condition, processing stopped, and no output is generated.</p> </li> </ul> <p>Note: The <code>FATAL</code> value throws a fatal error message in XSLT and an exception in Java.</p> <p>Tip: If the <code>@id</code> attribute of your message is equal to the <code>@id</code> of a default DITA-OT message, your message will override the default one. An override cannot change the severity of the overridden message.</p> </li> </ul> </li> <li> <p>Create a <code>plugin.xml</code> file that contains the following content:</p> <p><code>&lt;plugin id=\"*plugin-id*\"&gt;   &lt;feature extension=\"dita.xsl.messages\" file=\"*file*\"/&gt; &lt;/plugin&gt;</code></p> <p>where:</p> <ul> <li>plugin-id is the plug-in identifier, for example, <code>com.example.newmsg</code>.</li> <li>file is the name of the new XML file containing the messages created in step 1, for example, <code>myMessages.xml</code>.</li> <li>Use the <code>dita install</code> subcommand to install the plug-in.</li> </ul> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>Add the following call in XSLT modules to generate a message when a specific condition occurs:</p> <pre><code>&lt;xsl:call-template name=\"output-message\"&gt;\n  &lt;xsl:with-param name=\"id\"&gt;*prefix**number**letter*&lt;/xsl:with-param&gt;\n  &lt;xsl:with-param name=\"msg\"&gt;Message text and parameters.&lt;/xsl:with-param&gt;\n&lt;/xsl:call-template&gt;\n</code></pre> <p>You can also pass custom parameters to the template by using the <code>@msgparams</code> parameter. The value of <code>@msgparams</code> is a semicolon separated list of strings, where each token consists of a percent sign prefixed parameter index, equals sign and parameter value.</p> <pre><code>&lt;xsl:call-template name=\"output-message\"&gt;\n  &lt;xsl:with-param name=\"id\"&gt;*prefix**number**letter*&lt;/xsl:with-param&gt;\n  &lt;xsl:with-param name=\"msgparams\"&gt;*%1=MyFirstValue**;**%2=MySecondValue*&lt;/xsl:with-param&gt;\n&lt;/xsl:call-template&gt;\n</code></pre> <p>Use the <code>ctx</code> parameter if calling from a function.</p> <p>Related information </p> <p>General extension points</p> <p>Installing plug-ins</p>"},{"location":"topics/plugin-newextensions/","title":"Creating a new plug-in extension point","text":"<p>If your plug-in needs to define its own extension points in an XML file, add the string \"<code>_template</code>\" to the filename before the file suffix. When the plug-in is installed, this file will be processed like the built-in DITA-OT templates.</p> <p>Template files are used to integrate most DITA-OT extensions. For example, the <code>dita2xhtml_template.xsl</code> file contains all of the default rules for converting DITA topics to XHTML, along with an extension point for plug-in extensions. When the plug-in is installed, the <code>dita2xhtml.xsl</code> is recreated, and the extension point is replaced with references to all appropriate plug-ins.</p> <p>To mark a new file as a template file, use the <code>&lt;template&gt;</code> element.</p> <p>The template extension namespace has the URI <code>http://dita-ot.sourceforge.net</code>. It is used to identify elements and attributes that have a special meaning in template processing. This documentation uses the <code>dita:</code> prefix to refer to elements in the template extension namespace. However, template files are free to use any prefix, provided that there is a namespace declaration that binds the prefix to the URI of the template extension namespace.</p>"},{"location":"topics/plugin-newextensions/#ditaextension-element","title":"<code>&lt;dita:extension&gt;</code> element","text":"<p>The <code>&lt;dita:extension&gt;</code> elements are used to insert generated content during the plug-in installation process. There are two required attributes:</p> <ul> <li>The <code>@id</code> attribute defines the extension point ID that provides the argument data.</li> <li>The <code>@behavior</code> attribute defines which processing action is used.</li> </ul> <p>Supported values for the <code>@behavior</code> attribute:</p> <ul> <li> <p><code>org.dita.dost.platform.CheckTranstypeAction</code></p> <p>Create Ant condition elements to check if the <code>${transtype}</code> property value equals a supported transformation type value.</p> </li> <li> <p><code>org.dita.dost.platform.ImportAntLibAction</code></p> <p>Create Ant <code>&lt;pathelement&gt;</code> elements for the library import extension point. The <code>@id</code> attribute is used to define the extension point ID.</p> </li> <li> <p><code>org.dita.dost.platform.ImportPluginCatalogAction</code></p> <p>Include plug-in metadata catalog content.</p> </li> <li> <p><code>org.dita.dost.platform.ImportPluginInfoAction</code></p> <p>Create plug-in metadata Ant properties.</p> </li> <li> <p><code>org.dita.dost.platform.ImportStringsAction</code></p> <p>Include plug-in string file content based on the generated text extension point. The <code>@id</code> attribute is used to define the extension point ID.</p> </li> <li> <p><code>org.dita.dost.platform.ImportXSLAction</code></p> <p>Create <code>&lt;xsl:import&gt;</code> elements based on the XSLT import extension point. The <code>@id</code> attribute is used to define the extension point ID.</p> </li> <li> <p><code>org.dita.dost.platform.InsertAction</code></p> <p>Include plug-in conductor content based on the Ant import extension point. The <code>@id</code> attribute is used to define the extension point ID.</p> </li> <li> <p><code>org.dita.dost.platform.InsertAntActionRelative</code></p> <p>Include plug-in conductor content based on the relative Ant import extension point. The <code>@id</code> attribute is used to define the extension point ID.</p> </li> <li> <p><code>org.dita.dost.platform.InsertCatalogActionRelative</code></p> <p>Include plug-in catalog content based on the catalog import extension point. The <code>@id</code> attribute is used to define the extension point ID.</p> </li> <li> <p><code>org.dita.dost.platform.ListTranstypeAction</code></p> <p>Create a pipe-delimited list of supported transformation types.</p> </li> </ul>"},{"location":"topics/plugin-newextensions/#ditaextension-attribute","title":"<code>@dita:extension</code> attribute","text":"<p>The <code>@dita:extension</code> attribute is used to process attributes in elements which are not in the template extension namespace. The value of the attribute is a space-delimited tuple, where the first item is the name of the attribute to process and the second item is the action ID.</p> <p>Supported values:</p> <ul> <li> <p><code>depends org.dita.dost.platform.InsertDependsAction</code></p> <p>The Ant target dependency list is processed to replace all target names that start with an opening brace <code>{</code> character and end with a closing brace <code>}</code>. The value of the extension point is the ID between the braces.</p> </li> </ul>"},{"location":"topics/plugin-newextensions/#example","title":"Example","text":"<p>The following plug-in defines <code>myBuildFile_template.xml</code> as a new template for extensions, and two new extension points.</p> <pre><code>&lt;plugin id=\"com.example.new-extensions\"&gt;\n  &lt;extension-point id=\"com.example.new-extensions.pre\"\n                   name=\"Custom target preprocess\"/&gt;\n  &lt;extension-point id=\"com.example.new-extensions.content\"\n                   name=\"Custom target content\"/&gt;\n  &lt;template file=\"myBuildFile_template.xml\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>When the plug-in is installed, this will be used to recreate <code>myBuildFile.xml</code>, replacing Ant file content based on extension point use.</p> <pre><code>&lt;project xmlns:dita=\"http://dita-ot.sourceforge.net\"&gt;\n  &lt;target name=\"dita2custom\"\n     dita:depends=\"dita2custom.init,\n                  {com.example.new-extensions.pre},\n                   dita2xhtml\"\n     dita:extension=\"depends org.dita.dost.platform.InsertDependsAction\"&gt;\n    &lt;dita:extension id=\"com.example.new-extensions.content\"\n                    behavior=\"org.dita.dost.platform.InsertAction\"/&gt;\n  &lt;/target&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"topics/plugin-newtranstype/","title":"Adding a new transformation type","text":"<p>Plug-ins can add an entirely new transformation type. The new transformation type can be very simple, such as an HTML build that creates an additional control file; it also can be very complex, adding any number of new processing steps.</p> <p>You can use the <code>&lt;transtype&gt;</code> element to define a new transformation type with any new custom parameters that are supported.</p> <p>When a transformation type is defined, the build expects Ant code to be integrated to define the transformation process. The Ant code must define a target based on the name of the transformation type; if the transformation type is \"new-transform\", the Ant code must define a target named dita2new-transform.</p> <ol> <li> <p>Create an Ant project file for the new transformation. This project file must define a target named \"dita2new-transtype,\" where new-transtype is the name of the new transformation type.</p> </li> <li> <p>Create a <code>plugin.xml</code> with the following content:</p> <p><code>&lt;plugin id=\"*plugin-id*\"&gt;   &lt;transtype name=\"*new-transtype*\"/&gt;   **&amp;lt;feature extension=\"dita.transtype.print\" value=\"_new-transtype_\"/&amp;gt;**   &lt;feature extension=\"ant.import\" file=\"*ant-file*\"/&gt; &lt;/plugin&gt;</code></p> <p>where:</p> <ul> <li>plugin-id is the plug-in identifier, for example, com.dita-ot.pdf.</li> <li>new-transtype is the name of the new transformation, for example, dita-ot-pdf.</li> <li>ant-file is the name of the Ant file, for example, <code>build-dita-ot-pdf.xml</code>. Exclude the content that is highlighted in bold if the transformation is not intended for print.</li> </ul> </li> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>You now can use the new transformation.</p>"},{"location":"topics/plugin-newtranstype/#examples","title":"Examples","text":"<p>The following <code>plugin.xml</code> file defines a new transformation type named \"print-pdf\"; it also defines the transformation type to be a print type. The build will look for a dita2print-pdf target.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;\n\n&lt;plugin id=\"com.example.print-pdf\"&gt;\n  &lt;require plugin=\"org.dita.pdf2\"/&gt;\n  &lt;transtype name=\"print-pdf\" extends=\"pdf\" desc=\"PDF on A4 paper\"/&gt;\n  &lt;feature extension=\"dita.transtype.print\" value=\"print-pdf\"/&gt;\n  &lt;feature extension=\"ant.import\" file=\"integrator.xml\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Tip: For a complete sample plug-in with all required code, see Example: Creating a simple PDF plug-in.</p> <p>If your custom transformation type supports custom parameters, they can be defined in nested <code>&lt;param&gt;</code> elements within the <code>&lt;transtype&gt;</code> element.</p> <p>While the <code>org.dita.html5</code> plug-in was separated from <code>common-html</code> in version 2.4, the following example shows how earlier versions of that plug-in used the <code>&lt;transtype&gt;</code> element to extend the common HTML transformation with a new html5 transformation type and define a new nav-toc parameter with three possible values:</p> <pre><code>**&amp;lt;transtype name=\"html5\" extends=\"common-html\" desc=\"HTML5\"&amp;gt;**\n  &lt;param name=\"nav-toc\" type=\"enum\" \n         desc=\"Specifies whether to generate navigation in topic pages.\"&gt;\n    &lt;val default=\"true\" desc=\"No TOC\"&gt;none&lt;/val&gt;\n    &lt;val desc=\"Partial TOC that shows the current topic\"&gt;partial&lt;/val&gt;\n    &lt;val desc=\"Full TOC\"&gt;full&lt;/val&gt;\n  &lt;/param&gt;\n&lt;/transtype&gt;\n</code></pre> <p>Related information </p> <p>General extension points</p> <p>Plug-in descriptor file</p> <p>Installing plug-ins</p>"},{"location":"topics/plugin-overridestyle/","title":"Overriding an XSLT-processing step","text":"<p>You can override specific XSLT-processing steps in both the pre-processing pipeline and certain DITA-OT transformations.</p> <ol> <li> <p>Develop an XSL file that contains the XSL override.</p> </li> <li> <p>Construct a <code>plugin.xml</code> file that contains the following content:</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;plugin id=\"*plugin-id*\"&gt;   &lt;feature extension=\"*extension-point*\" file=\"*relative-path*\"/&gt; &lt;/plugin&gt;</code></p> <p>where:</p> <ul> <li>plugin-id is the plug-in identifier, for example, com.example.brandheader.</li> <li>extension-point is the DITA-OT extension point, for example,<code>dita.xsl.xhtml</code>. This indicates the DITA-OT processing step that the XSL override applies to.</li> <li>relative-path is the relative path and name of the XSLT file, for example, <code>xsl/header.xsl</code>.</li> <li>Use the <code>dita install</code> subcommand to install the plug-in.</li> </ul> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>The plug-in installer adds an XSL import statement to the default DITA-OT code, so that the XSL override becomes part of the normal build.</p>"},{"location":"topics/plugin-overridestyle/#example-overriding-xhtml-header-processing","title":"Example: Overriding XHTML header processing","text":"<p>The following two files represent a complete, simple style plug-in.</p> <p>The <code>plugin.xml</code> file declares an XSLT file that extends XHTML processing:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;plugin id=\"com.example.brandheader\"&gt;\n  &lt;feature extension=\"dita.xsl.xhtml\" file=\"xsl/header.xsl\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>The <code>xsl/header.xsl</code> XSLT file referenced in <code>plugin.xml</code> overrides the default header processing to add a banner:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" \n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n  &lt;xsl:template name=\"gen-user-header\"&gt;\n    &lt;div&gt;&lt;img src=\"http://www.example.com/company_banner.jpg\" \n              alt=\"Example Company Banner\"/&gt;&lt;/div&gt;\n  &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> <p>Related information </p> <p>XSLT-import extension points</p> <p>Installing plug-ins</p>"},{"location":"topics/plugin-preprocess-xslt/","title":"Processing topics with XSLT in preprocess","text":"<p>You can add an Ant target to the end of the pre-processing pipeline that transforms all topics. This is useful if you want to modify topics before transtype-specific processing, for example to modularize the code or reuse the same processing in multiple transformation types.</p> <ol> <li> <p>Create a plug-in descriptor file <code>plugin.xml</code> that imports a new Ant buildfile <code>build.xml</code> and adds an Ant target after pre-processing.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;?xml-model href=\"https://www.dita-ot.org/rng/plugin.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt; &lt;plugin id=\"plugin-id\"&gt;   &lt;feature extension=\"ant.import\" file=\"build.xml\"/&gt;   &lt;feature extension=\"depend.preprocess.post\" value=\"uniform-decimals\"/&gt; &lt;/plugin&gt;</code></p> </li> <li> <p>Create an Ant buildfile <code>build.xml</code> with a target to process all DITA topics in the temporary directory.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;project&gt;   &lt;target name=\"uniform-decimals\"&gt;     &lt;pipeline taskname=\"xslt\"&gt;       &lt;xslt basedir=\"${dita.temp.dir}\"             style=\"${dita.plugin.plugin-id.dir}/filter.xsl\"&gt;         &lt;ditafileset format=\"dita\" processingRole=\"normal\"/&gt;       &lt;/xslt&gt;     &lt;/pipeline&gt;   &lt;/target&gt; &lt;/project&gt;</code></p> </li> <li> <p>Create an XSLT stylesheet <code>filter.xsl</code> to filter topic content.</p> <p>``` &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;  <p> </p> <p> </p> <p> ```</p> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> <p>The <code>filter.xsl</code> stylesheet will transform every DITA topic after preprocessing.</p>"},{"location":"topics/plugin-rewrite-rules/","title":"Adjusting file names in map-first pre-processing","text":"<p>To dynamically adjust the names and locations of output files in the map-first pre-processing routine (<code>preprocess2</code>), you can create a custom plug-in and specify the code that contains your custom rewrite rules.</p> <p>For example, set the result.rewrite-rule.xsl parameter to specify a bundled XSLT stylesheet that contains your custom rewrite rules.</p> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;project name=\"com.example.rewrite.pdf\"&gt;\n  &lt;target name=\"dita2rewrite.pdf.init\"&gt;\n    &lt;property name=\"customization.dir\"\n              location=\"${dita.plugin.com.example.rewrite.pdf.dir}/cfg\"/&gt;\n    **&amp;lt;property name=\"result.rewrite-rule.xsl\" \n              value=\"$\\{dita.plugin.com.example.rewrite.pdf.dir\\}/custom-rules.xsl\"/&amp;gt;**\n  &lt;/target&gt;\n  &lt;target name=\"dita2rewrite.pdf\"\n          depends=\"dita2rewrite.pdf.init, dita2production.pdf, dita2pdf2\"/&gt;\n&lt;/project&gt;\n</code></pre> <p>Your plug-in would also include a <code>custom-rules.xsl</code> file, which might contain templates like this to move all image files to an <code>images</code> subdirectory:</p> <pre><code>&lt;xsl:template match=\"node() | @*\"&gt;\n  &lt;xsl:copy&gt;\n    &lt;xsl:apply-template select=\"node() | @*\"/&gt;\n  &lt;/xsl:copy&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"file[@format = 'image']/@result\"&gt;\n  &lt;xsl:attribute name=\"{local-name()}\" select=\"concat('images/', .)\"/&gt;\n&lt;/xsl:template&gt;\n</code></pre> <p>Note: If your rewrite rules are contained in a Java class, you can set the result.rewrite-rule.class parameter instead, and pass the name of your Java class in the <code>@value attribute.</code> The custom class should implement the <code>org.dita.dost.module.RewriteRule</code> interface.</p>"},{"location":"topics/plugin-set-parameters/","title":"Setting parameters with plug-ins","text":"<p>To ensure that output is always generated with the same settings, you can create a plug-in to define a new output format that automatically sets certain DITA-OT parameters.</p> <p>You might want to build a transformation type that ensures that certain DITA-OT parameters are used. For example, consider the following scenario.</p>"},{"location":"topics/plugin-set-parameters/#draft-pdfs","title":"Draft PDFs","text":"<p>You want to ensure that PDFs generated for internal review have the following characteristics:</p> <ul> <li> <p>Use company style sheets</p> </li> <li> <p>Make draft comments visible to the reviewers, as they contain queries from the information developers</p> </li> <li> <p>Print the file names of the graphics underneath figures, so that graphic artists can more quickly respond to requested changes</p> </li> </ul> <p>To accomplish this, you can create a new plug-in. In the Ant script that defines the transformation type, specify the DITA-OT parameters. For example, to render draft comments and art labels, add <code>&lt;property&gt;</code> elements to specify the DITA-OT parameters:</p> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;project name=\"com.example.draft.pdf\"&gt;\n  &lt;target name=\"dita2draft.pdf.init\"&gt;\n    &lt;property name=\"customization.dir\"\n              location=\"${dita.plugin.com.example.draft.pdf.dir}/cfg\"/&gt;\n    **&amp;lt;property name=\"args.draft\" value=\"yes\"/&amp;gt;**\n    **&amp;lt;property name=\"args.artlbl\" value=\"yes\"/&amp;gt;**\n  &lt;/target&gt;\n  &lt;target name=\"dita2draft.pdf\"\n          depends=\"dita2draft.pdf.init, dita2production.pdf, dita2pdf2\"/&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"topics/plugin-use-cases/","title":"Plug-in use cases","text":"<p>Plug-ins allow you to extend the functionality of DITA-OT. This might entail adding support for specialized document types, integrating processing overrides, or defining new output transformations.</p> <p>Related information </p> <p>Creating DITA-OT constraint/specialisation plugins</p>"},{"location":"topics/plugin-xmlcatalog/","title":"Extending an XML catalog file","text":"<p>You can update either the main DITA-OT XML catalog or the XML catalog that is used by the PDF plug-in. This enables DITA-OT to support new specializations and document-type shells.</p> <p>You can use the dita.specialization.catalog.relative and org.dita.pdf2.catalog.relative extension points to update the DITA-OT catalog files.</p> <p>Remember: The dita.specialization.catalog extension is deprecated. Use dita.specialization.catalog.relative instead.</p> <ol> <li> <p>Using the OASIS catalog format, create an XML catalog file that contains only the new values that you want to add to a DITA-OT catalog file.</p> </li> <li> <p>Create a <code>plugin.xml</code> file that contains the following content:</p> <p><code>&lt;plugin id=\"*plugin-id*\"&gt;   &lt;feature extension=\"*extension-point*\" file=\"*file*\"/&gt; &lt;/plugin&gt;</code></p> <p>where:</p> <ul> <li>plugin-id is the plug-in identifier, for example, <code>com.example.catalog</code>.</li> <li>extension-point is either dita.specialization.catalog.relative or org.dita.pdf2.catalog.relative.</li> <li>file is the name of the new catalog file, for example, <code>catalog-dita.xml</code>.</li> <li>Save the new XML catalog file to your plug-in. Be sure that the local file references are relative to the location of the catalog and plug-in.</li> </ul> </li> <li> <p>Use the <code>dita install</code> subcommand to install the plug-in.</p> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>The catalog entries inside of the new catalog file are added to the core DITA-OT catalog file.</p>"},{"location":"topics/plugin-xmlcatalog/#example","title":"Example","text":"<p>This example assumes that <code>catalog-dita.xml</code> contains an OASIS catalog for any document-type shells inside this plug-in. The catalog entries in <code>catalog-dita.xml</code> are relative to the catalog itself; when the plug-in is installed, they are added to the core DITA-OT catalog (with the correct path).</p> <pre><code>&lt;plugin id=\"com.example.catalog\"&gt;\n  &lt;feature extension=\"dita.specialization.catalog.relative\"\n           file=\"catalog-dita.xml\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Related information </p> <p>General extension points</p> <p>Installing plug-ins</p>"},{"location":"topics/plugin-xsltparams/","title":"Adding parameters to existing XSLT steps","text":"<p>You can pass parameters from the Ant build to existing XSLT steps in both the pre-processing pipeline and certain DITA-OT transformations. This can be useful if you want to make the parameters available as global <code>&lt;xsl:param&gt;</code> values within XSLT overrides.</p> <ol> <li> <p>Create an XML file that contains one or more Ant <code>&lt;param&gt;</code> elements nested within a <code>&lt;dummy&gt;</code> wrapper element.</p> <p><code>&lt;dummy&gt;   *&amp;lt;!-- Any Ant code allowed in xslt task is possible. Example: --&amp;gt;*   &lt;param name=\"paramNameinXSLT\" expression=\"${antProperty}\"           if=\"antProperty\"/&gt; &lt;/dummy&gt;</code></p> </li> <li> <p>Construct a <code>plugin.xml</code> file that contains the following content:</p> <p><code>&lt;plugin id=\"*plugin-id*\"&gt;   &lt;feature extension=\"*extension-point*\" file=\"*file*\"/&gt; &lt;/plugin&gt;</code></p> <p>where:</p> <ul> <li>plugin-id is the plug-in identifier, for example, <code>com.example.newparam</code>.</li> <li>extension-point is the DITA-OT extension point, for example,<code>dita.conductor.xhtml.param</code>. This indicates the DITA-OT processing step where the parameters will be available.</li> <li>file is the name of the XML file that you created in step 1, for example, <code>insertParameters.xml</code>.</li> <li>Use the <code>dita install</code> subcommand to install the plug-in.</li> </ul> <p>Note: For more information, see Installing plug-ins.</p> </li> </ol> <p>The <code>plugin.xml</code> file passes the parameters to the specified transformation or pre-processing module.</p>"},{"location":"topics/plugin-xsltparams/#example","title":"Example","text":"<p>The following plug-in passes the parameters defined in the <code>insertParameters.xml</code> file as input to the XHTML process. Generally, an additional XSLT override will make use of the parameters to do something new with the generated content.</p> <pre><code>&lt;plugin id=\"com.example.newparam\"&gt;\n  &lt;feature extension=\"dita.conductor.xhtml.param\" \n           file=\"insertParameters.xml\"/&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Related information </p> <p>XSLT-parameter extension points</p> <p>Installing plug-ins</p>"},{"location":"topics/plugins-installing/","title":"Installing plug-ins","text":"<p>Use the <code>dita install</code> subcommand to install plug-ins.</p> <ol> <li> <p>At the command-line prompt, enter the following command:</p> <p><code>syntax-bash `dita install` *&amp;lt;plug-in&amp;gt;*</code></p> <p>where:</p> <ul> <li>the optional <code>*&amp;lt;plug-in&amp;gt;*</code> argument is one of the following:<ul> <li>the unique ID of the plug-in as defined in the plug-in registry at dita-ot.org/plugins (or a local registry)</li> <li>the remote URL of the plug-in\u2019s distribution ZIP file</li> <li>the name of a local ZIP file Note: In earlier versions of DITA-OT (2.4\u20133.4), use the double-hyphen option syntax <code>dita</code> --install. In DITA-OT 2.0\u20132.3, use the single-hyphen form: <code>dita</code> -install.</li> </ul> </li> </ul> <p>Tip: If no ID, URL, or file argument is provided, the installation process reloads the current set of plug-ins from the <code>plugins</code> directory (or any custom locations defined via the pluginsdir property in the <code>configuration.properties</code> file in the <code>config</code> directory). This approach can be used to add or remove multiple plug-ins at once, or any individual plug-ins you have already copied to (or removed from) the plug-in directories. Any plug-ins added or removed in the process will be listed by their plug-in ID.</p> </li> </ol> <p>Related information </p> <p>Creating custom plug-ins</p> <p>Adding plug-ins via the registry</p> <p>The configuration.properties file</p> <p>Arguments and options for the dita command</p> <p>Plug-in installation made easier</p>"},{"location":"topics/plugins-registry/","title":"Adding plug-ins via the registry","text":"<p>DITA-OT 3.2 supports a new plug-in registry that makes it easier to discover and install new plug-ins. The registry provides a searchable list of plug-ins at dita-ot.org/plugins.</p> <p>In the past, installing plug-ins required you to either download a plug-in to your computer and provide the path to the plug-in archive (.zip file) or pass the URL of the plug-in distribution file to the <code>dita</code> command and let DITA-OT download the file. This required that you know the URL of the plug-in distribution package.</p>"},{"location":"topics/plugins-registry/#installing-plug-ins-from-the-registry","title":"Installing plug-ins from the registry","text":"<p>With the registry, you can now search the list of available plug-ins at dita-ot.org/plugins and install new plug-ins by name and optional version.</p> <p>Search the registry for a plug-in and install it by providing the plug-in name to the <code>dita</code> command.</p> <pre><code>`dita` **--install**=*&amp;lt;plugin-name&amp;gt;*\n</code></pre> <p>If the registry includes multiple versions of the same plug-in, you can specify the version to install as follows:</p> <pre><code>`dita` **--install**=*&amp;lt;plugin-name&amp;gt;@&amp;lt;plugin-version&amp;gt;*\n</code></pre> <p>If the plug-in requires other plug-ins, those are also installed recursively.</p> <p>For example, to revert PDF output to the legacy PDF2 layout that was the default in DITA-OT before 2.5, install the <code>org.dita.pdf2.legacy</code> plug-in as follows:</p> <pre><code>`dita` **--install**=org.dita.pdf2.legacy\n</code></pre> <p>If a matching plug-in cannot be found, an error message will appear. Possible reasons for failure include:</p> <ul> <li>A plug-in with the specified name was not found in the registry</li> <li>A plug-in with the specified version was not found in the registry</li> <li>The specified plug-in version is not compatible with the installed DITA-OT version</li> <li>None of the available plug-in versions are compatible with the installed DITA-OT version</li> </ul>"},{"location":"topics/plugins-registry/#publishing-plug-ins-to-the-registry","title":"Publishing plug-ins to the registry","text":"<p>The contents of the DITA Open Toolkit plug-in registry are stored in a Git repository at github.com/dita-ot/registry. New plug-ins or new versions can be added by sending a pull request that includes a single new plug-in entry in JavaScript Object Notation (JSON) format.</p> <p>Note: As for all other contributions to the project, pull requests to the registry must be signed off by passing the <code>--signoff</code> option to the <code>git commit</code> command to certify that you have the rights to submit this contribution. For more information on this process, see signing your work.</p> <p>The version entries for each plug-in are stored in a file that is named after the plug-in ID as <code>&lt;plugin-name&gt;.json</code>. The file contains an array of entries with a pre-defined structure. You should have one entry for each supported version of the plug-in.</p> Key Mandatory Description <code>name</code> yes Plug-in name <code>vers</code> yes Plug-in version in semantic versioning format <code>deps</code> yes Array of dependency entries. The only mandatory plug-in dependency is <code>org.dita.base</code>, which defines the supported DITA-OT platform. <code>url</code> yes Absolute URL to plug-in distribution file <code>cksum</code> no SHA-256 hash of the plug-in distribution file <code>description</code> no Description of the plug-in <code>keywords</code> no Array of keywords <code>homepage</code> no Plug-in homepage URL <code>license</code> no License in SPDX format <p>Tip: To calculate the SHA-256 checksum for the <code>cksum</code> key, use <code>shasum\u00a0-a\u00a0256 *&amp;lt;plugin-file&amp;gt;*</code> on macOS or Linux. With\u00a0Windows\u00a0PowerShell, use <code>[Get-FileHash](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-filehash?view=powershell-6)\u00a0*&amp;lt;plugin-file&amp;gt;* | Format-List</code>.</p> Key Mandatory Description <code>name</code> yes Plug-in name <code>req</code> yes Required plug-in version in semantic versioning format that may contain ranges. <p>Note: Version numbers in the <code>vers</code> and <code>req</code> keys use the three-digit format specified by semantic versioning. An initial development release of a plug-in might start at version 0.1.0, and an initial production release at 1.0.0. If your plug-in requires DITA-OT 3.1 or later, set the <code>req</code> key to <code>&gt;=3.1.0</code>. Using the greater-than sign allows your plug-in to work with compatible maintenance releases, such as 3.1.3. If the requirement is set to <code>=3.1.0</code>, the registry will only offer it for installation on that exact version.</p>"},{"location":"topics/plugins-registry/#sample-plug-in-entry-file","title":"Sample plug-in entry file","text":"<p>The example below shows an entry for the <code>DocBook</code> plug-in. The complete file is available in the registry as org.dita.docbook.json.</p> <pre><code>[\n  {\n    \"name\": \"org.dita.docbook\",\n    \"description\": \"Convert DITA to DocBook.\",\n    \"keywords\": [\"DocBook\"],\n    \"homepage\": \"https://github.com/dita-ot/org.dita.docbook/\",\n    \"vers\": \"2.3.0\",\n    \"license\": \"Apache-2.0\",\n    \"deps\": [\n      {\n        \"name\": \"org.dita.base\",\n        \"req\": \"&gt;=2.3.0\"\n      }\n    ],\n    \"url\": \"https://github.com/dita-ot/org.dita.docbook/archive/2.3.zip\",\n    \"cksum\": \"eaf06b0dca8d942bd4152615e39ee8cfb73a624b96d70e10ab269ed6f8a13e21\"\n  }\n]\n</code></pre>"},{"location":"topics/plugins-registry/#maintaining-multiple-plug-in-versions","title":"Maintaining multiple plug-in versions","text":"<p>When you have multiple versions of a plug-in, include an entry for each version, separated by a comma:</p> <pre><code>[\n  {\n    \"name\": \"org.example.myplugin\",\n     [...]\n    \"vers\": \"1.0.1\",\n     [...]\n  }**,**\n  {\n    \"name\": \"org.example.myplugin\",\n     [...]\n    \"vers\": \"2.1.0\",\n     [...]\n  }\n]\n</code></pre> <p>Tip: To publish a new version of your plug-in to the registry, add a new entry to the array in the existing plug-in entry file rather than overwriting an existing entry. This allows users to install the previous version of the plug-in if they are using an older version of DITA-OT.</p>"},{"location":"topics/plugins-registry/#adding-custom-registries","title":"Adding custom registries","text":"<p>In addition to the main plug-in registry at dita-ot.org/plugins, you can create a registry of your own to store the custom plug-ins for your company or organization.</p> <p>A registry is just a directory that contains JSON files like the one above; each JSON file represents one entry in the registry. To add a custom registry location, edit the <code>config/configuration.properties</code> file in the DITA-OT installation directory and add the URL for your custom registry directory to the <code>registry</code> key value, separating each entry with a space.</p> <p>Tip: Custom registry entries are a simple way to test your own plug-in entry file before submitting to a common registry.</p>"},{"location":"topics/plugins-registry/#testing-with-a-custom-registry","title":"Testing with a custom registry","text":"<p>To test your plug-in entry with a custom registry:</p> <ol> <li>Fork the plug-in registry, which creates a new repository under your GitHub username\u200a\u2014\u200afor example, <code>https://github.com/USERNAME/registry.git</code>.</li> <li>Create a new branch for your plug-in entry, and add the JSON file to the branch\u200a\u2014\u200afor example, create <code>org.example.newPlugin.json</code> in the branch <code>addPlugin</code>.</li> <li> <p>As long as your repository is accessible, that branch now represents a working \u201ccustom registry\u201d that can be added to the <code>config/configuration.properties</code> file. Edit the <code>registry</code> key and add the raw GitHub URL for the branch that contains the JSON file. With the example username and branch name above, you can add your registry with:</p> <p><code>language-properties registry=https://raw.githubusercontent.com/USERNAME/registry/addPlugin/ http://plugins.dita-ot.org/</code></p> </li> <li> <p>You can now test the plug-in installation with:</p> <p><code>`dita` **--install**=org.example.newPlugin</code></p> </li> <li> <p>Once you\u2019ve confirmed that the entry works, you can submit a pull request to have your entry added to the common registry.</p> </li> </ol> <p>Related information </p> <p>Installing plug-ins</p> <p>The Art of doing nothing</p> <p>All the cool kids are using the Cloud</p> <p>All the cool kids are using JavaScript</p> <p>AH-WML DITA-to-Word Plug-in</p> <p>Validation meets publication - Apply your style guide rules during the publication</p> <p>Overview of dita-semia open-source plugins for DITA-OT</p> <p>Unit Testing DITA-OT Plugin Extensions</p> <p>Plug-in installation made easier</p> <p>DITA terminology management and checking</p>"},{"location":"topics/plugins-removing/","title":"Removing plug-ins","text":"<p>Use the <code>dita uninstall</code> subcommand to remove a plug-in.</p> <ol> <li> <p>At the command-line prompt, enter the following command:</p> <p><code>syntax-bash `dita uninstall` *&amp;lt;plug-in-id&amp;gt;*</code></p> <p>where:</p> <ul> <li><code>*&amp;lt;plug-in-id&amp;gt;*</code> is the unique ID of the plug-in, as defined in the plug-in\u2019s configuration file (<code>plugin.xml</code>). Note: In earlier versions of DITA-OT (2.4\u20133.4), use the double-hyphen option syntax <code>dita</code> --uninstall. In DITA-OT 2.0\u20132.3, use the single-hyphen form: <code>dita</code> -uninstall.</li> </ul> <p>Attention: The <code>uninstall</code> subcommand also removes the corresponding plug-in directory from the <code>plugins</code> folder.</p> </li> </ol> <p>Related information </p> <p>Arguments and options for the dita command</p> <p>Trim your toolkit with this one weird trick!</p>"},{"location":"topics/prerequisite-software/","title":"Prerequisite software","text":"<p>The software that DITA-OT requires depends on the output formats you want to use.</p>"},{"location":"topics/prerequisite-software/#software-required-for-core-dita-ot-processing","title":"Software required for core DITA-OT processing","text":"<p>DITA-OT requires the following software applications:</p> <ul> <li> <p>Java Runtime Environment (JRE) or Java Development Kit (JDK)</p> <p>DITA-OT 4.1 is designed to run on Java version 17 or later and built and tested with the Open Java Development Kit (OpenJDK). Compatible Java distributions are available from multiple sources:</p> <ul> <li>You can download the Oracle JRE or JDK from oracle.com/java under commercial license.</li> <li>Eclipse Temurin is the free OpenJDK distribution available from adoptium.net.</li> <li>Free OpenJDK distributions are also provided by Amazon Corretto, Azul Zulu, and Red Hat. Note: This is the only prerequisite that you need to install. All other required software is provided in the distribution package, including Apache Ant\u2122 1.10.13, Saxon 12.3, and ICU for Java 70.1.</li> </ul> </li> </ul>"},{"location":"topics/prerequisite-software/#software-required-for-specific-transformations","title":"Software required for specific transformations","text":"<p>Depending on the type of output that you want to generate, you might need the following applications:</p> <ul> <li> <p>Microsoft Help Workshop</p> <p>Required for generating HTML help. You can download the Help Workshop from msdn.microsoft.com.</p> </li> <li> <p>XSL-FO processor</p> <p>Required for generating PDF output. Apache\u2122 FOP (Formatting Objects Processor) 2.8 is included in the distribution package. You can download other versions from xmlgraphics.apache.org/fop. You can also use commercial FO processors such as Antenna House Formatter or RenderX XEP.</p> </li> </ul>"},{"location":"topics/project-files-json/","title":"Sample JSON project files","text":"<p>DITA-OT includes sample project files in JSON format that can be used to define a publication project. Like the XML project samples, the sample JSON files illustrate how deliverables can be described for use in publication projects. The JSON samples are functionally equivalent to their XML and YAML counterparts, with minor adaptations to JSON file syntax.</p> <p>Project files can be designed in a modular fashion to create reusable configuration structures that allow you to define settings in one file and refer to them in other projects to publish multiple deliverables at once.</p> <p>For example, <code>*dita-ot-dir*/docsrc/samples``/project-files/html.json</code> defines a single HTML deliverable.</p> <pre><code>{\n  \"includes\": [\"common.json\"],\n  \"deliverables\": [\n    {\n      \"name\": \"HTML5\",\n      \"context\": {\"idref\": \"html\"},\n      \"output\": \".\",\n      \"publication\": {\n        \"transtype\": \"html5\",\n        \"params\": [\n          {\n            \"name\": \"args.copycss\",\n            \"value\": \"yes\"\n          },\n          {\n            \"name\": \"args.css\",\n            \"value\": \"dita-ot-doc.css\"\n          },\n          {\n            \"name\": \"args.csspath\",\n            \"value\": \"css\"\n          },\n          {\n            \"name\": \"args.cssroot\",\n            \"path\": \"../../resources\"\n          },\n          {\n            \"name\": \"args.gen.task.lbl\",\n            \"value\": \"YES\"\n          },\n          {\n            \"name\": \"args.hdr\",\n            \"href\": \"../../resources/header.xml\"\n          },\n          {\n            \"name\": \"args.rellinks\",\n            \"value\": \"noparent\"\n          },\n          {\n            \"name\": \"html5.toc.generate\",\n            \"value\": \"no\"\n          },\n          {\n            \"name\": \"nav-toc\",\n            \"value\": \"partial\"\n          }\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>This file can be used to generate the HTML version of the DITA-OT documentation by running the following command from the <code>docsrc</code> folder of the DITA-OT installation directory:</p> <pre><code>`dita` **--project**=*samples/project-files/html.json*\n</code></pre> <p>The project file for HTML output imports the common <code>html</code> context from a shared project context defined in the <code>*dita-ot-dir*/docsrc/samples``/project-files/common.json</code> file, which includes the input map file and the DITAVAL file used to filter the output.</p> <pre><code>{\n  \"contexts\": [\n    {\n      \"id\": \"html\",\n      \"input\": \"../../userguide.ditamap\",\n      \"profiles\": {\n        \"ditavals\": [\"../../resources/html.ditaval\"]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"topics/project-files-xml/","title":"Sample XML project files","text":"<p>DITA-OT includes sample XML project files that can be used to define a publication project. The XML format can be validated with a RELAX\u00a0NG schema provided in the <code>resources</code> folder of the DITA-OT installation (<code>project.rnc</code>).</p> <p>Project files can be designed in a modular fashion to create reusable configuration structures that allow you to define settings in one file and refer to them in other projects to publish multiple deliverables at once.</p> <p>For example, <code>*dita-ot-dir*/docsrc/samples``/project-files/html.xml</code> defines a single HTML deliverable.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?xml-model href=\"https://www.dita-ot.org/rng/project.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;\n&lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;\n  &lt;include href=\"common.xml\"/&gt;\n  &lt;deliverable name=\"HTML5\" id=\"html\"&gt;\n    &lt;context idref=\"html\"/&gt;\n    &lt;output href=\".\"/&gt;\n    &lt;publication transtype=\"html5\"&gt;\n      &lt;param name=\"args.copycss\" value=\"yes\"/&gt;\n      &lt;param name=\"args.css\" value=\"dita-ot-doc.css\"/&gt;\n      &lt;param name=\"args.csspath\" value=\"css\"/&gt;\n      &lt;param name=\"args.cssroot\" path=\"../../resources\"/&gt;\n      &lt;param name=\"args.gen.task.lbl\" value=\"YES\"/&gt;\n      &lt;param name=\"args.hdr\" href=\"../../resources/header.xml\"/&gt;\n      &lt;param name=\"args.rellinks\" value=\"noparent\"/&gt;\n      &lt;param name=\"html5.toc.generate\" value=\"no\"/&gt;\n      &lt;param name=\"nav-toc\" value=\"partial\"/&gt;\n    &lt;/publication&gt;\n  &lt;/deliverable&gt;\n&lt;/project&gt;\n</code></pre> <p>This file can be used to generate the HTML version of the DITA-OT documentation by running the following command from the <code>docsrc</code> folder of the DITA-OT installation directory:</p> <pre><code>`dita` **--project**=`samples/project-files/html.xml`\n</code></pre> <p>The project file for HTML output imports the common <code>html</code> context from a shared project context defined in the <code>*dita-ot-dir*/docsrc/samples``/project-files/common.xml</code> file, which includes the input map file and the DITAVAL file used to filter the output.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?xml-model href=\"https://www.dita-ot.org/rng/project.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;\n&lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;\n  &lt;context id=\"html\" name=\"HTML\"&gt;\n    &lt;input href=\"../../userguide.ditamap\"/&gt;\n    &lt;profile&gt;\n      &lt;ditaval href=\"../../resources/html.ditaval\"/&gt;\n    &lt;/profile&gt;\n  &lt;/context&gt;\n&lt;/project&gt;\n</code></pre> <p>The same common <code>html</code> context is also referenced in the project file for HTMLHelp output, as illustrated in <code>*dita-ot-dir*/docsrc/samples``/project-files/htmlhelp.xml</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?xml-model href=\"https://www.dita-ot.org/rng/project.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;\n&lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;\n  &lt;deliverable name=\"HTMLHelp\" id=\"htmlhelp\"&gt;\n    &lt;context idref=\"html\"/&gt;\n    &lt;output href=\"htmlhelp\"/&gt;\n    &lt;publication transtype=\"htmlhelp\"&gt;\n      &lt;param name=\"args.copycss\" value=\"yes\"/&gt;\n      &lt;param name=\"args.css\" value=\"dita-ot-doc.css\"/&gt;\n      &lt;param name=\"args.csspath\" value=\"css\"/&gt;\n      &lt;param name=\"args.cssroot\" path=\"../../resources\"/&gt;\n      &lt;param name=\"args.gen.task.lbl\" value=\"YES\"/&gt;\n    &lt;/publication&gt;\n  &lt;/deliverable&gt;\n&lt;/project&gt;\n</code></pre> <p>The <code>*dita-ot-dir*/docsrc/samples``/project-files/pdf.xml</code> file defines a single PDF deliverable.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?xml-model href=\"https://www.dita-ot.org/rng/project.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt;\n&lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;\n  &lt;deliverable id=\"pdf\"&gt;\n    &lt;context name=\"User Guide\"&gt;\n      &lt;input href=\"../../userguide-book.ditamap\"/&gt;\n    &lt;/context&gt;\n    &lt;output href=\".\"/&gt;\n    &lt;publication transtype=\"pdf2\"&gt;\n      &lt;param name=\"args.chapter.layout\" value=\"BASIC\"/&gt;\n      &lt;param name=\"args.gen.task.lbl\" value=\"YES\"/&gt;\n      &lt;param name=\"include.rellinks\" value=\"#default external\"/&gt;\n      &lt;param name=\"outputFile.base\" value=\"userguide\"/&gt;\n      &lt;param name=\"theme\" path=\"../themes/dita-ot-docs-theme.yaml\"/&gt;\n      &lt;profile&gt;\n        &lt;ditaval href=\"../../resources/pdf.ditaval\"/&gt;\n      &lt;/profile&gt;\n    &lt;/publication&gt;\n  &lt;/deliverable&gt;\n&lt;/project&gt;\n</code></pre> <p>This file can be used to generate the PDF version of the DITA-OT documentation by running the following command from the <code>docsrc</code> folder of the DITA-OT installation directory:</p> <pre><code>`dita` **--project**=`samples/project-files/pdf.xml`\n</code></pre> <p>The <code>*dita-ot-dir*/docsrc/samples``/project-files/distribution-docs.xml</code> file includes both the HTML and PDF projects as follows:</p> <pre><code>&lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;\n  &lt;include href=\"html.xml\"/&gt;\n  &lt;include href=\"pdf.xml\"/&gt;\n&lt;/project&gt;\n</code></pre> <p>To build both the HTML and PDF versions of the documentation as included in the distribution package, run the following command from the <code>docsrc</code> folder of the DITA-OT installation directory:</p> <pre><code>`dita` **--project**=`samples/project-files/distribution-docs.xml`\n</code></pre> <p>The <code>*dita-ot-dir*/docsrc/samples``/project-files/all.xml</code> file includes all three project deliverables as follows:</p> <pre><code>&lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;\n  &lt;include href=\"html.xml\"/&gt;\n  &lt;include href=\"htmlhelp.xml\"/&gt;\n  &lt;include href=\"pdf.xml\"/&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"topics/project-files-yaml/","title":"Sample YAML project files","text":"<p>DITA-OT includes sample project files in YAML format that can be used to define a publication project. Like the XML project samples, the sample YAML files illustrate how deliverables can be described for use in publication projects. The YAML samples are functionally equivalent to their XML and JSON counterparts, with minor adaptations to YAML file syntax.</p> <p>Project files can be designed in a modular fashion to create reusable configuration structures that allow you to define settings in one file and refer to them in other projects to publish multiple deliverables at once.</p> <p>For example, <code>*dita-ot-dir*/docsrc/samples``/project-files/html.yaml</code> defines a single HTML deliverable.</p> <pre><code>---\nincludes:\n  - 'common.yaml'\ndeliverables:\n  - name: 'HTML5'\n    context:\n      idref: 'html'\n    output: '.'\n    publication:\n      transtype: 'html5'\n      params:\n        - name: 'args.copycss'\n          value: 'yes'\n        - name: 'args.css'\n          value: 'dita-ot-doc.css'\n        - name: 'args.csspath'\n          value: 'css'\n        - name: 'args.cssroot'\n          path: '../../resources'\n        - name: 'args.gen.task.lbl'\n          value: 'YES'\n        - name: 'args.hdr'\n          href: '../../resources/header.xml'\n        - name: 'args.rellinks'\n          value: 'noparent'\n        - name: 'html5.toc.generate'\n          value: 'no'\n        - name: 'nav-toc'\n          value: 'partial'\n</code></pre> <p>This file can be used to generate the HTML version of the DITA-OT documentation by running the following command from the <code>docsrc</code> folder of the DITA-OT installation directory:</p> <pre><code>`dita` **--project**=*samples/project-files/html.yaml*\n</code></pre> <p>The project file for HTML output imports the common <code>html</code> context from a shared project context defined in the <code>*dita-ot-dir*/docsrc/samples``/project-files/common.yaml</code> file, which includes the input map file and the DITAVAL file used to filter the output.</p> <pre><code>---\ncontexts:\n  - id: 'html'\n    input: '../../userguide.ditamap'\n    profiles:\n      ditavals:\n        - '../../resources/html.ditaval'\n</code></pre>"},{"location":"topics/publishing-with-ant/","title":"Building output using Ant","text":"<p>You can use Ant to invoke DITA Open Toolkit and generate output. You can use the complete set of parameters that the toolkit supports.</p> <p>Related information </p> <p>Migrating Ant builds to use the dita command</p>"},{"location":"topics/rebuilding-docs/","title":"Rebuilding the DITA-OT documentation","text":"<p>When you add or remove plug-ins, you can rebuild the documentation to update the information on the extension points, messages, and parameters that are available in your environment.</p> <p>DITA-OT ships with a Gradle build script that enables you to rebuild the toolkit documentation. The build script reads the toolkit\u2019s plug-in configuration and automatically regenerates topics and properties file templates based on the extension points, messages, and parameters provided by the installed plug-ins.</p> <p>Attention: If you have installed new plug-ins, you may need to add the corresponding generated topics to the DITA maps to include the new information in the output.</p> <ol> <li> <p>Change to the <code>docsrc/</code> subdirectory of the DITA-OT installation.</p> </li> <li> <p>Run one of the following commands.</p> <ul> <li> <p>On Linux and macOS:</p> <p><code>./gradlew *target*</code></p> </li> <li> <p>On Windows:</p> <p><code>gradlew.bat *target*</code></p> </li> </ul> <p>The target parameter is optional and specifies a transformation type. It takes the following values:</p> <ul> <li>html</li> <li>htmlhelp</li> <li>pdf If you do not specify a target, HTML5 and PDF output is generated.</li> </ul> </li> </ol>"},{"location":"topics/reducing-processing-time/","title":"Speeding up builds","text":"<p>Several configuration changes can significantly reduce DITA-OT processing time.</p>"},{"location":"topics/reducing-processing-time/#disable-debug-attribute-generation","title":"Disable debug attribute generation","text":"<p>The generate-debug-attributes parameter determines whether debugging attributes are generated in the temporary files. By changing the value to <code>false</code>, DITA-OT will no longer generate the <code>@xtrf</code> and <code>@xtrc</code> debug attributes. This will make it more difficult to track down the source file location from which a given issue may have originated, but it will reduce the size of the temporary files. As a result, XML parsing will take less time and overall processing time will be reduced.</p>"},{"location":"topics/reducing-processing-time/#use-a-fast-disk-for-the-temporary-directory","title":"Use a fast disk for the temporary directory","text":"<p>DITA-OT keeps topic and map files as separate files and processes each file multiple times during preprocessing. Thus reading from disk, parsing XML, serializing XML, and writing to disk makes processing quite I/O intensive. Use either an SSD or a RAM disk for temporary files, and never use a temporary directory that is not located on the same machine as where the processing takes place.</p>"},{"location":"topics/reducing-processing-time/#enable-parallel-processing","title":"Enable parallel processing","text":"<p>As of DITA-OT 3.6, preprocessing module code can be run in parallel by setting the parallel parameter to true. The performance benefits this option provides depend heavily on the source file set, the DITA features used in the project, and the computer doing the processing, but under the right circumstances, you may see notable improvements when this option is enabled.</p>"},{"location":"topics/reducing-processing-time/#enable-in-memory-processing","title":"Enable in-memory processing","text":"<p>As of DITA-OT 3.6, the Cache Store can be activated by setting the store-type parameter to memory. In-memory processing provides performance advantages in I/O bound environments such as cloud computing platforms, where processing time depends primarily on how long it takes to read and write temporary files. For more information, see Store API \u2013 Processing in memory.</p>"},{"location":"topics/reducing-processing-time/#reuse-the-jvm-instance","title":"Reuse the JVM instance","text":"<p>For all but large source sets, the Java virtual machine (JVM) will not have enough time to warm-up. By reusing the same JVM instance, the first few DITA-OT conversions will be \u201cnormal\u201d, but when the Just-In-Time (JIT) compiler starts to kick in, the performance increase may be 2-10 fold. This is especially noticeable with smaller source sets, as much of the DITA-OT processing is I/O intensive.</p> <p>Tip: The Gradle Daemon uses this mechanism (along with incremental builds) to reduce processing time. You can run DITA-OT with these features via the DITA-OT Gradle Plugin.</p>"},{"location":"topics/reducing-processing-time/#use-the-latest-java-version","title":"Use the latest Java version","text":"<p>DITA-OT 2.0 to 2.3 require Java 7, and DITA-OT 2.4 and newer require Java 8. However, using a newer version of Java may further reduce processing time, depending on your operating system.</p>"},{"location":"topics/reducing-processing-time/#re-enable-java-file-caching","title":"Re-enable Java file caching","text":"<p>As of Java 12, the file canonicalization cache is no longer enabled by default (see JDK-8207005). On Windows, this results in significantly longer build times, and slight increases on Linux. To re-enable file caching, add <code>-Dsun.io.useCanonCaches=true</code> to the Java invocation command in the <code>dita.bat</code> and <code>ant.bat</code> wrapper scripts.</p> <p>Note: As of DITA-OT 3.7.3, this system property is set by default in the bundled wrapper scripts.</p> <p>Collected links </p> <p>SSD</p> <p>RAM disk</p>"},{"location":"topics/referencing-other-plugins/","title":"Referencing files from other plug-ins","text":"<p>Starting with DITA-OT 1.5.4, you can use the <code>plugin:*plugin-id*</code> URI extension and the <code>${dita.plugin.*plugin-id*.dir}</code> Ant variable to reference the base path of another installed DITA-OT plug-in.</p> <p>Sometimes you need to reference content in another DITA-OT plug-in. However, the path to an installed plug-in is not guaranteed to be the same between different installed instances of DITA-OT. The <code>plugin:*plugin-id*</code> URI extension and <code>${dita.plugin.*plugin-id*.dir}</code> Ant variable are provided so your build and XSLT files always use the correct path to the plug-in.</p> <p>Within a single plug-in, you can safely use relative path references, for example, <code>xsl/my.xsl</code> without specifying the path to the plug-in itself.</p> <ul> <li> <p>Use <code>${dita.plugin.*plugin-id*.dir}</code> in Ant build files.</p> <p>Use the Ant variable <code>${dita.plugin.*plugin-id*.dir}</code> anywhere in your build file or template to point to the base path of an installed DITA-OT plug-in.</p> <p>The following example copies CSS files from the HTML5 plug-in:</p> <p><code>&lt;copy todir=\"${dita.temp.dir}/css\"&gt;   &lt;fileset dir=\"${dita.plugin.org.dita.html5.dir}/css\"             includes=\"*.css\"/&gt; &lt;/copy&gt;</code></p> </li> <li> <p>Use <code>plugin:*plugin-id*</code> in XSLT files.</p> <p>Use the URI extension <code>plugin:*plugin-id*</code> at the beginning of a file reference\u2014usually in <code>&lt;xsl:import&gt;</code>\u2014to point to the base path of an installed DITA-OT plug-in.</p> <p>The following example imports the base output-message.xsl processing:</p> <p><code>language-xml &lt;xsl:import href=\"plugin:org.dita.base:xsl/common/output-message.xsl\"/&gt;</code></p> <p>To use the URI extension, your plug-in must reference the DITA-OT catalog file. In your Ant build file, add an <code>&lt;xmlcatalog&gt;</code> element referencing the DITA-OT catalog file as a child of the <code>&lt;xslt&gt;</code> element.</p> <p><code>&lt;xslt style=\"xsl/my.xsl\"       in=\"${dita.temp.dir}/input.file\"        out=\"${dita.temp.dir}/output.file\"&gt;   &lt;xmlcatalog refid=\"dita.catalog\"/&gt; &lt;/xslt&gt;</code></p> </li> </ul> <p>For both of these methods, make sure you use the plug-in ID (defined in the <code>plugin.xml</code> file) rather than the folder name of the plug-in. In many cases, the folder name is not the same as the plug-in ID.</p> <p>Related information </p> <p>Plug-in coding conventions</p>"},{"location":"topics/release-history/","title":"DITA-OT release history","text":"<p>Release Notes archives contain information on the changes in earlier versions.</p> <p>When migrating customizations, identify the version of the toolkit you're currently using (base version) and the version of the toolkit you want to migrate to (target version). Then, review all of the migration changes described in all of the versions from the base through the target. For instance, if you're currently on 2.2 and want to move to 3.3, you should review all of the changes in 2.3 through 3.3. You may want to start at the oldest version and read forward so you can chronologically follow the changes, since it is possible that files or topics have had multiple changes.</p> <p>Related information </p> <p>Migrating customizations</p> <p>DITA-OT 4.1 Release Notes</p> <p>DITA-OT 4.0 Release Notes</p> <p>DITA-OT 3.7 Release Notes</p> <p>DITA-OT 3.6 Release Notes</p> <p>DITA-OT 3.5 Release Notes</p> <p>DITA-OT 3.4 Release Notes</p> <p>DITA-OT 3.3 Release Notes</p> <p>DITA-OT 3.2 Release Notes</p> <p>DITA-OT 3.1 Release Notes</p> <p>DITA-OT 3.0 Release Notes</p> <p>DITA-OT 2.5 Release Notes</p> <p>DITA-OT 2.4 Release Notes</p> <p>DITA-OT 2.3 Release Notes</p> <p>DITA-OT 2.2 Release Notes</p> <p>DITA-OT 2.1 Release Notes</p> <p>DITA-OT 2.0 Release Notes</p> <p>DITA-OT 1.8 - 1.0 Release Notes</p>"},{"location":"topics/sample-pdf-theme/","title":"Sample theme file","text":"<p>Theme files can be written in either JSON or YAML format. The <code>docsrc/samples/themes</code> folder in the DITA-OT installation directory provides several examples.</p> <p>Note: The examples provided here are all in YAML format, which is generally more compact and readable than JSON.</p> <p>The YAML theme file used to produce the PDF output for the DITA-OT documentation is included in the installation directory as <code>*dita-ot-dir*/docsrc/samples``/themes/dita-ot-docs-theme.yaml</code>.</p> <p>The examples below include excerpts from this theme that show common customizations. You can adapt these examples for your own requirements.</p> <p>Tip: For an overview of the elements and other settings that the theme plug-in supports, see Styles, Page settings, Header and footer, and Variables.</p>"},{"location":"topics/sample-pdf-theme/#setting-custom-colors","title":"Setting custom colors","text":"<p>Like in CSS or Sass, you can use Variables to define brand colors and other shared values, and re-use these them in other Styles using semantic references such as <code>$brand-color-primary</code>.</p> <pre><code>brand:\n  color:\n    primary: '#1d365d'\n    secondary: '#6c757d'\n    tertiary: '#bac8d1'\n    inverse: '#e9ecef'\n    links: '#3563ab'\n    note:\n      background:\n        attention: '#fff3cd'\n        caution: '#f8d7da'\n        info: '#dce4f0'\n        tip: '#d1e7dd'\n    xml-domain: '#639'\n</code></pre>"},{"location":"topics/sample-pdf-theme/#defining-custom-font-stacks","title":"Defining custom font stacks","text":"<p>You can also use Variables to specify a prioritized list of one or more font family names and reference these values in the <code>font-family</code> property of other style keys.</p> <pre><code>pdf2:\n  font:\n    sans: 'Helvetica, Arial Unicode MS, Tahoma, Batang, SimSun'\n    serif: 'Times New Roman, Times, Arial Unicode MS, Tahoma, Batang, SimSun'\n    monospaced: 'Courier New, Courier, Arial Unicode MS, Tahoma, Batang, SimSun'\n</code></pre> <p>This theme uses the default font stacks from the default <code>org.dita.pdf2</code> plug-in, but the same approach can be used to define other font families as required by your corporate identity.</p> <p>The font variables defined here under the <code>pdf2</code> prefix could just as well be added to the <code>brand</code> key, or under a company name prefix and re-used elsewhere with references such as <code>$company-font-sans</code>.</p>"},{"location":"topics/sample-pdf-theme/#defining-page-sizes","title":"Defining page sizes","text":"<p>Page settings include page <code>size</code>, <code>orientation</code>, and margins.</p> <pre><code>page:\n  size: PA4\n  mirror-margins: true\n</code></pre> <p>The DITA-OT documentation theme uses the <code>PA4</code> page size, a 21 \u00d7 28 cm transitional format suitable for printing on both A4 and US Letter paper.</p> <p>The <code>mirror-margins</code> key sets up facing pages for double-sided documents, so the margins of the left page are a mirror image of those on the right.</p>"},{"location":"topics/sample-pdf-theme/#extending-and-overriding-themes","title":"Extending and overriding themes","text":"<p>You can extend one theme with another. The samples in the DITA-OT installation directory include additional theme files that can be used to override the <code>PA4</code> page size in the documentation theme with either A4 or Letter.</p> <pre><code># Sample PDF theme that changes page size for printing on A4 paper\nextends: ./dita-ot-docs-theme.yaml\npage:\n  size: A4\n</code></pre> <pre><code># Sample PDF theme that changes page size for printing on US Letter paper\nextends: ./dita-ot-docs-theme.yaml\npage:\n  size: Letter\n</code></pre> <p>When one of these theme extensions is passed to the <code>dita</code> command via the --theme option, the <code>page-size</code> value in the extending theme takes precedence over the original value in <code>dita-ot-docs-theme.yaml</code>.</p> <p>If you add any new keys to a theme extension, they will be overlaid onto the keys from the extended theme.</p>"},{"location":"topics/sample-pdf-theme/#setting-up-headers-and-footers","title":"Setting up headers and footers","text":"<p>The documentation theme includes sample customizations to adjust the content of the running headers and footers that appear on each page.</p> <pre><code>header:\n  color: $brand-color-secondary\n  display-align: before\n  end-indent: 10mm\n  font-family: $pdf2-font-sans\n  padding-after: 6pt\n  padding-before: 12pt\n  start-indent: 10mm\n  odd:\n    content: '{chapter}'\n    text-align: end\n  even:\n    content: '{title}'\n    text-align: start\n</code></pre> <p>These settings use the secondary brand color for page headers (as defined above under Setting custom colors), the sans-serif font families defined above under Defining custom font stacks, and position the content with indentation and padding.</p> <pre><code>footer:\n  color: $brand-color-secondary\n  end-indent: 10mm\n  font-family: $pdf2-font-sans\n  padding-after: 12pt\n  padding-before: 6pt\n  start-indent: 10mm\n  odd:\n    content: '{folio}'\n    font-weight: bold\n    text-align: end\n  even:\n    content: '{folio}'\n    font-weight: bold\n    text-align: start\n</code></pre> <p>These settings use the <code>{folio}</code> field to place the current page number on the outside edges of each page footer. The <code>content</code> key may include combinations of static text, or reference variables using curly braces. For details on the available options, see Header and footer and Variables.</p>"},{"location":"topics/sample-pdf-theme/#adding-an-image-to-the-cover-page","title":"Adding an image to the cover page","text":"<p>The <code>cover</code> and <code>cover-title</code> Styles can be used to add a background image and adjust the formatting and placement of the document title.</p> <pre><code>cover:\n  background-image: dita-ot-logo-inverse.svg\n  background-repeat: no-repeat\n  height: 25.7cm\ncover-title:\n  color: $brand-color-primary\n  font-size: 36pt\n  font-weight: bold\n  line-height: 1.5\n  space-before: 195mm\n</code></pre> <p>The DITA-OT documentation theme references a background image stored in the same folder as the theme file, and places the title at the bottom of the page by setting the <code>space-before</code> property for the <code>cover-title</code>.</p> <p>Tip: The latest version of the documentation theme is available on GitHub: dita-ot-docs-theme.yaml.</p>"},{"location":"topics/troubleshooting-overview/","title":"Error messages and troubleshooting","text":"<p>This section contains information about problems that you might encounter and how to resolve them.</p>"},{"location":"topics/using-dita-command/","title":"Building output using the <code>dita</code> command","text":"<p>You can generate output using the <code>dita</code> command-line tool. Build parameters can be specified on the command line or with <code>.properties</code> files.</p> <p>The DITA-OT client is a command-line tool with no graphical user interface. To verify that your installation works correctly, you can build output using the sample files included in the distribution package.</p> <ol> <li> <p>Open a terminal window by typing the following in the search bar:</p> <pre><code>|**Linux or macOS\u00a0**|Type `Terminal`.|\n</code></pre> <p>|Windows|Type <code>Command Prompt</code>.|</p> </li> <li> <p>At the command-line prompt, enter the following command:</p> <p><code>syntax-bash ``dita`` **--input**=*input-file* **--format**=*format* \\[*options*\\]</code></p> <p>where:</p> <ul> <li>input-file is the DITA map or DITA file that you want to process.</li> <li> <p>format is the output format (transformation type). This argument corresponds to the common parameter transtype. Use the same values as for the transtype build parameter, for example html5 or pdf.</p> </li> <li> <p>input-file is the DITA map or DITA file that you want to process.</p> </li> <li> <p>format is the output format (transformation type). This argument corresponds to the common parameter transtype. Use the same values as for the transtype build parameter, for example html5 or pdf.</p> <p>You can create plug-ins to add new output formats; by default, the following values are available:</p> <ul> <li>dita</li> <li>eclipsehelp</li> <li>html5</li> <li>htmlhelp</li> <li>markdown, markdown_gitbook, and markdown_github</li> <li>pdf</li> <li>xhtml Tip: See DITA-OT transformations (output formats) for sample command line syntax and more information on each transformation.</li> </ul> </li> <li> <p>[options] include the following optional build parameters:</p> <ul> <li> <p>--debug -d</p> <p>Debug logging prints considerably more additional information. The debug log includes all information from the verbose log, plus details on Java classes, additional Ant properties and overrides, preprocessing filters, parameters, and stages, and the complete build sequence. Debug logging requires additional resources and can slow down the build process, so it should only be enabled when further details are required to diagnose problems.</p> </li> <li> <p>--output=dir -o dir</p> <p>Specifies the path of the output directory; the path can be absolute or relative to the current directory.</p> <p>This option corresponds to the common parameter output.dir.</p> <p>By default, the output is written to the <code>out</code> subdirectory of the current directory.</p> </li> <li> <p>--filter=files</p> <p>Specifies filter file(s) used to include, exclude, or flag content. Relative paths are resolved against the current directory and internally converted to absolute paths.</p> <p>Note:</p> <p>To specify multiple filter files, use the system path separator character to delimit individual file paths (semicolon \u2018<code>;</code>\u2019 on Windows, and colon \u2018<code>:</code>\u2019 on macOS and Linux) and wrap the value in quotes:</p> <p><code>--filter=\"filter1.ditaval;filter2.ditaval;filter3.ditaval\"</code></p> <p>As of DITA-OT 3.6, the --filter option can also be passed multiple times:</p> <p><code>--filter=filter1.ditaval --filter=filter2.ditaval --filter=filter3.ditaval</code></p> <p>DITAVAL files are evaluated in the order specified, so conditions specified in the first file take precedence over matching conditions specified in later files, just as conditions at the start of a DITAVAL document take precedence over matching conditions later in the same document.</p> </li> <li> <p>--force</p> <p>Force-install an existing plug-in.</p> <p>Passed as an additional option to the installation subcommand: <code>dita install</code> plug-in-zip --force</p> </li> <li> <p>--help -h</p> <p>Print a list of available arguments, options, and subcommands.</p> </li> <li> <p>--logfile=file -l file</p> <p>Write logging messages to a file.</p> </li> <li> <p>--parameter=value __-D___parameter_=value</p> <p>Specify a value for a DITA-OT or Ant build parameter.</p> <p>The GNU-style --parameter=value form is only available for parameters that are configured in the plug-in configuration file; the Java-style -D form can also be used to specify additional non-configured parameters or set system properties.</p> <p>Parameters not implemented by the specified transformation type or referenced in a <code>.properties</code> file are ignored.</p> <p>Tip: If you are building in different environments where the location of the input files is not consistent, set args.input.dir with the <code>dita</code> command and reference its value with <code>${args.input.dir}</code> in your <code>.properties</code> file.</p> </li> <li> <p>--propertyfile=file</p> <p>Use build parameters defined in the referenced <code>.properties</code> file.</p> <p>Build parameters specified on the command line override those set in the <code>.properties</code> file.</p> </li> <li> <p>--repeat=N</p> <p>Repeat the transformation N number of times.</p> <p>This option can be used by plug-in developers to measure performance. To run a conversion five times, for example, use --repeat=5. The duration of each execution will appear in the console when the final transformation is complete.</p> <p><code>$ `dita` **--input**=`docsrc/samples/sequence.ditamap` **--format**=html5 \\        **--repeat**=5 1 11281ms 2 4132ms 3 3690ms 4 4337ms 5 3634ms</code></p> </li> <li> <p>--resource=file -r file</p> <p>Specifies resource files.</p> <p>This argument corresponds to the common parameter args.resources.</p> <p>Resource files can be used to convert partial documentation sets by processing input with additional information.</p> <p>For example, to process a single topic file with a map that contains key definitions, use a command like this:</p> <p><code>syntax-bash `dita` **--input**=`topic.dita` **--resource**=`keys.ditamap` **--format**=html5</code></p> <p>To convert a chapter map to HTML5 and insert related links from relationship tables in a separate map, use:</p> <p><code>syntax-bash `dita` **--input**=`chapter.ditamap` **--resource**=`reltables.ditamap` **--format**=html5</code></p> </li> <li> <p>--temp=dir -t dir</p> <p>Specifies the location of the temporary directory.</p> <p>This option corresponds to the common parameter dita.temp.dir.</p> <p>The temporary directory is where DITA-OT writes intermediate files that are generated during the transformation process.</p> </li> <li> <p>--verbose -v</p> <p>Verbose logging prints additional information to the console, including directory settings, effective values for Ant properties, input/output files, and informational messages to assist in troubleshooting.</p> </li> </ul> </li> </ul> <p>If processing is successful, nothing is printed in the terminal window. The built output is written to the specified output directory (by default, in the <code>out</code> subdirectory of the current directory).</p> </li> </ol> <p>Run from <code>*dita-ot-dir*/docsrc/samples</code>, the following command generates HTML5 output for the <code>sequence.ditamap</code> file:</p> <pre><code>``dita`` **--input**=`sequence.ditamap` **--format**=html5\n</code></pre> <p>For example, from <code>*dita-ot-dir*/docsrc/samples</code>, run:</p> <pre><code>`dita` **--input**=`sequence.ditamap` **--format**=html5 \\\n     **--output**=`output/sequence` \\\n     **--args.input.dir**=`*/absolute/path/to/dita-ot-dir*/docsrc/samples` \\\n     **--propertyfile**=`properties/sequence-html5.properties`\n</code></pre> <p>This builds <code>sequence.ditamap</code> to HTML5 output in <code>output/sequence</code> using the following additional parameters specified in the <code>properties/sequence-html5.properties</code> file:</p> <pre><code># Directory that contains the custom .css file:\nargs.cssroot = ${args.input.dir}/css/\n\n# Custom .css file used to style output:\nargs.css = style.css\n\n# Copy the custom .css file to the output directory:\nargs.copycss = yes\n\n# Location of the copied .css file relative to the output:\nargs.csspath = branding\n\n# Generate a full navigation TOC in topic pages:\nnav-toc = full\n</code></pre> <p>Most builds require you to specify more options than are described in this topic.</p> <p>Usually, you will want to specify a set of reusable build parameters in a <code>.properties</code> file.</p>"},{"location":"topics/using-dita-properties-file/","title":"Setting build parameters with <code>.properties</code> files","text":"<p>Usually, DITA builds require setting a number of parameters that do not change frequently. You can reference a set of build parameters defined in a <code>.properties</code> file when building output with the <code>dita</code> command. If needed, you can override any parameter by specifying it explicitly as an argument to the <code>dita</code> command.</p>"},{"location":"topics/using-dita-properties-file/#about-properties-files","title":"About <code>.properties</code> files","text":"<p>A <code>.properties</code> file is a text file that enumerates one or more name-value pairs, one per line, in the format <code>name = value</code>. The <code>.properties</code> filename extension is customarily used, but is not required.</p> <ul> <li>Lines beginning with the <code>#</code> character are comments.</li> <li> <p>Properties specified as arguments of the <code>dita</code> command override those set in <code>.properties</code> files.</p> <p>Restriction: For this reason, args.input and transtype can\u2019t be set in the <code>.properties</code> file.</p> </li> <li> <p>If you specify the same property more than once, the last instance is used.</p> </li> <li>Properties not used by the selected transformation type are ignored.</li> <li>Properties can reference other property values defined elsewhere in the <code>.properties</code> file or passed by the <code>dita</code> command. Use the Ant <code>${*property.name*}</code> syntax.</li> <li> <p>You can set properties not only for the default DITA-OT transformation types, but also for custom plugins.</p> </li> <li> <p>Create your <code>.properties</code> file.</p> <p>Tip: Copy <code>*dita-ot-dir*/docsrc/samples``/properties/template.properties</code>; this template describes each of the properties you can set.</p> <p>For example:</p> <p>```</p> </li> <li> <p>Reference your <code>.properties</code> file with the <code>dita</code> command when building your output.</p> <p><code>syntax-bash `dita` **--input**=*my.ditamap* **--format**=html5 **--propertyfile**=*my.properties*</code></p> </li> <li> <p>If needed, pass additional arguments to the <code>dita</code> command to override specific build parameters.</p> <p>For example, to build output once with <code>&lt;draft&gt;</code> and <code>&lt;required-cleanup&gt;</code> content:</p> <p><code>syntax-bash `dita` **--input**=*my.ditamap* **--format**=html5 **--propertyfile**=*my.properties* \\      **--args.draft**=yes</code></p> <p>Tip: If you are building in different environments where the location of the input files is not consistent, set args.input.dir with the <code>dita</code> command and reference its value with <code>${args.input.dir}</code> in your <code>.properties</code> file.</p> </li> </ul>"},{"location":"topics/using-dita-properties-file/#directory-that-contains-the-custom-css-file","title":"Directory that contains the custom .css file:","text":"<p>args.cssroot = ${args.input.dir}/css/</p>"},{"location":"topics/using-dita-properties-file/#custom-css-file-used-to-style-output","title":"Custom .css file used to style output:","text":"<p>args.css = style.css</p>"},{"location":"topics/using-dita-properties-file/#copy-the-custom-css-file-to-the-output-directory","title":"Copy the custom .css file to the output directory:","text":"<p>args.copycss = yes</p>"},{"location":"topics/using-dita-properties-file/#location-of-the-copied-css-file-relative-to-the-output","title":"Location of the copied .css file relative to the output:","text":"<p>args.csspath = branding</p>"},{"location":"topics/using-dita-properties-file/#generate-a-full-navigation-toc-in-topic-pages","title":"Generate a full navigation TOC in topic pages:","text":"<p>nav-toc = full ```</p>"},{"location":"topics/using-docker-images/","title":"Running the <code>dita</code> command from a Docker image","text":"<p>Docker is a platform used to build, share, and run portable application containers. As of version 3.4, the DITA-OT project provides an official Docker container image that includes everything you need to run the toolkit and publish DITA content from a containerized environment.</p>"},{"location":"topics/using-docker-images/#about-application-containers","title":"About application containers","text":"<p>Using containers to deploy applications isolates software from its environment to ensure that it works consistently despite any differences in the host operating system, for example.</p> <p>Docker containers are designed as stateless machines that can be quickly created and destroyed, started and stopped. Each Docker image provides its own private filesystem that includes only the code required to run the application itself\u200a\u2014\u200ait is not intended for persistent data storage.</p> <p>When a container is stopped, any changes made within the container are lost, so source files and generated output should be stored outside the container. These resources are attached to the container by mounting directories from the host machine.</p> <p>To run the DITA-OT image, you will need to install Docker and be able to access the GitHub Container Registry.</p> <ul> <li> <p>To download Docker Desktop, you may be prompted to sign in with your Docker\u00a0ID (or sign up to create one).</p> </li> <li> <p>Install Docker for your operating system.</p> <ul> <li>Install Docker Desktop on Windows</li> <li>Install Docker Desktop on Mac</li> <li> <p>On macOS, you can also install Docker Desktop via Homebrew:</p> <p><code>syntax-bash $ `brew` install homebrew/cask/docker `Downloading\u2026`</code></p> </li> <li> <p>When you first run the Docker Desktop application, you may be prompted to grant privileged access to allow Docker to install its networking components and links to the Docker apps. Grant this access and accept the service agreement to proceed.</p> </li> <li> <p>On Linux, install Docker Community Edition (CE) via your operating system\u2019s package manager, for example:</p> <p><code>syntax-bash $ `sudo` apt-get install docker-ce</code></p> </li> </ul> </li> <li> <p>To build output, map a host directory to a container volume and specify options for the <code>dita</code> command.</p> <p><code>syntax-bash $ `docker` run -it \\   -v /Users/*username*/source:/src ghcr.io/dita-ot/dita-ot:4.1.2 \\   -i /src/input.ditamap \\   -o /src/out \\   -f html5 -v</code></p> <p>This command sequence specifies the following options:</p> <ul> <li>-v mounts the <code>source</code> subfolder of your home directory and binds it to the <code>/src</code> volume in the container</li> <li>-i specifies the <code>input.ditamap</code> file in your <code>source</code> folder as the input map file</li> <li>-o writes the output to <code>source/out</code></li> <li>-f sets the output format to HTML5, and</li> <li>-v displays build progress messages with verbose logging On Windows, if your <code>Users</code> directory is on the <code>C:\\</code> drive, use <code>/c/Users/\u2026</code> to map the host directory:</li> </ul> <p>```</p> <p>C:\\Users\\username&gt; <code>docker</code> run -it ^   -v /c/Users/username/source:/src ghcr.io/dita-ot/dita-ot:4.1.2 ^   -i /src/input.ditamap ^   -o /src/out ^   -f html5 -v ```</p> <p>Note: The DITA-OT container image uses the <code>ENTRYPOINT</code> instruction to run the <code>dita</code> command from the <code>/opt/app/bin/</code> directory of the container automatically, so you there\u2019s no need to include the <code>dita</code> command itself, only the arguments and options you need to publish your content.</p> </li> </ul> <p>Related information </p> <p>DITA and Markdown and Docker, oh my\u2026</p> <p>Using the Open Toolkit Through Docker Containers</p>"},{"location":"topics/using-github-actions/","title":"Running the <code>dita</code> command from a GitHub Action","text":"<p>GitHub Actions are a CI/CD workflow mechanism attached to GitHub. Each action is an individual unit of functionality that can be combined with other GitHub Actions to create workflows, which are triggered in response to certain GitHub events. As of version 3.6.1, the DITA-OT project provides an official dita-ot-action that can be used as a step within a GitHub workflow to publish documentation as part of your CI/CD pipeline.</p>"},{"location":"topics/using-github-actions/#about-github-actions","title":"About GitHub Actions","text":"<p>GitHub Actions can automate tasks such as document generation as part of your software development life cycle. GitHub Actions are event-driven, allowing a series of tasks to run one after another when a specified event has occurred.</p> <p>Each step is an individual atomic task that can run commands in a job. A step can be either an action or a shell command. Each step in a job executes on the same runner, allowing the actions in that job to share data with each other, therefore files generated through the <code>dita-ot-build</code> action can be archived or published by later actions within the same job.</p> <ol> <li> <p>In your GitHub repository, create the <code>.github/workflows/</code> directory to store your workflow files.</p> </li> <li> <p>In the <code>.github/workflows/</code> directory, create a new file called <code>dita-ot-build-actions.yml</code> and add the following code.</p> <p><code>name: CI 'on':   push:     branches:       - master jobs:   build-dita:     name: Build DITA     runs-on: ubuntu-latest     steps:       - name: Git checkout         uses: actions/checkout@v2</code></p> <p>This setup ensures the action runs whenever code is updated on the <code>master</code> branch and checks out the codebase.</p> </li> <li> <p>In the same file, add the following code.</p> <p><code>- name: Build PDF         uses: dita-ot/dita-ot-action@master         with:           input: document.ditamap           transtype: pdf           output-path: out</code></p> <p>This action specifies the following:</p> <ul> <li>name defines the name of the action to be displayed within the GitHub repository</li> <li>uses specifies the name and version of the GitHub Action to run. Use <code>dita-ot/dita-ot-action@master</code> to run the latest version.</li> <li>input specifies the name and location of the input map file within the GitHub repository (relative to the repository root)</li> <li>transtype sets the output format to PDF, and</li> <li>output-path writes the output to the <code>out</code> folder within the running action</li> </ul> </li> </ol> <p>The <code>docsrc/samples</code> folder in the DITA-OT installation directory contains several complete examples. The following GitHub Action generates styled HTML and PDF outputs.</p> <pre><code>name: CI\n'on':\n  push:\n    branches:\n      - master\njobs:\n  build-dita:\n    name: Build DITA\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v2\n      - name: Build HTML5 + Bootstrap\n        uses: dita-ot/dita-ot-action@master\n        with:\n          plugins: |\n            net.infotexture.dita-bootstrap\n          input: document.ditamap\n          transtype: html5-bootstrap\n          output-path: out\n\n      - name: Build PDF\n        uses: dita-ot/dita-ot-action@master\n        with:\n          install: |\n            # Run some arbitrary installation commands\n            apt-get update -q\n            apt-get install -qy --no-install-recommends nodejs\n            nodejs -v\n\n            # Install plugins\n            dita install fox.jason.extend.css\n            dita install org.doctales.xmltask\n            dita install fox.jason.prismjs\n          build: |\n            # Use the dita command line\n            dita -i document.ditamap -o out -f pdf --filter=filter1.ditaval\n\n      - name: Upload DITA Output to a ZIP file\n        uses: actions/upload-artifact@v2\n        with:\n          name: dita-artifact\n          path: 'out'\n\n      - name: Deploy DITA Output to GitHub Pages\n        uses: JamesIves/github-pages-deploy-action@3.7.1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BRANCH: gh-pages # The branch the action should deploy to.\n          FOLDER: out # The folder the action should deploy.\n</code></pre> <p>The Build HTML5 + Bootstrap step reuses the input, transtype and output-path settings. In addition, additional DITA-OT plug-ins can be loaded using the plugins parameter, with each plug-in separated by a comma or new line separator.</p> <p>The Build PDF step uses an alternative syntax where the install and build parameters are used to run arbitrary commands from the command line.</p> <p>See the <code>docsrc/samples/github-actions</code> folder in the DITA-OT installation directory for additional examples of GitHub Actions for different scenarios.</p>"},{"location":"topics/using-project-files/","title":"Publishing with project files","text":"<p>DITA-OT 3.4 introduced project files that allow you to publish multiple deliverables at once. Each deliverable specifies a re-usable source <code>context</code> that groups the maps or topics you want to publish, an <code>output</code> folder, and a <code>publication</code> format (such as HTML, or PDF) with transformation parameters.</p>"},{"location":"topics/using-project-files/#about-project-files","title":"About project files","text":"<p>Project files may be defined in one of three formats: XML, JSON, or YAML. The XML format can be validated with a RELAX\u00a0NG schema provided in the <code>resources</code> folder of the DITA-OT installation (<code>project.rnc</code>).</p> <p>Note: The XML project file format is the normative version provided for interoperability with existing XML-based toolchains. The JSON and YAML versions are alternative compact formats that are easier to read and write, but otherwise equivalent to the XML syntax.</p> <p>Whereas <code>.properties</code> files can only be used to set parameters, project files go further, allowing you to define multiple deliverables with separate input files and output folders and formats for each publication. A project file can also refer to other project files with <code>include</code> statements. Deliverables, contexts, and publications can either be entirely self-contained, or reference others with <code>idref</code> attributes, so you can re-use common configuration structures across (and within) projects.</p> <p>Another advantage of project files over <code>.properties</code> files is that they allow you to specify paths relative to the project file, even for parameters that require absolute paths, such as:</p> <ul> <li><code>args.cssroot</code></li> <li><code>args.ftr</code></li> <li><code>args.hdf</code></li> <li><code>args.hdr</code></li> </ul>"},{"location":"topics/using-project-files/#syntax","title":"Syntax","text":"<p>Though the exact syntax differs slightly, the basic structure of project files is similar in all supported formats.</p> <p>The following settings can be defined for each <code>deliverable</code>:</p> <ul> <li> <p>a source <code>context</code> that may include:</p> <ul> <li>an <code>id</code> that allows you to refer to this context from other contexts or projects</li> <li>an <code>idref</code> that refers to another context</li> <li>a series of <code>input</code> files (the DITA maps or topics you want to publish)</li> <li>a <code>profile</code> with a series of DITAVAL files used to filter the content of all publications in the deliverable</li> <li>an <code>output</code> location (relative to the CLI --output directory)</li> </ul> </li> <li> <p>a <code>publication</code> type that defines:</p> <ul> <li>an <code>id</code> that allows you to refer to this publication from other publications or projects</li> <li>an <code>idref</code> that refers to another publication</li> <li>a <code>transtype</code> that specifies an output format (such as HTML, or PDF)</li> <li>a series of <code>param</code> elements, with any parameters to set for this transformation type, specified via <code>name</code> and either <code>href</code>, <code>path</code>, or <code>value</code></li> <li>a <code>profile</code> with any additional DITAVAL files used to filter the content of the publication (in addition to any filters defined in the map context) Parameters defined in a publication can override those in other publications that are referenced via <code>idref</code>.</li> </ul> <p><code>&lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;   &lt;publication transtype=\"html5\" id=\"common-html5\"&gt;     &lt;param name=\"nav-toc\" value=\"partial\"/&gt;   &lt;/publication&gt;   &lt;deliverable&gt;     &lt;context&gt;       &lt;input href=\"root.ditamap\"/&gt;     &lt;/context&gt;     &lt;output href=\"./out\"/&gt;     &lt;publication idref=\"common-html5\"&gt;       &lt;param name=\"nav-toc\" value=\"full\"/&gt; &lt;!-- override common HTML publication --&gt;     &lt;/publication&gt;   &lt;/deliverable&gt; &lt;/project&gt;</code></p> </li> </ul> <p>Tip:</p> <ul> <li>Use <code>href</code> for web addresses and other resources that should resolve to an absolute URI. Relative references are resolved using the project file as a base directory.</li> <li>Use <code>path</code> for parameters that require an absolute value, like args.cssroot. Paths may be defined relative to the project file, but are always expanded to an absolute system path.</li> <li>Use <code>value</code> to define strings and relative values for properties like args.csspath, which is used to describe a relative path in the output folder. String values are passed as is.</li> </ul>"},{"location":"topics/using-project-files/#project-filtering","title":"Project filtering","text":"<p>As of DITA-OT 4.0, you can add DITAVAL filters to both contexts and publications. If a set of filter conditions applies to most or all of your deliverables, then it should probably be defined in a publication, rather than in contexts.</p> <p>For example, consider a case with 100 maps that have multiple <code>@product</code> variants, but every one of which is published in two <code>@audience</code> conditions (internal or external). If <code>@audience</code> is varied in publications, the structure is orthogonal and well-organized:</p> <p></p> <ol> <li> <p>Create a project file to define the deliverables in your publication project.</p> <p>For example:</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;?xml-model href=\"https://www.dita-ot.org/rng/project.rnc\" type=\"application/relax-ng-compact-syntax\"?&gt; &lt;project xmlns=\"https://www.dita-ot.org/project\"&gt;   &lt;deliverable id=\"pdf\"&gt;     &lt;context name=\"User Guide\"&gt;       &lt;input href=\"../../userguide-book.ditamap\"/&gt;     &lt;/context&gt;     &lt;output href=\".\"/&gt;     &lt;publication transtype=\"pdf2\"&gt;       &lt;param name=\"args.chapter.layout\" value=\"BASIC\"/&gt;       &lt;param name=\"args.gen.task.lbl\" value=\"YES\"/&gt;       &lt;param name=\"include.rellinks\" value=\"#default external\"/&gt;       &lt;param name=\"outputFile.base\" value=\"userguide\"/&gt;       &lt;param name=\"theme\" path=\"../themes/dita-ot-docs-theme.yaml\"/&gt;       &lt;profile&gt;         &lt;ditaval href=\"../../resources/pdf.ditaval\"/&gt;       &lt;/profile&gt;     &lt;/publication&gt;   &lt;/deliverable&gt; &lt;/project&gt;</code></p> </li> <li> <p>Pass your project file to the <code>dita</code> command to build output.</p> <p><code>syntax-bash `dita` **--project**=*pdf.xml*</code></p> </li> <li> <p>If needed, pass additional arguments to the <code>dita</code> command to override specific build parameters.</p> <p>For example, to build output once with <code>&lt;draft&gt;</code> and <code>&lt;required-cleanup&gt;</code> content:</p> <p><code>syntax-bash `dita` **--project**=*pdf.xml* **--args.draft**=yes</code></p> </li> <li> <p>If your project contains multiple deliverables, you can pass the --deliverable option to generate output for a single deliverable ID.</p> <p><code>syntax-bash `dita` **--project**=*all.xml* **--deliverable**=htmlhelp</code></p> </li> </ol> <p>Related information </p> <p>Editing DITA Open Toolkit Project files</p> <p>One file to rule them all (DITA Project)</p>"}]}